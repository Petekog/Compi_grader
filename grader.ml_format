#use "tag-parser.ml";;

let rec flatten_thunks e =
  match e with
  | If(t, th, el) -> If(flatten_thunks t, flatten_thunks th, flatten_thunks el)
  | Seq(l) -> Seq(List.map flatten_thunks l)
  | Or(l) -> Or(List.map flatten_thunks l)
  | Set(var, exp) -> Set(var, flatten_thunks exp)
  | LambdaSimple(vars, body) -> LambdaSimple(vars, flatten_thunks body)
  | LambdaOpt(vars, var, body) -> LambdaOpt(vars, var, flatten_thunks body)
  | Applic(LambdaSimple([], body), []) ->flatten_thunks body
  | Applic(e, args) -> Applic(flatten_thunks e, List.map flatten_thunks args)
  | _ -> e;;


let input = List.map flatten_thunks (Tag_Parser.tag_parse_expressions {});;
let output = List.map flatten_thunks {};;
Printf.printf "%b" (List.for_all2 expr_eq  input output);;
