#use "semantic-analyser.ml";;
   
let input = Semantics.run_semantics  (LambdaSimple (["x"],
  Or
   [Applic
     (LambdaOpt (["y"], "z",
       Applic
        (LambdaSimple ([],
          Applic (LambdaSimple ([], Applic (Var "+", [Var "x"; Var "z"])), [])),
        [])),
     [Var "x"; Const (Sexpr (Number (Fraction (1, 1))))]);
    LambdaSimple ([], Set (Var "x", Var "w")); Applic (Var "w", [Var "w"])]));;

let output = LambdaSimple' (["x"],
 Seq'
  [Set' (Var' (VarParam ("x", 0)), Box' (VarParam ("x", 0)));
   Or'
    [Applic'
      (LambdaOpt' (["y"], "z",
        ApplicTP'
         (LambdaSimple' ([],
           ApplicTP'
            (LambdaSimple' ([],
              ApplicTP' (Var' (VarFree "+"),
               [BoxGet' (VarBound ("x", 2, 0)); Var' (VarBound ("z", 1, 1))])),
            [])),
         [])),
      [BoxGet' (VarParam ("x", 0)); Const' (Sexpr (Number (Fraction (1, 1))))]);
     LambdaSimple' ([], BoxSet' (VarBound ("x", 0, 0), Var' (VarFree "w")));
     ApplicTP' (Var' (VarFree "w"), [Var' (VarFree "w")])]]);;                       
Printf.printf "%b" (List.for_all2 expr'_eq  [input] [output]);;

