#use "semantic-analyser.ml";;
   
let input = Semantics.run_semantics  (Applic
  (LambdaSimple (["x"],
    If (Applic (Var "x", [Const (Sexpr (Number (Fraction(1, 1))))]),
     Applic (Var "x", [Const (Sexpr (Number (Fraction(2, 1))))]),
     Applic
      (LambdaSimple (["x"], Set (Var "x", Const (Sexpr (Number (Fraction (0, 1))))),
      [Const (Sexpr (Number (Fraction (3, 1))))]))),
  [LambdaSimple (["x"], Var "x")]));;

let output = Applic'
 (LambdaSimple' (["x"],
   If'
    (Applic' (Var' (VarParam ("x", 0)), [Const' (Sexpr (Number (Fraction(1, 1))))]),
    ApplicTP' (Var' (VarParam ("x", 0)), [Const' (Sexpr (Number (Fraction (2, 1))))]),
    ApplicTP'
     (LambdaSimple' (["x"],
       Set' (Var' (VarParam ("x", 0)), Const' (Sexpr (Number (Fraction (0, 1)))))),
     [Const' (Sexpr (Number (Fraction (3, 1))))]))),
 [LambdaSimple' (["x"], Var' (VarParam ("x", 0)))]);;                       
Printf.printf "%b" (List.for_all2 expr'_eq  [input] [output]);;

