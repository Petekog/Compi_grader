diff --git a/reader.ml b/reader.ml
index 32445c2..a07c4e5 100644
--- a/reader.ml
+++ b/reader.ml
@@ -1,6 +1,7 @@
-
 #use "pc.ml";;
 
+open PC;;
+
 exception X_not_yet_implemented;;
 exception X_this_should_not_happen;;
   
@@ -31,6 +32,8 @@ let rec sexpr_eq s1 s2 =
 
 module Reader: sig
   val read_sexprs : string -> sexpr list
+
+  val sexpr_parse : string -> sexpr
 end
 = struct
 let normalize_scheme_symbol str =
@@ -40,7 +43,247 @@ let normalize_scheme_symbol str =
 	s) then str
   else Printf.sprintf "|%s|" str;;
 
+(* --------------- General functions --------------- *)
+let make_paired nt_left nt_right nt =
+  let nt = caten nt_left nt in
+  let nt = pack nt (function (_, e) -> e) in
+  let nt = caten nt nt_right in
+  let nt = pack nt (function (e, _) -> e) in
+  nt;;
+
+let nt_whitespaces = star nt_whitespace;;
+let make_spaced nt = make_paired nt_whitespaces nt_whitespaces nt;;
+
+let paren_parser nt = 
+  let lparen = make_spaced (char '(') in
+  let rparen = make_spaced (char ')') in
+  let nt = make_paired lparen rparen nt in
+  nt;;
+
+let sign_parser nt_sign nt = 
+  let nt = caten (make_spaced nt_sign) nt in
+  let nt = pack nt (fun (_, e) -> e) in
+  nt;;
+
+let nt_dot = (char '.');;
+
+let nt_digit = range '0' '9';;
+
+let char_to_list nt = pack nt (fun x -> [x]);;
+
+let quote_parser nt_sign nt_sexp name = 
+  let nt = sign_parser nt_sign nt_sexp in
+  let tok = pack nt (fun s -> Pair(Symbol(name), Pair(s, Nil))) in
+  tok;;
+
+(* --------------- Sexp parser --------------- *)
+
+let rec sexpr_parser s = 
+  let nt_skip_whitespace = pack nt_whitespace (fun _ -> ()) in
+  let nt_skip = star (disj nt_skip_whitespace comments_parser) in
+  let nt = disj_list 
+  [
+    bool_parser; 
+    char_parser; 
+    number_parser;
+    string_parser; 
+    symbol_parser; 
+    list_parser;
+    dotted_list_parser;
+    quoted_parser;
+    quasi_quoted_parser;
+    unquoted_parser;
+    unquote_and_spliced_parser
+  ] in 
+  let nt = make_paired nt_skip nt_skip nt in
+  nt s
+
+(* --------------- Comments --------------- *)
+and line_comment_parser s = 
+  let nt_newline = char '\n' in
+  let nt_end_of_comment = disj nt_end_of_input (char_to_list nt_newline) in
+  let nt_toskip = diff nt_any nt_end_of_comment in
+  let nt_comment = caten (star nt_toskip) nt_end_of_comment in
+  let nt_comment = caten (char ';') nt_comment in
+  let nt_comment = pack nt_comment (fun _ -> ()) in
+  nt_comment s
+
+and sexpr_comment_parser s = 
+  let nt = caten (word "#;") sexpr_parser in
+  let nt = pack nt (fun _ -> ()) in
+  nt s
+
+and comments_parser s = disj line_comment_parser sexpr_comment_parser s
+
+(* --------------- Boolean --------------- *)
+and bool_parser s = 
+  let nt_true = pack (word_ci "#t") (fun _ -> Bool(true)) in
+  let nt_false = pack (word_ci "#f") (fun _ -> Bool(false)) in
+  let nt = disj nt_true nt_false in
+  nt s
+
+(* --------------- Char --------------- *)
+and char_parser s = 
+  let nt_char_prefix = word "#\\" in
+  let visible_char = pack (const (fun ch -> ch > ' ')) (fun c -> Char(c)) in
+  let named_char = disj_list 
+    [
+      (pack (word_ci "newline") (fun _ -> Char('\n')));
+      (pack (word_ci "nul") (fun _ -> Char('\000'))); 
+      (pack (word_ci "page") (fun _ -> Char('\012'))); 
+      (pack (word_ci "return") (fun _ -> Char('\013'))); 
+      (pack (word_ci "space") (fun _ -> Char('\032'))); 
+      (pack (word_ci "tab") (fun _ -> Char('\t')))
+    ] in
+  let nt_char = caten nt_char_prefix (disj named_char visible_char) in
+  let tok_char = pack nt_char (fun (_, e) -> e) in
+  tok_char s
 
-let read_sexprs string = raise X_not_yet_implemented;;
+(* --------------- Number --------------- *)
+and number_parser s = 
+  let list_to_int lst = int_of_string(list_to_string lst) in
+  let natural = pack (plus nt_digit) list_to_int in
+
+  (*  Integer  *)
+  let int_parser = 
+    let integer_sexp (e, s) = 
+      match e with
+        | None -> s
+        | Some(sign) -> match sign with
+          | '+' -> s
+          | '-' -> -1 * s
+        | _ -> raise X_this_should_not_happen in
+    let nt = caten (maybe (disj (char '+') (char '-'))) natural in
+    let nt = pack nt integer_sexp in
+    nt in
+
+  let integer_parser = 
+    let nt = int_parser in
+    let nt = pack nt (fun n -> Number(Fraction(n, 1))) in
+    nt in
+
+  (*  Fraction  *)
+  let fraction_parser = 
+    let fraction_sexp i n = 
+      let rec gcd a b = 
+        if b = 0 then a
+        else gcd b (a mod b) in
+        
+      let g = gcd i n in
+      Number(Fraction(i / g, n / g)) in
+      
+    let nt = caten int_parser (char '/') in
+    let nt = pack nt (fun (e, _) -> e) in
+    let nt = caten nt natural in
+    let nt = pack nt (fun (i, n) -> fraction_sexp i n) in
+    nt in
+
+  (*  Float  *)
+  let float_parser = 
+    let float_sexp i m = 
+      if i < 0.0 then Number(Float(i -. m))
+      else Number(Float(i +. m)) in
+    let natural = plus nt_digit in
+    let nt_mantissa = pack natural (fun ls -> String.concat "0." [""; (list_to_string ls)]) in
+    let nt_mantissa = pack nt_mantissa (fun s -> float_of_string s) in
+    let nt = caten int_parser nt_dot in
+    let nt = pack nt (fun (e, _) -> float_of_int e) in
+    let nt = caten nt nt_mantissa in
+    let nt = pack nt (fun (i, m) -> float_sexp i m) in
+    nt in
+
+  (*  Scientific notation  *)
+  let scientific_notation_parser = 
+    let rec pow exp res = 
+      if exp = 0 then res
+      else if exp > 0 then pow (exp - 1) (res *. 10.0)
+      else pow (exp + 1) (res /. 10.0) in
+
+    let nt = disj float_parser integer_parser in
+    let nt = caten nt (char_ci 'e') in
+    let nt = pack nt (fun (e, _) -> e) in
+    let nt = caten nt int_parser in
+
+    let tok = pack nt (fun (n, exp) -> 
+      let num = match n with
+        | Number(Float(x)) -> x
+        | Number(Fraction(x, 1)) -> (float_of_int x) 
+        | _ -> raise X_this_should_not_happen in
+      Number(Float(pow exp num))) in
+    tok in
+
+  let nt_number = disj_list [scientific_notation_parser; float_parser; fraction_parser; integer_parser] in
+  let nt_symbol_not_number = diff symbol_parser (plus nt_digit) in
+  let nt_number = not_followed_by nt_number nt_symbol_not_number in
+  nt_number s
+
+(* --------------- String --------------- *)
+and string_parser s = 
+  let meta_char = disj_list 
+  [
+    (pack (word "\\\\") (fun _ -> '\\')); 
+    (pack (word "\\\"") (fun _ -> '"'));
+    (pack (word "\\t") (fun _ -> '\t'));
+    (pack (word "\\f") (fun _ -> '\012'));
+    (pack (word "\\n") (fun _ -> '\n'));
+    (pack (word "\\r") (fun _ -> '\r'))
+  ] in
+  let literal_char = diff nt_any (one_of "\\\"") in
+  let string_char = disj literal_char meta_char in
+  let nt_string = make_paired (char '\"') (char '\"') (star string_char) in
+  let tok_string = pack nt_string (fun s -> String(list_to_string s)) in
+  tok_string s
+
+(* --------------- Symbol --------------- *)
+and symbol_parser s = 
+  let letters = one_of_ci "abcdefghijklmnopqrstuvwxyz" in
+  let punctuation = one_of "!$^*-_=+<>/?:" in
+  let symbol_char_no_dot = disj_list [nt_digit; letters; punctuation] in
+  let symbol_char = disj symbol_char_no_dot nt_dot in
+  let nt_symbol_plus = caten symbol_char (plus symbol_char) in
+  let nt_symbol_plus = pack nt_symbol_plus (fun (e, s) -> e::s) in
+  let nt_symbol = disj nt_symbol_plus (char_to_list symbol_char_no_dot) in
+  let tok_symbol = pack nt_symbol
+    (fun lst -> Symbol (String.lowercase_ascii (list_to_string lst))) in
+  tok_symbol s
   
+(* --------------- List --------------- *)
+and list_parser s = 
+  let rec list_sexpr = function
+    | [] -> Nil
+    | head::tail -> Pair(head, (list_sexpr tail)) in
+
+  let nt_list = paren_parser (star sexpr_parser) in
+  let tok_list = pack nt_list (fun lst -> (list_sexpr lst)) in
+  tok_list s
+
+(* --------------- Dotted list --------------- *)
+and dotted_list_parser s = 
+  let rec list_sexpr = function
+    | head::[] -> head
+    | head::tail -> Pair(head, (list_sexpr tail))
+    | [] -> raise X_this_should_not_happen in
+
+  let nt_dot_list = caten (plus sexpr_parser) nt_dot in
+  let nt_dot_list = pack nt_dot_list (fun (e, _) -> e) in
+  let nt_dot_list = caten nt_dot_list sexpr_parser in
+  let nt_dot_list = pack nt_dot_list (fun (e, s) -> List.append e [s]) in
+  let nt_dot_list = paren_parser nt_dot_list in
+  let tok_dot_list = pack nt_dot_list (fun lst -> (list_sexpr lst)) in
+  tok_dot_list s
+
+(* --------------- Quotes --------------- *)
+and quoted_parser s = quote_parser (word "'") sexpr_parser "quote" s
+and quasi_quoted_parser s = quote_parser (word "`") sexpr_parser "quasiquote" s
+and unquoted_parser s = quote_parser (word ",") sexpr_parser "unquote" s
+and unquote_and_spliced_parser s = quote_parser (word ",@") sexpr_parser "unquote-splicing" s;;
+
+let sexpr_parse string = 
+  let (e, s) = (sexpr_parser (string_to_list string)) in
+  e;;
+
+let read_sexprs string = 
+  let (e, s) = ((star sexpr_parser) (string_to_list string)) in
+  e;;
+
 end;; (* struct Reader *)
diff --git a/readme.txt b/readme.txt
index e69de29..b18323e 100644
--- a/readme.txt
+++ b/readme.txt
@@ -0,0 +1,5 @@
+Dor Elbaz 315074021
+Linoy Margan 316523463
+
+We assert that the work we submitted is 100% our own. We have not received anypart from any other student in the class, nor have we give parts of it for use to others.Nor have we used code from other sources: Courses taught previously at this university,courses taught at other universities, various bits of code found on the Internet, etc.We realize that should our code be found to contain code from other sources, that aformal case shall be opened against us with va’adat mishma’at, in pursuit of disciplinary action.
+
diff --git a/semantic-analyser.ml b/semantic-analyser.ml
index 8e684f0..98f50df 100644
--- a/semantic-analyser.ml
+++ b/semantic-analyser.ml
@@ -69,17 +69,73 @@ end;;
 
 module Semantics : SEMANTICS = struct
 
-let annotate_lexical_addresses e = raise X_not_yet_implemented;;
+let rec search_var var env idx = match env with
+  | [] -> -1
+  | lst::rest_env -> 
+    let var_in_lst = List.exists (fun x -> (String.equal x var)) lst in
+    if var_in_lst then idx
+    else search_var var rest_env (idx + 1)
 
-let annotate_tail_calls e = raise X_not_yet_implemented;;
+let rec get_minor_index var lst idx = match lst with
+  | [] -> raise X_syntax_error
+  | cur::rest -> 
+    if (String.equal cur var) then idx
+    else get_minor_index var rest (idx + 1)
 
-let box_set e = raise X_not_yet_implemented;;
+let make_var var env = 
+  let idx = search_var var env 0 in match idx with
+  | -1 -> Var'(VarFree(var))
+  | 0 -> Var'(VarParam(var, (get_minor_index var (List.nth env 0) 0)))
+  | n -> Var'(VarBound(var, (n - 1), (get_minor_index var (List.nth env n) 0)))
+
+let rec annotate_addrs exp env = match exp with
+  | Const(sexp) -> Const'(sexp)
+  | Var(s) -> make_var s env
+  | If(test, dit, dif) -> If'(annotate_addrs test env, annotate_addrs dit env, annotate_addrs dif env)
+  | Seq(exp_list) -> Seq'(List.map (fun e -> annotate_addrs e env) exp_list)
+  | Set(var, value) -> 
+    let var = annotate_addrs var env in (match var with
+      | Var'(v) ->  Set'(v, annotate_addrs value env)
+      | _ -> raise X_syntax_error)
+  | Def(var, value) -> 
+    let var = annotate_addrs var env in (match var with
+      | Var'(v) ->  Def'(v, annotate_addrs value env)
+      | _ -> raise X_syntax_error)
+  | Or(exp_list) -> Or'(List.map (fun e -> annotate_addrs e env) exp_list) 
+  | LambdaSimple(args, body) -> LambdaSimple'(args, annotate_addrs body (args::env))
+  | LambdaOpt(args, optional_var, body) -> LambdaOpt'(args, optional_var, annotate_addrs body ((List.append args [optional_var])::env))
+  | Applic(proc, args_list) -> Applic'(annotate_addrs proc env, List.map (fun e -> annotate_addrs e env) args_list)
+
+let annotate_lexical_addresses e = annotate_addrs e [];;  
+
+let rec annotate_false_but_last exp_list tp = match exp_list with
+  | exp::[] -> [annotate_tp exp tp]
+  | exp::rest_list -> (annotate_tp exp false)::(annotate_false_but_last rest_list tp)
+  | _ -> raise X_syntax_error
+
+and annotate_tp e tp = match e with
+  | Const'(_) -> e
+  | Var'(_) -> e
+  | If'(test, dit, dif) -> If'(annotate_tp test false, annotate_tp dit tp, annotate_tp dif tp)
+  | Seq'(exp_list) -> Seq'(annotate_false_but_last exp_list tp)
+  | Set'(var, value) -> Set'(var, annotate_tp value false)
+  | Def'(var, value) -> Def'(var, annotate_tp value false)
+  | Or'(exp_list) -> Or'(annotate_false_but_last exp_list tp) 
+  | LambdaSimple'(args, body) -> LambdaSimple'(args, annotate_tp body true)
+  | LambdaOpt'(args, optional_var, body) -> LambdaOpt'(args, optional_var, annotate_tp body true)
+  | Applic'(proc, args_list) -> 
+    let annotate_args = List.map (fun e -> annotate_tp e false) args_list in
+    if tp then ApplicTP'(annotate_tp proc false, annotate_args)
+    else Applic'(annotate_tp proc false, annotate_args)
+  | _ -> e
+
+let annotate_tail_calls e = annotate_tp e false;;
+
+let box_set e = e;;
 
 let run_semantics expr =
   box_set
     (annotate_tail_calls
        (annotate_lexical_addresses expr));;
   
-end;; (* struct Semantics *)
-
-
+end;; (* struct Semantics *)
\ No newline at end of file
diff --git a/tag-parser.ml b/tag-parser.ml
index 138249e..c551504 100644
--- a/tag-parser.ml
+++ b/tag-parser.ml
@@ -1,5 +1,7 @@
 #use "reader.ml";;
 
+open Reader;;
+
 type constant =
   | Sexpr of sexpr
   | Void
@@ -46,6 +48,7 @@ exception X_syntax_error;;
 
 module type TAG_PARSER = sig
   val tag_parse_expressions : sexpr list -> expr list
+  val tag_parse : sexpr -> expr
 end;; (* signature TAG_PARSER *)
 
 module Tag_Parser : TAG_PARSER = struct
@@ -58,8 +61,237 @@ let reserved_word_list =
 
 (* work on the tag parser starts here *)
 
-let tag_parse_expressions sexpr = raise X_not_yet_implemented;;
+let rec tag_parse = function
+  | Bool(x) -> Const(Sexpr(Bool(x)))
+  | Nil -> Const(Void)
+  | Char(x) -> Const(Sexpr(Char(x)))
+  | Number(x) -> Const(Sexpr(Number(x)))
+  | String(x) -> Const(Sexpr(String(x)))
+  | Symbol(x) -> tag_parse_symbol x
+  | Pair(_,_) as p -> tag_parse_pair p
+
+(* --------------- Symbol --------------- *)
+
+and tag_parse_symbol sym = 
+  let is_reserved_word sym = (List.exists (fun x -> (String.equal x sym)) reserved_word_list) in
+  if (is_reserved_word sym) then raise X_syntax_error
+  else Var(sym)
+
+(* --------------- Lambda --------------- *)
+
+and parse_lambdasimple_arguments = function
+  | Nil -> []
+  | Pair(Symbol(x), rest) -> x::(parse_lambdasimple_arguments rest) 
+  | _ -> raise X_syntax_error
+
+and parse_lambdaopt_arguments = function
+  | Symbol(x) -> ([], x)
+  | Pair(Symbol(x), rest) -> 
+      let (args_list, last) = parse_lambdaopt_arguments rest in 
+      (x::args_list, last)
+  | _ -> raise X_syntax_error
+
+and is_lambda_simple = function
+  | Nil -> true
+  | Pair(_, rest) -> is_lambda_simple rest
+  | _ -> false
+
+and is_lambda_variadic = function
+  | Symbol(s) -> true
+  | _ -> false
+
+and get_var = function
+  | Symbol(s) -> s
+  | _ -> raise X_syntax_error
+
+and tag_parse_lambda args body = 
+  let body = tag_parse_seq body in
+  if (is_lambda_simple args) then LambdaSimple(parse_lambdasimple_arguments args, body)
+  else if (is_lambda_variadic args) then LambdaOpt([], get_var args, body)
+  else 
+    let (args_list, last) = parse_lambdaopt_arguments args in
+    LambdaOpt(args_list, last, body)
+
+and tag_parse_list = function
+  | Nil -> []
+  | Pair(x, rest) -> (tag_parse x)::(tag_parse_list rest) 
+  | _ -> raise X_syntax_error
+
+(* --------------- Or --------------- *)
 
+and tag_parse_or args = 
+  let args = tag_parse_list args in
+  if (List.length args) = 0 then Const(Sexpr(Bool(false)))
+  else if (List.length args) = 1 then (List.nth args 0)
+  else Or(args)
   
-end;; (* struct Tag_Parser *)
+(* --------------- Define --------------- *)
+
+and tag_parse_define name exp = 
+  let name = tag_parse name in
+  let exp = tag_parse exp in
+  let check_valid_args = function
+    | Var(x) -> Def(name, exp)
+    | _ -> raise X_syntax_error in
+  check_valid_args name
+
+(* --------------- Squence --------------- *)
+
+and tag_parse_list_seq = function
+  | Nil -> []
+  | Pair(x, rest) -> 
+    let exp = tag_parse x in (match exp with
+      | Seq(list_exp) -> List.append list_exp (tag_parse_list_seq rest)
+      | _ -> exp::(tag_parse_list_seq rest))
+  | _ -> raise X_syntax_error
+
+and tag_parse_seq args = 
+  let args = tag_parse_list_seq args in
+  let len = List.length args in
+  if len = 0 then raise X_syntax_error
+  else if len = 1 then (List.nth args 0)
+  else Seq(args)
+
+(* --------------- Quasiquote expansion --------------- *)
+
+and expand_quasiquote = function
+  | Pair(Symbol("unquote-splicing"), Pair(x, Nil)) as p -> Pair(Symbol("quote"), Pair(p, Nil))
+  | Pair(Symbol("unquote"), Pair(x, Nil)) -> x
+  | Nil -> Pair(Symbol("quote"), Pair(Nil, Nil))
+  | Symbol(x) as s -> Pair(Symbol("quote"), Pair(s, Nil))
+  | Pair(a, b) -> (match a with
+      | Pair(Symbol("unquote-splicing"), Pair(x, Nil)) -> Pair(Symbol("append"), Pair(x, Pair(expand_quasiquote b, Nil)))
+      | _ -> (match b with
+          | Pair(Symbol("unquote-splicing"), Pair(x, Nil)) -> Pair(Symbol("cons"), Pair(expand_quasiquote a, Pair(x, Nil)))
+          | _ -> Pair(Symbol("cons"), Pair(expand_quasiquote a, Pair(expand_quasiquote b, Nil)))))
+  | _ -> raise X_syntax_error
+
+(* --------------- Cond expansion --------------- *)
+
+and expand_cond ribs =  
+  let rib_option_1 test then_exp rest_ribs = 
+    Pair(Symbol("if"), Pair(test, Pair(Pair(Symbol("begin"), then_exp), Pair(expand_cond rest_ribs, Nil)))) in
+
+  let rib_option_2 exp exprf rest_ribs = 
+    Pair(Symbol("let"), Pair(Pair(Pair(Symbol("value"), Pair(exp, Nil)), 
+    Pair(Pair(Symbol("f"), Pair(Pair(Symbol("lambda"), Pair(Nil, Pair(exprf, Nil))), Nil)), 
+    Pair(Pair(Symbol("rest"), Pair(Pair(Symbol("lambda"), Pair(Nil, Pair(expand_cond rest_ribs, Nil))), Nil)), Nil))), 
+    Pair(Pair(Symbol("if"), Pair(Symbol("value"), 
+    Pair(Pair(Pair(Symbol("f"), Nil), Pair(Symbol("value"), Nil)), 
+    Pair(Pair(Symbol("rest"), Nil), Nil)))), Nil))) in
+
+  let rib_option_3 exprs = Pair(Symbol("begin"), exprs) in
+
+  let check_rib first_rib rest_ribs = match first_rib with
+    | Pair(exp, Pair(Symbol("=>"), Pair(exprf, Nil))) -> rib_option_2 exp exprf rest_ribs
+    | Pair(Symbol("else"), exprs) -> rib_option_3 exprs
+    | Pair(test, then_exp) -> rib_option_1 test then_exp rest_ribs
+    | _ -> raise X_syntax_error
 
+  in match ribs with
+  | Nil -> Nil
+  | Pair(first_rib, rest_ribs) -> check_rib first_rib rest_ribs
+  | _ -> raise X_syntax_error
+
+(* --------------- Let expansion --------------- *)
+
+and expand_let vars exprs =  
+  let rec parse_vars = function
+    | Nil -> (Nil, Nil)
+    | Pair(first, rest) -> (match first with
+      | Pair(name, Pair(value, Nil)) -> 
+        let (names, values) = parse_vars rest in (Pair(name, names), Pair(value, values))
+      | _ -> raise X_syntax_error)
+    | _ -> raise X_syntax_error in
+
+  let (names, values) = parse_vars vars in
+    Pair(Pair(Symbol("lambda"), Pair(names, exprs)), values)
+
+
+(* --------------- Let* expansion --------------- *)
+
+and expand_let_star first_var rest_vars exprs =  
+  let parse_rest_vars = function
+    | Nil -> Pair(Symbol("let"), Pair(Pair(first_var, Nil), exprs))
+    | Pair(_, _) -> Pair(Symbol("let"), Pair(Pair(first_var, Nil), 
+                         Pair((Pair((Symbol("let*")), Pair(rest_vars, exprs))), Nil)))
+  
+    | _ -> raise X_syntax_error in
+    parse_rest_vars rest_vars
+
+(* --------------- Letrec expansion --------------- *)
+
+and expand_letrec vars exprs =  
+  let rec make_exp_list = function
+    | Nil -> (Nil, exprs)
+    | Pair(first, rest) -> (match first with
+      | Pair(var, Pair(value, Nil)) -> 
+          let (bindings, set_list) = (make_exp_list rest) in
+          (Pair(Pair(var, Pair(Pair(Symbol("quote"), Pair(Symbol("whatever"), Nil)), Nil)), bindings),
+          Pair(Pair(Symbol("set!"), Pair(var, Pair(value, Nil))), set_list))
+        | _ -> raise X_syntax_error)   
+    | _ -> raise X_syntax_error in
+
+  let (bindings, set_list) = make_exp_list vars in
+  Pair(Symbol("let"), Pair(bindings, set_list))
+
+
+(* --------------- And expansion --------------- *)
+
+and expand_and = function
+  | Nil -> Bool(true)
+  | Pair(exp, Nil) -> exp
+  | Pair(exp, rest) -> Pair(Symbol("if"), Pair(exp, Pair(Pair(Symbol("and"), rest), Pair(Bool(false), Nil))))
+  | _ -> raise X_syntax_error 
+
+(* --------------- Pset! expansion --------------- *)
+
+and expand_pset exprs = 
+  let rec make_set_exp_list = function
+    | Nil -> (Nil, Nil)
+    | Pair(first, rest) -> (match first with
+      | Pair(Symbol(name) as var, Pair(value, Nil)) -> 
+          let var_name = Symbol(String.concat "_" [name; "dummy"]) in
+          let (bindings, body) = (make_set_exp_list rest) in
+          (Pair(Pair(var_name, Pair(value, Nil)), bindings),
+          Pair(Pair(Symbol("set!"), Pair(var, Pair(var_name, Nil))), body))
+      | _ -> raise X_syntax_error)
+    | _ -> raise X_syntax_error in
+
+  let (bindings, body) = make_set_exp_list exprs in
+  Pair(Symbol("let"), Pair(bindings, body))
+  
+
+(* --------------- Pair --------------- *)
+
+and tag_parse_pair = function
+  | Pair(Symbol("if"), Pair(test, Pair(dit, Pair(dif, Nil)))) -> If(tag_parse test, tag_parse dit, tag_parse dif)
+  | Pair(Symbol("if"), Pair(test, Pair(dit,  Nil))) -> If(tag_parse test, tag_parse dit, Const(Void))
+  | Pair(Symbol("lambda"), Pair(args, body)) -> tag_parse_lambda args body
+  | Pair(Symbol("or"), args) -> tag_parse_or args
+  | Pair(Symbol("define"), Pair(Pair(var, arglist), exprs)) -> Def(tag_parse var, tag_parse_lambda arglist exprs)
+  | Pair(Symbol("define"), Pair(name, Pair(exp, Nil))) -> tag_parse_define name exp
+  | Pair(Symbol("set!"), Pair(name, Pair(exp, Nil))) -> Set(tag_parse name, tag_parse exp)
+  | Pair(Symbol("begin"), Nil) -> Const(Void)
+  | Pair(Symbol("begin"), args) -> tag_parse_seq args
+  | Pair(Symbol("quote"), Pair(sexp, Nil)) -> Const(Sexpr(sexp))
+  | Pair(Symbol("quasiquote"), Pair(sexp, Nil)) -> tag_parse (expand_quasiquote sexp)
+  | Pair(Symbol("cond"), ribs) -> tag_parse (expand_cond ribs)
+  | Pair(Symbol("let"), Pair(vars, exprs)) -> tag_parse (expand_let vars exprs)
+  | Pair(Symbol("let*"), Pair(Nil, exprs)) -> tag_parse (expand_let Nil exprs)
+  | Pair(Symbol("let*"), Pair(Pair(first_var, rest_vars), exprs)) -> tag_parse (expand_let_star first_var rest_vars exprs)
+  | Pair(Symbol("letrec"), Pair(Nil, exprs)) -> tag_parse (expand_let Nil exprs)
+  | Pair(Symbol("letrec"), Pair(vars, exprs)) -> tag_parse (expand_letrec vars exprs)
+  | Pair(Symbol("and"), args) -> tag_parse (expand_and args)
+  | Pair(Symbol("pset!"), exprs) -> tag_parse (expand_pset exprs)
+  | Pair(exp, args) -> Applic(tag_parse exp, tag_parse_list args)
+  | _ -> raise X_syntax_error;;
+  
+
+let tag_parse_expressions sexpr = 
+  let rec tag_parse_all = function
+    | [] -> []
+    | first::rest -> (tag_parse first)::(tag_parse_all rest) in
+  tag_parse_all sexpr;;
+
+end;; (* struct Tag_Parser *)
