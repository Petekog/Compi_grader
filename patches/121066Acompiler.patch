diff --git a/reader.ml b/reader.ml
index 32445c2..f18b7d6 100644
--- a/reader.ml
+++ b/reader.ml
@@ -1,13 +1,14 @@
 
 #use "pc.ml";;
+open PC;;
 
 exception X_not_yet_implemented;;
 exception X_this_should_not_happen;;
-  
+
 type number =
   | Fraction of int * int
   | Float of float;;
-  
+
 type sexpr =
   | Bool of bool
   | Nil
@@ -33,6 +34,9 @@ module Reader: sig
   val read_sexprs : string -> sexpr list
 end
 = struct
+
+(* let read_sexprs string = parser (string_to_list string);; *)
+
 let normalize_scheme_symbol str =
   let s = string_to_list str in
   if (andmap
@@ -41,6 +45,229 @@ let normalize_scheme_symbol str =
   else Printf.sprintf "|%s|" str;;
 
 
-let read_sexprs string = raise X_not_yet_implemented;;
-  
-end;; (* struct Reader *)
+let make_paired nt_left nt_right nt =
+  let nt = caten nt_left nt in
+  let nt = pack nt (function(_, e) -> e) in
+  let nt = caten nt nt_right in
+  let nt = pack nt (function(e, _) -> e) in
+  nt;;
+
+
+let digit_nt = range '0' '9';;
+let nt_semi_colon = char ';';;
+let nt_end_of_line = char '\n';;
+let nt_end_of_file = pack nt_end_of_input (fun _ -> '\n');;
+
+
+let bool_nt =
+  let hash = char '#' in
+  let t = char_ci 't' in
+  let f = char_ci 'f' in
+  let t_f = disj t f in
+  let nt = caten hash t_f in
+  let nt = pack nt (fun (_,n)-> Bool ((lowercase_ascii n)='t')) in
+  nt;;
+
+
+(*                             Chars                        *)
+
+
+let char_perfix_nt = word "#\\";;
+
+let named_char_nt =
+  disj_list
+  [pack (word_ci "nul") (fun _ -> '\000');
+   pack (word_ci "newline") (fun _ -> '\010');
+   pack (word_ci "return") (fun _ -> '\013');
+   pack (word_ci "tab") (fun _ -> '\009');
+   pack (word_ci "page") (fun _ -> '\012');
+   pack (word_ci "space") (fun _ -> '\032')];;
+
+
+let visible_simple_char_nt = const (fun c-> c > ' ');;
+
+let char_nt =
+  let any_char = (disj named_char_nt visible_simple_char_nt) in
+  pack (caten char_perfix_nt any_char) (fun (_,c)->(c));;
+
+
+(*                             Numberssssssss                        *)
+
+let rec gcd a b =
+    if b = 0 then a else gcd b (a mod b);;
+
+let sign_nt =
+  let m = char '-' in
+  let p = char '+' in
+  disj m p;;
+
+let int_nt =
+  let num_nt = pack (plus digit_nt) (fun (str)-> ((int_of_string(list_to_string str)))) in
+  let signed = pack (caten sign_nt num_nt)
+  (fun (e,n)-> if (e = '-') then  ((-1)*n) else (n)) in
+  pack (disj num_nt signed) (fun (n)->(n)) ;;
+
+let integer_nt =
+  let not_frac_and_float = (pack (not_followed_by (not_followed_by  (plus digit_nt) (char '/')) (char '.')) (fun n->int_nt n)) in
+  pack not_frac_and_float (fun (n,e)->Fraction(n,1));;
+
+let fraction_nt =
+  let num = pack (caten int_nt (char '/')) (fun (n,_)->n) in
+  let guarded = guard (caten num int_nt) (fun (num,den)->den!=0) in
+  let divided = pack  guarded (fun (num,den)-> let divider = gcd num den in (num/divider,den/divider)) in
+  pack divided  (fun (num,den)->Fraction(num,den));;
+
+let float_nt =
+  let float_lst =  caten (plus digit_nt) (caten (char '.') (plus digit_nt)) in
+  let num = pack float_lst ((function (a,(b, c)) -> float_of_string ((list_to_string a) ^ "." ^ (list_to_string c)))) in
+  let nt_signed = pack (caten sign_nt num)
+    (function (op,num) -> if (op = '-') then (-1.0)*.(num) else num) in
+  disj nt_signed num;;
+
+let float_nt_obj =
+  pack float_nt (fun (n)->Float n)
+
+let sci_number_nt =
+  let sci_e = char_ci 'e' in
+  let int_num = pack int_nt (fun e -> (float_of_int e)) in
+  let num = disj float_nt int_num in
+  let remove_e = pack (caten (caten num sci_e) int_nt) (fun ((n,_),m)->n,m) in
+  pack remove_e (fun (num,pow)->Float (num *. (10. ** (float_of_int pow))))
+
+let number_nt =
+  pack (disj_list [sci_number_nt;fraction_nt;float_nt_obj;integer_nt]) (fun (num)->Number(num));;
+
+
+(*                             String                        *)
+
+
+let nt_string_meta_char =
+  disj_list
+  [pack (word_ci "\\\\") (fun _ -> '\092');
+  pack (word_ci "\\\"") (fun _ -> '\034');
+  pack (word_ci "\\t") (fun _ -> '\009');
+  pack (word_ci "\\f") (fun _ -> '\012');
+  pack (word_ci "\\n") (fun _ -> '\010');
+  pack (word_ci "\\r") (fun _ -> '\013');];;
+
+let nt_string_literal_char =
+  diff (diff nt_any (char '\"')) (char '\\');;
+
+let nt_string_char =
+  disj nt_string_meta_char nt_string_literal_char ;;
+
+let nt_string =
+   pack (caten (caten (char '\"') (star nt_string_char)) (char '\"'))
+  (fun ((_,chars),_)-> (list_to_string chars));;
+
+
+(*                             Symbol                        *)
+
+
+let nt_symbol_char_no_dot =
+  disj_list [char '!';  char '$';  char '^';  char '*';  char '-';  char '_';  char '=';
+  char '+'; char '<';  char '>';  char '?';  char '/';  char ':';
+  (range 'a' 'z');
+  pack (range 'A' 'Z') (fun ch -> lowercase_ascii ch);
+  (range '0' '9')];;
+
+let nt_symbol_char =
+  let nt_dot = char '.' in
+  disj nt_symbol_char_no_dot nt_dot;;
+
+let nt_symbol =
+  let symb = pack (caten nt_symbol_char (plus nt_symbol_char)) (fun(s,lst)->s::lst) in
+  let doted = pack symb (fun (chars)->list_to_string chars) in
+  let not_doted = pack (plus nt_symbol_char_no_dot) (fun (chars)->list_to_string chars) in
+  disj doted not_doted;;
+
+let char_obj =
+  pack char_nt (fun (c)->Char c);;
+
+let symbol_obj =
+  pack nt_symbol (fun(str)->Symbol(str));;
+
+let string_obj =
+  pack nt_string (fun(str)->String(str));;
+
+(*                             List                        *)
+
+let nt_whitespaces = pack (plus nt_whitespace) (fun (a)->' ');;
+
+let nt_line_comment =
+  let nt_end = disj nt_end_of_line nt_end_of_file in
+  let nt_comment = star (diff nt_any nt_end) in
+  let nt_whole_comment = (caten (caten nt_semi_colon nt_comment) nt_end) in
+  pack nt_whole_comment (fun (a)->' ');;
+
+let rec parse_sexpr str =
+  (make_paired (star comment_and_space) (star comment_and_space)
+    (disj_list
+          [
+            bool_nt;
+            number_nt;
+            char_obj;
+            string_obj;
+            symbol_obj;
+            parse_list;
+            parse_dot_list;
+            parse_quote;
+            parse_qquote;
+            parse_unquote_splice;
+            parse_unquote
+            ]
+      )) str
+
+and parse_list str =
+  (pack (caten (char '(') (caten (star parse_sexpr) (char ')')))
+  (fun (left,(lst,right))-> match lst with
+          | []-> Nil
+          | _-> (List.fold_right (fun a b -> Pair (a,b)) lst Nil))) str
+
+and parse_dot_list str =
+  let start = caten (char '(') (caten (plus parse_sexpr) (char '.')) in
+  let pend = caten parse_sexpr (char ')') in
+
+  (pack (caten start pend)
+  (fun ((l,(s,dot)),(e,r))->
+    (List.fold_right (fun a b -> Pair (a,b)) s e)
+  ))
+  str
+
+and parse_quote str =
+  (pack (caten (char '\'') parse_sexpr)
+  (fun (q,s)->Pair(Symbol("quote"),Pair(s,Nil))))
+  str
+
+and parse_qquote str =
+  (pack (caten (char '`') parse_sexpr)
+  (fun (q,s)->Pair(Symbol("quasiquote"),Pair(s,Nil))))
+  str
+
+and parse_unquote_splice str =
+  (pack (caten (word ",@") parse_sexpr)
+  (fun (q,s)->Pair(Symbol("unquote-splicing"),Pair(s,Nil))))
+  str
+
+and parse_unquote str =
+  (pack (caten (char ',') parse_sexpr)
+  (fun (q,s)->Pair(Symbol("unquote"),Pair(s,Nil))))
+  str
+
+and nt_inline_comment str =
+  let perfix = word "#;" in
+  let comment_sepr = caten perfix parse_sexpr in
+  (pack comment_sepr (fun (_) -> ' ')) str
+
+and comment_and_space str =
+     disj_list[nt_whitespaces; nt_line_comment; nt_inline_comment] str;;
+
+let parser s =
+  let (res, rest) = (plus parse_sexpr) s in
+  res;;
+
+let read_sexprs string = parser (string_to_list string);;
+(*  *)
+end;;
+
+ (* struct Reader *)
diff --git a/readme.txt b/readme.txt
index e69de29..1fe85cd 100644
--- a/readme.txt
+++ b/readme.txt
@@ -0,0 +1,11 @@
+Igor Alikin 322081241
+Hadar Cohen 311226161
+
+We assert that the work we submitted is 100% our own.
+We have not received anypart from any other student in the class,
+nor have we give parts of it for use to others.
+Nor have we used code from other sources: Courses taught previously at this university,
+courses taught at other universities, various bits of code found on the Internet, etc.
+We realize that should our code be found to contain code from other sources,
+that aformal case shall be opened against us withva’adat mishma’at,
+in pursuit of disciplinaryaction.
\ No newline at end of file
diff --git a/semantic-analyser.ml b/semantic-analyser.ml
index 8e684f0..8be810b 100644
--- a/semantic-analyser.ml
+++ b/semantic-analyser.ml
@@ -1,6 +1,6 @@
 #use "tag-parser.ml";;
 
-type var = 
+type var =
   | VarFree of string
   | VarParam of string * int
   | VarBound of string * int * int;;
@@ -28,15 +28,6 @@ let rec expr'_eq e1 e2 =
   | Var'(VarFree v1), Var'(VarFree v2) -> String.equal v1 v2
   | Var'(VarParam (v1,mn1)), Var'(VarParam (v2,mn2)) -> String.equal v1 v2 && mn1 = mn2
   | Var'(VarBound (v1,mj1,mn1)), Var'(VarBound (v2,mj2,mn2)) -> String.equal v1 v2 && mj1 = mj2  && mn1 = mn2
-  | Box'(VarFree v1), Box'(VarFree v2) -> String.equal v1 v2
-  | Box'(VarParam (v1,mn1)), Box'(VarParam (v2,mn2)) -> String.equal v1 v2 && mn1 = mn2
-  | Box'(VarBound (v1,mj1,mn1)), Box'(VarBound (v2,mj2,mn2)) -> String.equal v1 v2 && mj1 = mj2  && mn1 = mn2
-  | BoxGet'(VarFree v1), BoxGet'(VarFree v2) -> String.equal v1 v2
-  | BoxGet'(VarParam (v1,mn1)), BoxGet'(VarParam (v2,mn2)) -> String.equal v1 v2 && mn1 = mn2
-  | BoxGet'(VarBound (v1,mj1,mn1)), BoxGet'(VarBound (v2,mj2,mn2)) -> String.equal v1 v2 && mj1 = mj2  && mn1 = mn2
-  | BoxSet'(VarFree v1,e1), BoxSet'(VarFree v2, e2) -> String.equal v1 v2 && (expr'_eq e1 e2)
-  | BoxSet'(VarParam (v1,mn1), e1), BoxSet'(VarParam (v2,mn2),e2) -> String.equal v1 v2 && mn1 = mn2 && (expr'_eq e1 e2)
-  | BoxSet'(VarBound (v1,mj1,mn1),e1), BoxSet'(VarBound (v2,mj2,mn2),e2) -> String.equal v1 v2 && mj1 = mj2  && mn1 = mn2 && (expr'_eq e1 e2)
   | If'(t1, th1, el1), If'(t2, th2, el2) -> (expr'_eq t1 t2) &&
                                             (expr'_eq th1 th2) &&
                                               (expr'_eq el1 el2)
@@ -56,8 +47,9 @@ let rec expr'_eq e1 e2 =
   | ApplicTP'(e1, args1), ApplicTP'(e2, args2) ->
 	 (expr'_eq e1 e2) &&
 	   (List.for_all2 expr'_eq args1 args2)
-  | _ -> false;;	
-                      
+  | _ -> false;;
+
+
 exception X_syntax_error;;
 
 module type SEMANTICS = sig
@@ -69,17 +61,105 @@ end;;
 
 module Semantics : SEMANTICS = struct
 
-let annotate_lexical_addresses e = raise X_not_yet_implemented;;
+let get_var_of_vartag v =
+  match v with
+  | Var'(v) -> v
+  | _ -> raise X_syntax_error
+
+let rec lexical_addressing expr params bounds =
+  match expr with
+  | Const(const) -> Const'(const)
+  | Def(Var(varname), exp) -> Def'(VarFree(varname), (lexical_addressing exp params bounds))
+  | If(test, dit, dif) -> If'((lexical_addressing test params bounds), (lexical_addressing dit params bounds), (lexical_addressing dif params bounds))
+  | Set(var, exp) -> Set'((get_var_of_vartag (lexical_addressing var params bounds)), (lexical_addressing exp params bounds))
+  | Seq(expr_lst) -> Seq'((List.map (fun (expr) -> (lexical_addressing expr params bounds)) expr_lst))
+  | Or(expr_lst) -> Or'((List.map (fun (expr) -> (lexical_addressing expr params bounds)) expr_lst))
+  | Applic(expr, expr_lst) -> Applic'((lexical_addressing expr params bounds), (List.map (fun (expr)-> (lexical_addressing expr params bounds)) expr_lst))
+  | Var(varname) ->if (List.mem varname params)
+                    then Var'(VarParam(varname, (get_index varname params)))
+                    else if (List.exists (fun (str_lst) -> List.mem varname str_lst) bounds)
+                          then   (bound_var varname bounds 0)
+                          else   Var'(VarFree(varname))
+  | LambdaSimple(vars, exp) -> LambdaSimple'(vars, lexical_addressing exp vars (params::bounds))
+  | LambdaOpt(vars, opt_var, exp) -> LambdaOpt'(vars, opt_var, lexical_addressing exp (vars@[opt_var]) (params::bounds))
+  | _ -> raise X_syntax_error
+
+  and get_index varname lst =
+  match lst with
+  | [] -> raise X_syntax_error
+  | h :: t -> if varname = h then 0 else 1 + get_index varname t
+
+
+  and bound_var varname bounds idx =
+  match bounds with
+  | [] -> raise X_syntax_error
+  | h :: t -> if (List.mem varname h) then Var'(VarBound(varname, idx, (get_index varname h))) else (bound_var varname t (idx+1));;
+
+
+let rec tail_call expr tp =
+  match expr with
+  | Const'(const)-> Const'(const)
+  | If' (test, dit, dif) ->  If'( (tail_call test false) , (tail_call dit tp) , (tail_call dif tp))
+  | Seq' (expr_lst) ->  Seq' ((List.map (fun (expr)-> (tail_call expr false)) (remove_last expr_lst))@ [(tail_call (get_last expr_lst) tp)])
+  | Def' (var, expr) -> Def' (var, (tail_call expr tp))
+  | Set' (var, expr) -> Set' (var, (tail_call expr false))
+  | Or' (expr_lst)-> Or' ((List.map (fun (expr)-> (tail_call expr false)) (remove_last expr_lst))@[(tail_call (get_last expr_lst) tp)])
+  | LambdaSimple' (vars, body)-> LambdaSimple' (vars, (tail_call body true))
+  | LambdaOpt' (vars, opt_var, body)-> LambdaOpt'(vars, opt_var , (tail_call body true))
+  | Var' (varname) -> Var' (varname)
+  | Applic'(expr, expr_lst)-> if tp
+                                then ApplicTP'((tail_call expr false), (List.map (fun (expr)-> (tail_call expr false)) expr_lst ))
+                                else Applic'((tail_call expr false), (List.map (fun (expr)-> (tail_call expr false))  expr_lst))
+  |_-> raise X_syntax_error
 
-let annotate_tail_calls e = raise X_not_yet_implemented;;
+  and remove_last lst =
+    match lst with
+    | x :: [] -> []
+    | x :: tail -> [x]@(remove_last tail)
+    | _ -> raise X_syntax_error
 
-let box_set e = raise X_not_yet_implemented;;
+  and get_last lst =
+    match lst with
+    | x :: [] -> x
+    | x :: tail -> (get_last tail)
+    | _ -> raise X_syntax_error
+
+let rec box expr =
+  match expr with
+  | Const'(const)-> Const'(const)
+  | If' (test, dit, dif) ->  If'(box test, box dit, box dif)
+  | Seq' (expr_lst) ->  Seq' (List.map box expr_lst)
+  | Def' (var, expr) -> Def' (var, box expr)
+  | Set'(var, Box'(varef)) -> Set'(var, Box'(varef))
+  | Set' (var, expr) -> BoxSet'(var,box expr)
+  | Or' (expr_lst)-> Or' (List.map box expr_lst)
+  | LambdaSimple' (vars, body)-> LambdaSimple'(vars, lambda_boxing vars body)
+  | LambdaOpt' (vars, opt_var, body)-> LambdaOpt'(vars, opt_var, (lambda_boxing (vars@[opt_var]) body))
+  | Applic'(expr, expr_lst) -> Applic'(box expr, List.map box expr_lst)
+  | ApplicTP'(expr, expr_lst) -> ApplicTP'(box expr, List.map box expr_lst)
+  | Var'(VarFree(varname)) -> Var'(VarFree(varname))
+  | Var'(VarParam(varname, minor)) -> BoxGet'(VarParam(varname, minor))
+  | Var'(VarBound(varname, major, minor)) -> BoxGet'(VarBound(varname, major, minor))
+  | Box'(var) -> Box'(var)
+  | BoxGet'(var) -> BoxGet'(var)
+  | BoxSet'(var, varef) -> BoxSet'(var,box varef)
+
+  and lambda_boxing params body =
+  if params = [] then body else
+  let boxed = (List.map (fun (varname) -> Set'(VarParam(varname, get_index varname params), Box'(VarParam(varname, get_index varname params)))) params) in
+  match body with
+  | Seq'(expr_lst) -> Seq'(List.append boxed (List.map box expr_lst))
+  | expr -> Seq'(List.append boxed [box expr])
+
+let annotate_lexical_addresses e = lexical_addressing e [] [];;
+
+let annotate_tail_calls e = tail_call e false;;
+
+let box_set e = box e;;
 
 let run_semantics expr =
-  box_set
+  (* box_set  *)
     (annotate_tail_calls
-       (annotate_lexical_addresses expr));;
-  
-end;; (* struct Semantics *)
-
+      (annotate_lexical_addresses expr));;
 
+end;; (* struct Semantics *)
diff --git a/tag-parser.ml b/tag-parser.ml
index 138249e..5dd2b89 100644
--- a/tag-parser.ml
+++ b/tag-parser.ml
@@ -1,4 +1,5 @@
 #use "reader.ml";;
+open PC;;
 
 type constant =
   | Sexpr of sexpr
@@ -40,10 +41,10 @@ let rec expr_eq e1 e2 =
      (expr_eq e1 e2) &&
        (List.for_all2 expr_eq args1 args2)
   | _ -> false;;
-	
-                       
-exception X_syntax_error;;
 
+
+exception X_syntax_error;;
+exception Testing_err;;
 module type TAG_PARSER = sig
   val tag_parse_expressions : sexpr list -> expr list
 end;; (* signature TAG_PARSER *)
@@ -54,12 +55,198 @@ let reserved_word_list =
   ["and"; "begin"; "cond"; "define"; "else";
    "if"; "lambda"; "let"; "let*"; "letrec"; "or";
    "quasiquote"; "quote"; "set!"; "pset!"; "unquote";
-   "unquote-splicing"];;  
+   "unquote-splicing"];;
 
 (* work on the tag parser starts here *)
 
-let tag_parse_expressions sexpr = raise X_not_yet_implemented;;
+let rec check_vars vars =
+  match vars with
+  | Nil -> true
+  | Symbol(var) -> not (List.mem var reserved_word_list)
+  | Pair(Symbol(var) , rest) -> not (List.mem var reserved_word_list) && check_unique_var var rest  && check_vars rest
+  | _ -> raise X_syntax_error
+
+and check_unique_var var vars =
+  match vars with
+  | Nil -> true
+  | Symbol(toCheck) -> not (String.equal var toCheck)
+  | Pair(Symbol(toCheck) , rest) -> if String.equal var toCheck then false else check_unique_var var rest
+  | _ -> raise X_syntax_error
+
+let rec get_last_var vars =
+  match vars with
+  | Pair(var, Nil) -> Nil
+  | Pair(var, Pair(var1, var2)) -> (get_last_var (Pair(var1, var2)))
+  | Pair(var, var1) -> var1
+  | _ -> raise X_syntax_error
+
+let rec get_let_vars rib ribs =
+  match rib, ribs with
+  | Pair(Symbol(symbol), expr), Nil -> Pair(Symbol(symbol), Nil)
+  | Pair(Symbol(symbol), expr), Pair(rib, ribs) -> Pair(Symbol(symbol), (get_let_vars rib ribs))
+  | _ -> raise X_syntax_error
+
+let rec get_let_sexprs rib ribs =
+  match rib, ribs with
+  | Pair(Symbol(symbol), Pair(expr, Nil)), Nil -> [expr]
+  | Pair(Symbol(symbol), Pair(expr, Nil)), Pair(rib, rest) -> [expr] @ (get_let_sexprs rib rest)
+  | _ -> raise X_syntax_error
+
+let rec get_lambda_vars vars =
+  match vars with
+  | Pair(Symbol(var), Nil) -> [var]
+  | Pair(Symbol(var), rest) -> [var] @ (get_lambda_vars rest)
+  | _ -> raise X_syntax_error
+
+let rec get_optional_lambda_vars vars =
+  match vars with
+  | Pair(Symbol(var), Pair(var1, var2)) -> [var] @  (get_optional_lambda_vars (Pair(var1, var2)))
+  | Pair(Symbol(var), optional) -> [var]
+  | _ -> raise X_syntax_error
+
+let rec letrec_vars rib ribs =
+  match rib, ribs with
+  | Pair(Symbol(symbol), _), Nil -> Pair(Pair(Symbol(symbol), Pair(Pair(Symbol("quote"), Pair(Symbol("whatever"), Nil)), Nil)), Nil)
+  | Pair(Symbol(symbol), _), Pair(rib, ribs) -> Pair(Pair(Symbol(symbol), Pair(Pair(Symbol("quote"), Pair(Symbol("whatever"), Nil)), Nil)), (letrec_vars rib ribs))
+  | _-> raise X_syntax_error
+
+let rec letrec_body rib ribs body =
+  match rib, ribs with
+  | Pair(Symbol(symbol), expr), Nil -> Pair(Pair(Symbol("set!"), Pair(Symbol(symbol), expr)) ,Pair(Pair(Symbol("let"), Pair(Nil, body)),Nil))
+  | Pair(Symbol(symbol), expr), Pair(rib, ribs) -> Pair(Pair(Symbol("set!"), Pair(Symbol(symbol), expr)), (letrec_body rib ribs body))
+  | _ -> raise X_syntax_error
+
+let rec tag_parse_sexpr sexpr =
+  match sexpr with
+  | Nil -> Const(Void)
+  | Bool(bool) -> Const(Sexpr(sexpr))
+  | Number(num) -> Const(Sexpr(sexpr))
+  | Char(char) -> Const(Sexpr(sexpr))
+  | String(str) -> Const(Sexpr(sexpr))
+  | Symbol(symbol) -> if List.mem symbol reserved_word_list then raise X_syntax_error else Var(symbol)
+  | Pair(Symbol("quote"), Pair(var, Nil)) -> Const(Sexpr(var))
+  | Pair(Symbol("if"), Pair(test, Pair(dit, Nil))) -> If(tag_parse_sexpr test, tag_parse_sexpr dit, Const(Void))
+  | Pair(Symbol("if"), Pair(test, Pair(dit, Pair(dif, Nil)))) -> If(tag_parse_sexpr test, tag_parse_sexpr dit, tag_parse_sexpr dif)
+  | Pair(Symbol("lambda"), Pair(vars, body)) -> tag_lambda vars body
+  | Pair(Symbol("or"), Nil) -> Const(Sexpr(Bool (false)))
+  | Pair(Symbol("or"), Pair(expr, Nil)) -> tag_parse_sexpr expr
+  | Pair(Symbol("or"), vars) -> Or(tag_or vars)
+  | Pair(Symbol("define"), Pair(Symbol(name), Pair(expr, Nil))) -> Def(Var(name), tag_parse_sexpr expr)
+  | Pair(Symbol("define"), Pair(Pair(Symbol(name), argl), expr)) -> tag_parse_sexpr (Pair(Symbol("define"), Pair(Symbol(name), Pair(Pair(Symbol("lambda"), Pair(argl, expr)), Nil))))
+  | Pair(Symbol("set!"), Pair(Symbol(var), Pair(expr, Nil))) -> Set(Var(var), tag_parse_sexpr expr)
+  | Pair(Symbol("pset!"), Pair(rib, ribs)) -> tag_parse_sexpr (tag_pset rib ribs)
+  | Pair(Symbol("begin"), Nil) -> Const(Void)
+  | Pair(Symbol("begin"), Pair(a, Nil)) -> tag_parse_sexpr a
+  | Pair(Symbol("begin"), Pair(exprs, rest)) -> Seq(tag_begin exprs rest)
+  | Pair(Symbol("quasiquote"), Pair(sexpr, Nil)) -> tag_parse_sexpr (tag_qquote sexpr)
+  | Pair(Symbol("cond"), ribs) -> tag_parse_sexpr (tag_cond ribs)
+  | Pair(Symbol("let"), Pair(Nil, body)) -> Applic(tag_parse_sexpr (Pair(Symbol("lambda"), Pair(Nil, body))), [])
+  | Pair(Symbol("let"), Pair(Pair(rib, ribs), body)) -> (tag_let rib ribs body)
+  | Pair(Symbol("let*"), Pair(bindings, body)) -> tag_parse_sexpr (tag_let_star bindings body)
+  | Pair(Symbol("letrec"), Pair(Nil, body)) -> tag_parse_sexpr (Pair (Symbol "let",Pair (Nil,Pair(Pair (Symbol "let",Pair (Nil,body)),Nil))))
+  | Pair(Symbol("letrec"), Pair(Pair(rib , ribs) , body)) -> tag_parse_sexpr (tag_letrec rib ribs body)
+  | Pair(Symbol("and"), expr) -> tag_and expr
+  | Pair(op, vars) -> Applic(tag_parse_sexpr op, tag_applic vars)
+
+  and tag_letrec rib ribs body =
+    Pair(Symbol("let"), Pair((letrec_vars rib ribs), (letrec_body rib ribs body)))
+
+  and tag_let rib ribs body =
+    Applic((tag_parse_sexpr (Pair(Symbol("lambda"), Pair(get_let_vars rib ribs, body)))),
+      (List.map tag_parse_sexpr (get_let_sexprs rib ribs)))
+
+  and tag_applic sexpr =
+    match sexpr with
+    | Pair(a, Nil) -> [tag_parse_sexpr a]
+    | Pair(a, b) -> [tag_parse_sexpr a] @ (tag_applic b)
+    | Nil -> []
+    | _ -> raise X_syntax_error
+
+  and tag_qquote sexpr =
+    match sexpr with
+    | Nil -> Pair(Symbol("quote"), Pair(Nil, Nil))
+    | Pair(Symbol("unquote"), Pair(x, Nil))-> x
+    | Pair(Symbol("unqute-splicing"), Pair(x, Nil))-> raise X_syntax_error
+    | Symbol(x) -> Pair(Symbol("quote"), Pair(Symbol(x), Nil))
+    | Pair(Pair(Symbol("unquote-splicing"), Pair(a, Nil)), b) -> Pair(Symbol("append"), Pair(a, Pair(tag_qquote b, Nil)))
+    | Pair(a, Pair(Symbol("unquote-splicing"), Pair(b, Nil))) -> Pair(Symbol("cons"), Pair(tag_qquote a, Pair(b, Nil)))
+    | Pair(a,b) -> (Pair(Symbol("cons"), Pair((tag_qquote a), Pair(tag_qquote b, Nil))))
+    | _ -> raise X_syntax_error
+
+  and tag_lambda vars body =
+    if check_vars vars then (
+    let body_expr = (tag_parse_sexpr (Pair(Symbol("begin"), body))) in
+      match vars with
+      | Nil -> LambdaSimple([], body_expr)
+      | Symbol(optional) -> LambdaOpt([], optional, body_expr)
+      | Pair(var, rest) -> (let last_var = get_last_var vars in
+        match last_var with
+        | Nil -> LambdaSimple(get_lambda_vars vars, body_expr)
+        | Symbol(optional) -> LambdaOpt(get_optional_lambda_vars vars, optional, body_expr)
+        | _ -> raise X_syntax_error)
+      |_ -> raise X_syntax_error
+    )
+    else raise X_syntax_error
+
+  and tag_let_star binds body =
+    match binds with
+    | Nil -> Pair(Symbol("let"), Pair(Nil, body))
+    | Pair(bind, Nil) ->  Pair(Symbol("let"), Pair(Pair(bind, Nil), body))
+    | Pair(bind, binds) ->  Pair(Symbol("let"), Pair(Pair(bind, Nil), Pair(tag_let_star binds body, Nil)))
+    | _ -> raise X_syntax_error
+
+  and tag_or sexpr =
+    match sexpr with
+    | Pair(sexpr, Nil) -> [tag_parse_sexpr sexpr]
+    | Pair(sexpr, rest) -> [tag_parse_sexpr sexpr] @ (tag_or rest)
+    | _ -> raise X_syntax_error
+
+  and tag_begin sexpr rest =
+    match rest with
+    | Nil -> [tag_parse_sexpr sexpr]
+    | Pair(expr, rest) -> [tag_parse_sexpr sexpr] @ (tag_begin expr rest)
+    | _ -> raise X_syntax_error
+
+  and tag_and expr =
+    match expr with
+    | Nil -> Const(Sexpr(Bool(true)))
+    | Pair(expr, Nil) -> tag_parse_sexpr expr
+    | Pair(expr, rest) -> If(tag_parse_sexpr expr, tag_parse_sexpr (Pair(Symbol("and"), rest)), Const(Sexpr(Bool(false))))
+    | _ -> raise X_syntax_error
+
+  and tag_cond ribs =
+    match ribs with
+    | Nil -> Nil
+    | Pair(Pair(Symbol("else"), dit), rest) -> Pair(Symbol("begin"), dit)
+    | Pair(Pair(test, Pair(Symbol("=>"), dit)), Nil) -> Pair(Symbol("let"),
+                                                        Pair(Pair(Pair(Symbol("value"), Pair(test, Nil)),
+                                                        Pair(Pair(Symbol("f"), Pair(Pair(Symbol("lambda"), Pair(Nil, dit)), Nil)), Nil)),
+                                                        Pair(Pair(Symbol("if"), Pair(Symbol("value"), Pair(Pair(Pair(Symbol("f"), Nil), Pair(Symbol("value"), Nil)), Nil))), Nil)))
+
+    | Pair(Pair(test, Pair(Symbol("=>"), dit)), rest) ->  Pair(Symbol("let"),
+                                                          Pair(Pair(Pair(Symbol("value"), Pair(test, Nil)),
+                                                          Pair(Pair(Symbol("f"), Pair(Pair(Symbol("lambda"), Pair(Nil, dit)), Nil)),
+                                                          Pair(Pair(Symbol("rest"), Pair(Pair(Symbol("lambda"), Pair(Nil, Pair(tag_cond rest, Nil))), Nil)), Nil))),
+                                                          Pair(Pair(Symbol("if"), Pair(Symbol("value"), Pair(Pair(Pair(Symbol("f"), Nil), Pair(Symbol("value"), Nil)), Pair(Pair(Symbol("rest"), Nil), Nil)))), Nil)))
+
+    | Pair(Pair(test, dit), rest) -> Pair(Symbol("if"), Pair(test, Pair(Pair(Symbol("begin"), dit), Pair(tag_cond rest, Nil))))
+    | _ -> raise X_syntax_error
+
+  and tag_pset rib ribs =
+    Pair(Symbol "let", Pair((pset_lets rib ribs 0),(pset_to_set rib ribs 0)))
+
+  and pset_lets rib ribs count =
+    match rib, ribs with
+    | Pair(Symbol(symbol), expr), Nil -> Pair(Pair(Symbol("tmp" ^ string_of_int count), expr), Nil)
+    | Pair(Symbol(symbol), expr), Pair(rib, rest) ->  Pair(Pair(Symbol("tmp" ^ string_of_int count), expr), (pset_lets rib rest (count+1)))
+    | _ -> raise X_syntax_error
+
+  and pset_to_set rib ribs count =
+    match rib, ribs with
+    | Pair(Symbol(symbol), expr), Nil -> Pair(Pair(Symbol("set!"), Pair(Symbol(symbol), Pair(Symbol("tmp" ^ string_of_int count), Nil))),Nil)
+    | Pair(Symbol(symbol), expr), Pair(rib, rest) ->  Pair(Pair(Symbol("set!"), Pair(Symbol(symbol), Pair(Symbol("tmp" ^ string_of_int count), Nil))), (pset_to_set rib rest (count+1)))
+    | _ -> raise X_syntax_error
 
-  
-end;; (* struct Tag_Parser *)
+let tag_parse_expressions sexpr = List.map tag_parse_sexpr sexpr;;
 
+end;; (* struct Tag_Parser *)
\ No newline at end of file
