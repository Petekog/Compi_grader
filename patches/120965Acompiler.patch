diff --git a/reader.ml b/reader.ml
index 32445c2..ac9d743 100644
--- a/reader.ml
+++ b/reader.ml
@@ -40,7 +40,292 @@ let normalize_scheme_symbol str =
 	s) then str
   else Printf.sprintf "|%s|" str;;
 
+(* CODE BEGGINING *)
 
-let read_sexprs string = raise X_not_yet_implemented;;
+(******** TOKENS **********************)
+
+let digit = PC.range '0' '9';;
+
+let digit_seq = PC.plus digit;;
+
+let letters = PC.pack (PC.range_ci 'a' 'z') (fun ch -> lowercase_ascii ch);;
+
+let every_char = PC.range ' ' '~';;
+
+let nt_chars_not_string_literal = PC.const (fun c -> c = '\\' || c = '"');;
+
+let nt_whitespaces = PC.star (PC.nt_whitespace);;
+
+let make_paired nt_left nt_right nt =
+  let nt = PC.caten nt_left nt in
+  let nt = PC.pack nt(function(_, e) -> e) in
+  let nt = PC.caten nt nt_right in
+  let nt = PC.pack nt(function(e, _) -> e) in
+  nt;;
+
+let make_spaced nt = make_paired nt_whitespaces nt_whitespaces nt;;
+
+let nt_dot = PC.char '.';;
+  
+let tok_lparen = PC.char '(';;
+
+let tok_rparen = PC.char ')';;
+  
+let tok_addop = PC.char '+';;  (* this is not make_spaced because it is will accept + 5 like a number which it is a procedure in scheme *)
+
+let tok_mulop = make_spaced (PC.char '*');;
+
+let tok_divideop = PC.char '/';;
+
+let tok_expop = make_spaced (PC.char '^');;
+
+let tok_exclmark = make_spaced (PC.char '!');;
+
+let tok_questionmark = make_spaced (PC.char '?');;
+
+let tok_dollar = make_spaced (PC.char '$');;
+  
+let tok_minus = PC.char '-';;
+  
+let tok_under_line = make_spaced (PC.char '_');;
+
+let tok_equal = make_spaced (PC.char '=');;
+  
+let tok_errow_right = make_spaced (PC.char '>');;
+
+let tok_errow_left = make_spaced (PC.char '<');;
+
+let tok_colon = make_spaced (PC.char ':');;
+
+(******** METACHARS ***********)
+let meta_doublequote = PC.pack (PC.word "\\\"") (fun (ch_list) -> '\"');;
+
+let meta_backslash = PC.pack (PC.word "\\\\") (fun (ch_list) -> '\\');;
+  
+let meta_tab = PC.pack (PC.word_ci "\\t") (fun (ch_list) -> '\t');;
+
+let meta_page = PC.pack (PC.word_ci "\\f") (fun (ch_list) -> '\012');;
+
+let meta_newline = PC.pack (PC.word_ci "\\n") (fun (ch_list) -> '\n');;
+  
+let meta_return = PC.pack (PC.word_ci "\\r") (fun (ch_list) -> '\r');;
+
+(******** NAMED CHARS ***************)
+
+let nt_nul = PC.word_ci "nul" ;;
+
+let nt_newline = PC.word_ci "newline" ;;
+
+let nt_return = PC.word_ci "return" ;;
+
+let nt_tab = PC.word_ci "tab" ;;
+
+let nt_page = PC.word_ci "page" ;;
+
+let nt_space = PC.word_ci "space" ;;
+
+
+(******** CHAR **********************)
+
+let nt_char_prefix = PC.word "#\\";;
+
+let nt_visible_simple_char = PC.const (fun ch -> ch > ' ');;
+
+let nt_named_char = PC.pack (PC.disj_list [nt_newline; nt_nul; nt_page; nt_return; nt_space; nt_tab])
+  (fun ch_list -> 
+    let lowercase_ch_list = List.map (fun ch -> lowercase_ascii ch) ch_list in
+     match lowercase_ch_list with
+      | ['n'; 'e'; 'w'; 'l'; 'i'; 'n'; 'e'] -> '\010'
+      | ['n'; 'u'; 'l'] -> '\000'
+      | ['p'; 'a'; 'g'; 'e'] -> '\012'
+      | ['r'; 'e'; 't'; 'u'; 'r'; 'n'] -> '\013'
+      | ['s'; 'p'; 'a'; 'c'; 'e'] -> '\032'
+      | ['t'; 'a'; 'b'] -> '\009'
+      | _ -> raise PC.X_no_match);;
+
+let nt_char = PC.pack (PC.caten nt_char_prefix (PC.disj nt_named_char nt_visible_simple_char))
+  (fun (prefix, ch_list) -> Char (ch_list));; 
+
+(******** SYMBOL **********************)
+
+let symbol_char_no_dot_list = [digit; letters; tok_exclmark; tok_dollar; tok_expop; 
+    tok_mulop; tok_minus; tok_under_line; tok_equal; tok_addop; tok_errow_right; tok_errow_left; tok_questionmark;
+    tok_divideop; tok_colon];;
+
+let nt_symbol_char_no_dot = PC.disj_list symbol_char_no_dot_list ;;
+
+let nt_symbol_char = PC.disj nt_symbol_char_no_dot nt_dot ;;
+
+let nt_symbol = 
+  let sym_no_dot = PC.pack nt_symbol_char_no_dot (fun e -> [e]) in
+  let chain_sym_char = PC.pack (PC.caten nt_symbol_char (PC.plus nt_symbol_char)) (fun (e, es) -> (e :: es)) in
+  let union = PC.disj chain_sym_char sym_no_dot in
+  PC.pack union (fun sym_list -> Symbol (list_to_string sym_list));;
+
+
+(******** STRING **********************)
+
+let make_doublequoted nt = make_paired (PC.char '\"') (PC.char '\"') nt;;
+
+let metachar_list = [meta_backslash; meta_tab; meta_page; meta_newline; meta_return; meta_doublequote] ;;
+
+let nt_string_meta_char = PC.disj_list metachar_list ;; 
+
+let nt_string_literal_char = PC.const (fun c -> c != '\\' && c != '"');;
+
+let nt_string_char = PC.disj nt_string_literal_char nt_string_meta_char;;
+
+let nt_string = PC.pack (make_doublequoted (PC.star nt_string_char))
+  (fun (ch_list) -> String (list_to_string ch_list));;
+
+
+(******** BOOLEAN **********************)
+let nt_boolean = PC.pack (PC.disj (PC.word_ci "#t") (PC.word_ci "#f"))
+  (fun e -> match e with
+    | ['#'; 't'] -> Bool true
+    | ['#'; 'T'] -> Bool true
+    | ['#'; 'f'] -> Bool false
+    | ['#'; 'F'] -> Bool false
+    | _ -> raise PC.X_no_match);;
+    
+(******** NUMBER **********************)
+
+let rec gcd m n =
+  if n = 0 then m else gcd n (m mod n);;
+
+let tok_zero = PC.char '0';;
+let zero_seq = PC.star tok_zero;;
+
+let nt_natural = PC.pack digit_seq
+    (fun ds ->
+      List.fold_left
+          (fun a b -> 10 * a + b)
+          0
+          (List.map (fun c -> (int_of_char c) - 48) ds));;
+
+let nt_mantissa = PC.pack digit_seq
+    (fun ds ->
+      List.fold_right
+          (fun a b -> (a+.b)/.10.0)
+          (List.map (fun c -> (ceil ((float_of_int (int_of_char c)) -. 48.0))) ds)
+          0.0);;
+
+let nt_integer_sign = PC.maybe (PC.disj tok_minus tok_addop);;
+
+let check_sign_for_integer op = match op with
+  | None -> 1
+  | Some(c) -> match c with 
+    | '-' -> -1
+    | '+' -> 1
+    | _ -> raise PC.X_no_match;;
+
+let nt_integer = PC.pack (PC.caten nt_integer_sign nt_natural) 
+  (fun (op , c) ->
+    let sign = (check_sign_for_integer op) in
+    Fraction (c, sign*1));;
+                          
+let nt_float =
+  PC.pack (PC.caten (PC.caten nt_integer nt_dot) nt_mantissa) 
+    (fun ((num, dot), mantissa) -> match num with
+        | Fraction(a ,b) -> 
+            if (b < 0) 
+            then Float((float_of_int (-1*a)) -. mantissa)
+            else Float((float_of_int a) +. mantissa)
+        | _ -> raise PC.X_no_match);;
+
+
+let nt_fraction = 
+  let nt_numerator = PC.pack nt_integer 
+    (fun f -> match f with 
+      | Fraction(a, b) -> a
+      | Float(a) -> 1) in
+        PC.pack (PC.caten (PC.caten nt_numerator tok_divideop) nt_natural) 
+          (fun ((numerator, div), denominator) -> 
+            let res_gcd = (gcd (abs numerator) denominator) in
+            Number(Fraction (numerator/res_gcd, denominator/res_gcd)));;
+            
+
+let nt_scientific = 
+  let float_or_integer = PC.disj nt_float nt_integer in
+  let maybe_e = PC.maybe (PC.caten (PC.char_ci 'e') nt_integer) in
+  PC.pack (PC.caten float_or_integer maybe_e) 
+    (fun (num, after_e)-> match (num, after_e) with 
+      | (Float(num),None) -> Number(Float(num)) 
+      | (Float(num),Some((e,Fraction(exp,one)))) -> Number(Float(num *.(10.0**(float_of_int exp))))
+      | (Fraction(a,b), None) -> Number(num)
+      | (Fraction(a,b),Some((e,Fraction(exp,one)))) -> Number(Float((float_of_int a) *.(10.0**(float_of_int exp))))
+      | _ -> raise PC.X_no_match);;
+
+let nt_not_digit = PC.diff nt_symbol_char digit;;
+
+let nt_number = PC.not_followed_by (PC.disj nt_fraction nt_scientific) nt_not_digit ;;
+
+(******** SEXPR recursive ****************)
+
+let rec nt_sexpr s =
+  let nts = PC.disj_list [nt_number; nt_boolean; nt_char; nt_string; nt_symbol; nt_list; nt_dotted_list;
+      nt_quoted; nt_quasi_quoted; nt_unquoted; nt_unquote_and_spliced] in
+  let nt_exprs = make_paired (PC.star nt_comments) (PC.star nt_comments) nts in
+  nt_exprs s 
+
+  and nt_line_comment s = 
+    let end_comment = PC.disj (PC.pack (PC.char '\n') (fun ch -> [ch])) PC.nt_end_of_input in 
+    let packed = PC.pack (PC.caten (PC.caten (PC.char ';') (PC.star (PC.diff PC.nt_any end_comment))) end_comment)
+      (fun _ -> []) in
+    packed s
+  
+  and nt_sexpr_comment s = 
+    let pre = make_spaced (PC.word "#;") in
+    let packed = PC.pack (PC.caten pre nt_sexpr) (fun (pre, rest) -> []) in
+    packed s
+
+  and nt_comments s = 
+    let disj_comments = PC.disj_list [nt_line_comment; nt_sexpr_comment; PC.pack PC.nt_whitespace (fun _ -> [])] in
+    let packed = PC.pack disj_comments (fun _ -> []) in
+    packed s
+    
+  and nt_list s =
+    let left_paren = make_paired (PC.star nt_comments) (PC.star nt_comments) tok_lparen in
+    let right_paren = make_paired (PC.star nt_comments) (PC.star nt_comments) tok_rparen in
+    PC.pack (make_paired left_paren right_paren (PC.star nt_sexpr))
+      (fun sexp_l -> List.fold_right (fun a b -> Pair(a,b)) sexp_l Nil) s
+  
+  (* and nt_dotted_list s =
+    let inside = PC.caten (PC.caten (PC.plus nt_sexpr) nt_dot) nt_sexpr in
+    let packed = PC.pack (make_paired tok_lparen tok_rparen inside)
+      (fun ((sexp_list, dot), last_exp) -> List.fold_right (fun a b -> Pair(a,b)) sexp_list last_exp) in
+    packed s *)
+
+  and nt_dotted_list s =
+    let left_paren = make_paired (PC.star nt_comments) (PC.star nt_comments) tok_lparen in
+    let right_paren = make_paired (PC.star nt_comments) (PC.star nt_comments) tok_rparen in
+    let inside = PC.caten (PC.caten (PC.plus nt_sexpr) nt_dot) nt_sexpr in
+    let packed = PC.pack (make_paired left_paren right_paren inside)
+      (fun ((sexp_list, dot), last_exp) -> List.fold_right (fun a b -> Pair(a,b)) sexp_list last_exp) in
+    packed s
+    
+  and nt_quoted s = 
+    let nt = PC.caten (make_spaced (PC.word "'")) nt_sexpr in
+    let packed = PC.pack nt (fun (quote, exp) -> Pair(Symbol("quote"), Pair(exp, Nil))) in
+    packed s
+
+  and nt_quasi_quoted s = 
+    let nt = PC.caten (make_spaced (PC.char '`')) nt_sexpr in
+    let packed = PC.pack nt (fun (quote, exp) -> Pair(Symbol("quasiquote"), Pair(exp, Nil))) in
+    packed s
+
+  and nt_unquoted s = 
+    let nt = PC.caten (make_spaced (PC.char ',')) nt_sexpr in
+    let packed = PC.pack nt (fun (quote, exp) -> Pair(Symbol("unquote"), Pair(exp, Nil))) in
+    packed s
+
+  and nt_unquote_and_spliced s = 
+    let nt = PC.caten (make_spaced (PC.word ",@")) nt_sexpr in
+    let packed = PC.pack nt (fun (quote, exp) -> Pair(Symbol("unquote-splicing"), Pair(exp, Nil))) in
+    packed s;;
+
+let read_sexprs string =
+  let (parsed, rest) = (PC.star nt_sexpr) (string_to_list string) in
+  parsed;;
   
 end;; (* struct Reader *)
diff --git a/readme.txt b/readme.txt
index e69de29..beb9cac 100644
--- a/readme.txt
+++ b/readme.txt
@@ -0,0 +1,4 @@
+Talia Katz 206103673
+Naama Magami 315027185
+
+We assert that the work we submitted is 100% our own. We have not received anypart from any other student in the class, nor have we give parts of it for use to others.Nor have we used code from other sources: Courses taught previously at this university,courses taught at other universities, various bits of code found on the Internet, etc.We realize that should our code be found to contain code from other sources, that aformal case shall be opened against us withva’adat mishma’at, in pursuit of disciplinaryaction.
diff --git a/semantic-analyser.ml b/semantic-analyser.ml
index 8e684f0..9e44783 100644
--- a/semantic-analyser.ml
+++ b/semantic-analyser.ml
@@ -60,6 +60,8 @@ let rec expr'_eq e1 e2 =
                       
 exception X_syntax_error;;
 
+
+
 module type SEMANTICS = sig
   val run_semantics : expr -> expr'
   val annotate_lexical_addresses : expr -> expr'
@@ -69,11 +71,230 @@ end;;
 
 module Semantics : SEMANTICS = struct
 
-let annotate_lexical_addresses e = raise X_not_yet_implemented;;
+(* START_OUR_CODE *) (* TODO move under the module like in tag-parser, 
+                          above the built-in funcs *)
+
+let extract_var var = match var with
+  | Var'(v) -> v
+  | _ -> raise X_syntax_error;;
+      
+let rec lexical_addresses_rec e env =
+  match e with
+  | Const(c) -> Const'(c)
+  | Var(x) -> find_var x env (-1)   
+  | If(test, dit, dif) -> 
+      If'(lexical_addresses_rec test env, lexical_addresses_rec dit env, lexical_addresses_rec dif env)
+  | Seq(seq_list) -> Seq'(List.map (fun exp -> lexical_addresses_rec exp env) seq_list)
+  | Set(var, exp) -> Set'(extract_var (lexical_addresses_rec var env), lexical_addresses_rec exp env)
+  | Def(var, exp) -> Def'(extract_var (lexical_addresses_rec var env), lexical_addresses_rec exp env)
+  | Or(or_list) -> Or'(List.map (fun exp -> lexical_addresses_rec exp env) or_list)
+  | LambdaSimple(params, body) -> 
+      LambdaSimple'(params, lexical_addresses_rec body (params :: env))
+  | LambdaOpt(params_list, params_opt, body) ->
+      LambdaOpt'(params_list, params_opt, lexical_addresses_rec body ((params_list @ [params_opt]) :: env))
+  | Applic(exp, exps_list) -> 
+      Applic'(lexical_addresses_rec exp env, 
+              List.map (fun exp -> lexical_addresses_rec exp env) exps_list) 
+    
+and find_var x env mj = 
+  match env with 
+  | [] -> Var'(VarFree(x))
+  | (l :: ls) -> 
+    if(List.mem x l) 
+    then (if (mj = -1)
+          then Var'(VarParam(x, find_index x l 0))
+          else Var'(VarBound(x, mj, find_index x l 0)))
+    else find_var x ls (mj+1)
+  
+and find_index x l counter = match l with
+  | [] -> raise X_syntax_error
+  | (s :: rest) -> if (s = x) then counter else (find_index x rest (counter+1));;
+
+let rec tail_calls_rec e is_tp =
+  match e with
+  | Const'(c) -> Const'(c)
+  | Var'(v) -> Var'(v)
+  | Box'(v) -> e
+  | BoxGet'(v) -> e
+  | BoxSet'(v, exp) -> BoxSet'(v, tail_calls_rec exp false)
+  | If'(test, dit, dif) -> If'(tail_calls_rec test false, tail_calls_rec dit is_tp, tail_calls_rec dif is_tp) (* If an if-exp is in tp,-> dit & dif in tp, else -> dit & dif is not in tp *)
+  | Seq'(seq_lst) -> Seq'(handle_seq seq_lst is_tp) 
+  | Set'(var, exp) -> Set'(var, tail_calls_rec exp false) (*The exp in Set-exp will never be in tp*)
+  | Def'(var, exp) -> Def'(var, tail_calls_rec exp false)
+  | Or'(or_lst) -> Or'(handle_seq or_lst is_tp) 
+  | LambdaSimple'(params,body) -> LambdaSimple'(params, tail_calls_rec body true) (* Rec-call to the body of the Lambda-exp *)
+  | LambdaOpt'(params_list, params_opt, body) -> LambdaOpt'(params_list,params_opt, tail_calls_rec body true) (* Rec-call to the body of the Lambda-exp *)
+  | Applic'(exp, exps_list) -> (match is_tp with (* The body of applic will never be in tp. If Applic is in tp -> the applic is ApplicTP, else-> the applic is Applic' *)
+    | true -> ApplicTP'(tail_calls_rec exp false, (List.map (fun e -> tail_calls_rec e false) exps_list))
+    | false -> Applic'(tail_calls_rec exp false, (List.map (fun e -> tail_calls_rec e false) exps_list)))
+  | ApplicTP'(op, exps_list) -> e
+
+and handle_seq exp_lst is_tp =
+  match exp_lst with
+  | [] -> raise X_syntax_error
+  | lst -> let rev_list = List.rev lst in
+    match rev_list with
+      | [] -> []
+      | last_exp :: rest_exps -> 
+        (List.map (fun e -> tail_calls_rec e false) (List.rev rest_exps)) @ [tail_calls_rec last_exp is_tp];; (* If a Seq-exp is in tp -> only the last exp is in tp, else -> non of the exps is in tp *)
+  
+(* BOX *)
+
+let counter = ref 0;;
+
+let add_and_return_counter counter = 
+  counter := !counter + 1;;
+
+let reset_counter counter =
+  counter := !counter - !counter;;
+
+let rec box_rec e =
+  match e with
+  | Const'(c) -> e
+  | Var'(v) -> e
+  | Box'(v) -> e
+  | BoxGet'(v) -> e
+  | BoxSet'(v, exp) -> BoxSet'(v, box_rec exp)
+  | If'(test, dit, dif) -> If'(box_rec test, box_rec dit, box_rec dif)
+  | Seq'(seq_lst) -> Seq'(List.map (fun exp -> box_rec exp) seq_lst)
+  | Set'(var, exp) -> Set'(var, box_rec exp)
+  | Def'(var, exp) -> Def'(var, box_rec exp)
+  | Or'(or_lst) -> Or'(List.map (fun exp -> box_rec exp) or_lst) 
+  | LambdaSimple'(params,body) -> LambdaSimple'(params, box_lambda params (box_rec body))
+  | LambdaOpt'(params_list, params_opt, body) -> LambdaOpt'(params_list, params_opt, box_lambda (params_list @ [params_opt]) (box_rec body)) 
+  | Applic'(op, exps_list) -> Applic'(box_rec op, List.map (fun exp -> box_rec exp) exps_list)
+  | ApplicTP'(op, exps_list) -> ApplicTP'(box_rec op, List.map (fun exp -> box_rec exp) exps_list)
+
+and box_lambda params body = 
+  let var_params_list = make_var_params_list params 0 in
+  List.fold_right check_if_add_box var_params_list body (*check for each var of the parameter list*)
+
+and make_var_params_list string_list ind =
+  match string_list with
+  | [] -> [] 
+  | (param :: rest) -> VarParam(param, ind) :: make_var_params_list rest (ind+1)
+
+and check_if_add_box var_param body =  
+  reset_counter counter ; 
+  match var_param with
+  | VarParam(x, minor) -> if (check_box_var x body)
+    then add_box_to_lambda_seq x var_param body
+    else body
+  | _ -> raise X_syntax_error
+
+and check_box_var x body =
+  let rw_list = make_rw_list x body [] "y" in 
+  match body with 
+  | Seq'(seq_lst) -> check_conditions_seq rw_list
+  | _ -> check_conditions rw_list
+
+and make_rw_list x body rw_list is_atomic_occurence =
+  match body with 
+  | Var'(v) -> if (check_occure_in_var v x) then (if (rw_list = []) then [["0"; "r"; is_atomic_occurence]] else [rw_list @ ["r"; is_atomic_occurence]]) else []
+  | BoxSet'(v, exp) -> make_rw_list x exp rw_list "n"
+  | If'(test, dit, dif) -> List.append (List.append (make_rw_list x test rw_list "n") (make_rw_list x dif rw_list "n")) (make_rw_list x dit rw_list "n")
+  | Seq'(seq_lst) -> List.concat (List.map (fun e -> make_rw_list x e rw_list is_atomic_occurence) seq_lst)
+  | Def'(var, exp) -> (if (check_occure_in_var var x) then (if (rw_list = []) then [["0"; "w"; is_atomic_occurence]] else [rw_list @ ["w"; is_atomic_occurence]]) else []) @ make_rw_list x exp rw_list "n"
+  | Set'(var, exp) -> (if (check_occure_in_var var x) then (if (rw_list = []) then [["0"; "w"; is_atomic_occurence]] else [rw_list @ ["w"; is_atomic_occurence]]) else []) @ make_rw_list x exp rw_list "n"
+  | Or'(or_lst) -> List.concat (List.map (fun e -> make_rw_list x e rw_list "n") or_lst)
+  | LambdaSimple'(params, _body) -> handle_lambda_rw x params _body rw_list
+  | LambdaOpt'(params_list, params_opt, _body) -> handle_lambda_rw x (params_opt::params_list) _body rw_list
+  | Applic'(op, exps_list) -> make_rw_list x op rw_list "n" @ List.concat (List.map (fun e -> make_rw_list x e rw_list "n") exps_list)
+  | ApplicTP'(op, exps_list) -> make_rw_list x op rw_list "n" @ List.concat (List.map (fun e -> make_rw_list x e rw_list "n") exps_list)
+  | _ -> []
+
+and handle_lambda_rw x params body rw_list =
+  add_and_return_counter counter ;
+  if (List.mem x params) 
+  then [] 
+  else make_rw_list x body (rw_list @ [(string_of_int (!counter))]) "n"
+
+and check_occure_in_var var x =
+  match var with
+  | VarParam(s, minor) -> if ((compare s x) = 0) then true else false
+  | VarBound(s, major, minor) -> if ((compare s x) = 0) then true else false
+  | VarFree(s) -> if ((compare s x) = 0) then true else false
+
+and check_conditions rw_list =
+  match rw_list with
+  | [] -> false
+  | hd :: tl -> let ret = List.filter (fun ls -> check_lists_of_rw hd ls) tl in
+                if (ret != []) then true else (check_conditions tl)
+
+and check_conditions_seq rw_list = (* [n-1] - is_atomic_occurence , [n-2] - w/r *)
+  match rw_list with
+    | [] -> false
+    | hd :: tl -> let ret = List.filter (fun ls -> check_lists_of_rw_seq hd ls) tl in
+                  if (ret != []) then true else (check_conditions tl)
+
+and check_lists_of_rw l1 l2 =
+  let last_of_l1 = List.nth l1 ((List.length l1)-2) in
+  let last_of_l2 = List.nth l2 ((List.length l2)-2) in
+  if (last_of_l1 = last_of_l2) then false (* check for w & r*)
+  else (
+    let last_closure_l1 = List.nth l1 ((List.length l1)-3) in (* check for different closures*)
+    let last_closure_l2 = List.nth l2 ((List.length l2)-3) in
+    if (last_closure_l1 = last_closure_l2) then false
+    else (
+      let cart =  List.concat (List.map (fun e1 -> List.map (fun e2 -> (e1, e2)) l2) l1) in 
+      andmap (fun (s1, s2) -> s1="n" || s1="y" || s1 != s2) cart))
+
+and check_lists_of_rw_seq l1 l2 =
+  let last_of_l1 = List.nth l1 ((List.length l1)-2) in (* check for w & r*)
+  let last_of_l2 = List.nth l2 ((List.length l2)-2) in
+  if (last_of_l1 = last_of_l2) then false
+  else (
+    if ((List.nth l1 ((List.length l1)-1)) = "y") then false else (  (* check for third rule*)
+      let last_closure_l1 = List.nth l1 ((List.length l1)-3) in
+      let last_closure_l2 = List.nth l2 ((List.length l2)-3) in
+      if (last_closure_l1 = last_closure_l2) then false (* check for different closures*)
+      else (
+        let cart =  List.concat (List.map (fun e1 -> List.map (fun e2 -> (e1, e2)) l2) l1) in 
+        andmap (fun (s1, s2) -> s1="n" || s1="y" || s1 != s2) cart)))
+
+  
+and add_box_to_lambda_seq x var_param body =  
+  match body with   
+  | Seq'(seq_lst) -> Seq'(Set'(var_param, Box'(var_param)) :: (List.map (fun e -> replace_get_set_occurs x e) seq_lst))
+  | e -> Seq'([Set'(var_param, Box'(var_param)); (replace_get_set_occurs x e)]) 
+  
+and replace_get_set_occurs x exp = 
+  match exp with
+  | Const'(c) -> exp
+  | Var'(v) -> replace_var_get x v
+  | Box'(v) -> exp
+  | BoxGet'(v) -> exp
+  | BoxSet'(v, exp) -> BoxSet'(v, replace_get_set_occurs x exp)
+  | If'(test, dit, dif) -> If'(replace_get_set_occurs x test, replace_get_set_occurs x dit, replace_get_set_occurs x dif)
+  | Seq'(seq_lst) -> Seq'(List.map (fun e -> replace_get_set_occurs x e) seq_lst)
+  | Set'(var, e) -> replace_var_set x var e
+  | Def'(var, e) -> replace_var_set x var e
+  | Or'(or_lst) -> Or'(List.map (fun e -> replace_get_set_occurs x e) or_lst)
+  | LambdaSimple'(params, body) -> if (List.mem x params) then exp else LambdaSimple'(params, replace_get_set_occurs x body)
+  | LambdaOpt'(params_list, params_opt, body) -> if (List.mem x (params_list @ [params_opt])) then exp else LambdaOpt'(params_list, params_opt, replace_get_set_occurs x body)
+  | Applic'(op, exps_list) -> Applic'(replace_get_set_occurs x op, List.map (fun e -> replace_get_set_occurs x e) exps_list) 
+  | ApplicTP'(op, exps_list) -> ApplicTP'(replace_get_set_occurs x op, List.map (fun e -> replace_get_set_occurs x e) exps_list)
+
+and replace_var_get x var = 
+  match var with    
+  | VarFree(s) -> Var'(var)
+  | VarParam(s, minor) -> if (s = x) then BoxGet'(var) else Var'(var) 
+  | VarBound  (s, major, minor) -> if (s = x) then BoxGet'(var) else Var'(var) 
+
+and replace_var_set x var exp = 
+  match var with
+  | VarFree(s) -> Set'(var, replace_get_set_occurs x exp)
+  | VarParam(s, minor) -> if (x = s) then BoxSet'(var, replace_get_set_occurs x exp) else Set'(var, replace_get_set_occurs x exp)
+  | VarBound(s, major, minor) -> if (x = s) then BoxSet'(var, replace_get_set_occurs x exp) else Set'(var, replace_get_set_occurs x exp)
+  
+
+  (* END_OUR_CODE *)
+
+let annotate_lexical_addresses e = lexical_addresses_rec e [];;
 
-let annotate_tail_calls e = raise X_not_yet_implemented;;
+let annotate_tail_calls e = tail_calls_rec e false;;
 
-let box_set e = raise X_not_yet_implemented;;
+let box_set e = box_rec e ;;
 
 let run_semantics expr =
   box_set
diff --git a/tag-parser.ml b/tag-parser.ml
index 138249e..59121de 100644
--- a/tag-parser.ml
+++ b/tag-parser.ml
@@ -58,7 +58,276 @@ let reserved_word_list =
 
 (* work on the tag parser starts here *)
 
-let tag_parse_expressions sexpr = raise X_not_yet_implemented;;
+let rec tag_parse sexp = match sexp with
+  | Number(x) -> Const(Sexpr(Number(x)))
+  | Bool(x) -> Const(Sexpr(Bool(x)))
+  | Nil -> Const(Sexpr(Nil))
+  | Char(x) -> Const(Sexpr(Char(x)))
+  | String(x) -> Const(Sexpr(String(x)))
+  | Pair(Symbol("quote"), Pair(x, Nil)) -> Const(Sexpr(x))
+  | Pair(Symbol("quote"), Nil) -> Const(Sexpr(Nil))
+  | Pair(Symbol("quasiquote"), Pair(rest, Nil)) -> tag_parse (expand_quasiquote rest)
+  | Pair(Symbol("let"), Pair(params, body)) -> tag_parse (expand_let params body)
+  | Pair(Symbol("let*"), Pair(params, body)) -> tag_parse (expand_let_star params body)
+  | Pair(Symbol("letrec"), Pair(params, body)) -> tag_parse (expand_letrec params body)
+  | Pair(Symbol("and"), sexps) -> tag_parse (expand_and sexps)
+  | Symbol(x) -> if (List.mem x reserved_word_list) then (raise X_syntax_error) else Var(x)
+  | Pair(Symbol("begin"), Nil) -> Const(Void)
+  | Pair(Symbol("begin"), Pair(x, Nil)) -> tag_parse x
+  | Pair(Symbol("begin"), rest) -> Seq(flatten_begin(sexprs_to_exprs_list rest))
+  | Pair(Symbol("define"), Pair(Symbol(x), Pair(y, Nil))) -> 
+    if (List.mem x reserved_word_list) 
+      then raise X_syntax_error
+      else Def(Var(x), tag_parse y)
+  | Pair(Symbol("define"), Pair(Pair(symbol_f_name, args_list), body)) -> 
+      let f_name = match symbol_f_name with
+        | Symbol(s) -> s 
+        | _ -> raise X_syntax_error in
+        if (List.mem f_name reserved_word_list) 
+          then raise X_syntax_error
+          else tag_parse (expand_mit_define symbol_f_name args_list body)
+  | Pair(Symbol("if"), Pair(test, Pair(dit, Pair(dif, Nil))))-> If(tag_parse test, tag_parse dit, tag_parse dif)
+  | Pair(Symbol("if"), Pair(test, Pair(dit,  Nil)))-> If(tag_parse test, tag_parse dit, Const(Void))
+  | Pair(Symbol("lambda"), Pair(args, body))-> tag_parse_lambda args body
+  | Pair(Symbol("or"), rest) -> Or(sexprs_to_exprs_list rest)
+  | Pair(Symbol("set!"), Pair(a, Pair(b, Nil))) -> Set(tag_parse a, tag_parse b)
+  | Pair(Symbol("pset!"), sets) -> tag_parse (expand_pset sets)
+  | Pair(Symbol("cond"),rest) -> tag_parse (expand_cond rest)
+  | Pair(first, rest) -> Applic(tag_parse first, sexprs_to_exprs_list rest) 
+ 
+  
+(***** QUASIQUOTE *****)
+
+and expand_quasiquote e =
+  match e with
+  | Pair(Symbol("unquote"), Pair(sexp, Nil)) -> sexp
+  | Pair(Symbol("unquote-splicing"), Pair(sexp, Nil)) -> raise X_syntax_error
+  | Pair(a, b) -> (match (a, b) with
+    | (Pair(Symbol("unquote-splicing"), Pair(a_sexp, Nil)), b_sexp) ->
+        Pair(Symbol("append"), Pair(a_sexp, Pair(expand_quasiquote b_sexp, Nil)))
+    (* | (a_sexp, Pair(Symbol("unquote-splicing"), Pair(b_sexp, Nil))) ->
+        Pair(Symbol("cons"), Pair(expand_quasiquote a_sexp, Pair(b_sexp, Nil))) *)
+    | (a_sexp, b_sexp) ->
+        Pair(Symbol("cons"), Pair(expand_quasiquote a_sexp, Pair(expand_quasiquote b_sexp, Nil))))
+  | Nil -> Pair(Symbol("quote"), e)
+  | Symbol(x) -> Pair(Symbol("quote"), Pair(e, Nil))
+  | x -> x
+ 
+  
+
+  
+(***** MIT DEFINE *****)
+
+and expand_mit_define symbol_f_name args_list body = 
+  Pair(Symbol("define"), Pair(symbol_f_name, Pair(Pair(Symbol("lambda"), Pair(args_list, body)), Nil)))
+
+  
+(***** LET *****)  
+
+and extract_params params =
+  match params with
+  | Nil -> Nil
+  | Pair(Pair(p, _val), rest) -> Pair(p, extract_params rest)
+  | _ -> raise X_syntax_error
+
+and extract_args params =
+  match params with
+  | Nil -> Nil 
+  | Pair(Pair(p, Pair(_val,Nil)), rest) -> Pair(_val, extract_args rest)
+  | Pair(Pair(p, s), rest) -> Pair(s, extract_args rest)
+  | _ -> raise X_syntax_error
+
+and expand_let _params body =
+  let params = extract_params _params in
+  let args = extract_args _params in
+  Pair(Pair(Symbol("lambda"), Pair(params, body)),args)
+ 
+
+(***** LET STAR *****)
+
+and expand_let_star _params body =
+  match _params with
+    | Nil -> Pair(Symbol("let"), Pair(Nil, body))
+    | Pair(Pair(p,_val), Nil) -> Pair(Symbol("let"), Pair(_params, body))
+    | Pair(Pair(p,_val), rest) -> Pair(Symbol("let"), Pair(Pair(Pair(p,_val), Nil), Pair(expand_let_star rest body, Nil)))
+    | _ -> raise X_syntax_error
+
+(***** LET REC *****)
+
+and build_sets_and_body params body = (*for let*)
+  match params with
+  | Nil -> Pair(Pair(Symbol("let"), Pair(Nil, body)), Nil)
+  | Pair(binding, rest) -> Pair(Pair(Symbol("set!"), binding), build_sets_and_body rest body)
+  | _ -> raise X_syntax_error
+
+and expand_letrec _params body =
+  let _vars = extract_vars _params in
+  let whatever = Pair(Symbol("quote"), Pair(Symbol("whatever"), Nil)) in
+  let params_list = List.fold_right (fun p acc -> Pair(Pair(p, whatever), acc)) _vars Nil in
+  let sets_list = build_sets_and_body _params body in
+  (* let body = Pair(Symbol("let"), Pair(Nil, body)) in *)
+  Pair(Symbol("let"), Pair(params_list, sets_list))
+
+
+(***** AND *****)
+
+and expand_and sexps = 
+  match sexps with 
+  | Nil -> Bool(true)
+  | Pair(sexp, Nil) -> sexp
+  | Pair(sexp, rest) -> Pair(Symbol("if"), Pair(sexp, Pair(Pair(Symbol("and"), rest), Pair(Bool(false), Nil))))
+  | _ -> raise X_syntax_error
+
+
+(***** EXPAND PSET *****)
+
+and extract_vars params =
+  match params with 
+  | Nil -> []
+  | Pair(Pair(p, Pair(_val, Nil)), rest) -> p :: extract_vars rest
+  | _ -> raise X_syntax_error
+
+and create_body old_vars new_vars = 
+  match (old_vars, new_vars) with
+  | ([], []) -> Nil
+  | (o::os, n::ns) -> Pair(Pair(Symbol "set!", Pair(Symbol(o), Pair(n, Nil))),(create_body os ns))
+  | _ -> raise X_syntax_error
+  
+and create_prefix len p =
+  if (len == 1) then "_" else (create_prefix (len-1) p ^ "_")
+
+and create_ribs l1 l2 =
+  match (l1, l2) with
+  | ([], []) -> Nil
+  | (l_1::l_1s, l_2::l_2s) -> 
+    Pair(Pair(l_1, Pair(l_2, Nil)), create_ribs l_1s l_2s)
+  | _ -> raise X_syntax_error
+  
+and pairs_to_list_sexpr pairs =
+  match pairs with
+  | Pair(exp, Nil) -> exp :: []
+  | Pair(car, cdr) -> car :: (pairs_to_list_sexpr cdr)
+  | _ -> raise X_syntax_error
+
+and find_max_length_of_var vars len =
+  match vars with
+  | [] -> len
+  | v :: vs -> if len > String.length v
+              then find_max_length_of_var vs len
+              else find_max_length_of_var vs (String.length v)
+  
+
+and extract_string_vars sets =
+match sets with
+  | Nil -> []
+  | Pair(Pair(Symbol(s), _), rest) -> s :: (extract_string_vars rest)
+  | _ -> raise X_syntax_error
+
+and extract_vals sets =
+match sets with
+  | Nil -> []
+  | Pair(Pair(_, Pair(_val, Nil)), rest) -> _val :: (extract_vals rest)
+  | _ -> raise X_syntax_error
+
+and expand_pset sets =
+  let vars = extract_string_vars sets in  
+  let vals = extract_vals sets in
+  let length_longset_var = find_max_length_of_var vars 0 in 
+  let prefix = create_prefix length_longset_var "_" in 
+  let new_vars = List.map (fun (s) -> Symbol(prefix ^ s)) vars in  
+  let body = create_body vars new_vars in 
+  let ribs = create_ribs new_vars vals in 
+  Pair(Symbol "let", Pair(ribs, body))   
+  
+
+(***** COND *****)   
+
+  and expand_cond e =
+  match e with
+  | Pair(Symbol("cond"), rest) -> expand_cond rest
+  | Pair(Pair(Symbol("else"), _else), _) -> Pair(Symbol("begin"), _else)
+  | Pair(Pair(_test, Pair(Symbol "=>", f_then)), rest) -> 
+      Pair(Symbol("let"), Pair(Pair(Pair(Symbol("value"), Pair(_test,Nil)),
+                    Pair(Pair(Symbol("f"), Pair(Pair(Symbol("lambda"), Pair(Nil,f_then)), Nil)),
+                    Pair(Pair(Symbol("rest"), Pair(Pair(Symbol("lambda"), Pair(Nil, Pair(expand_cond rest, Nil))), Nil)), Nil))),
+                    Pair(Pair(Symbol("if"), Pair(Symbol("value"),
+                    Pair(Pair(Pair(Symbol("f"),Nil), Pair(Symbol("value"),Nil)),
+                    Pair(Pair(Symbol("rest"), Nil), Nil)))), Nil)))
+  | Pair(Pair(_test, _then), rest) -> Pair(Symbol("if"), Pair(_test, Pair(Pair(Symbol("begin"), _then), Pair(expand_cond rest,Nil))))
+  | Nil -> Pair(Symbol("begin"), Nil)
+  | _ -> raise X_syntax_error
+
+(***** LAMBDA *****) 
+
+and is_proper_list list = match list with
+  | Nil -> true
+  | Pair (_, rest) -> is_proper_list rest
+  | _ -> false
+
+and is_improper_list list = match list with
+  | Pair (_, rest) -> not(is_proper_list rest)
+  | _ -> false
+
+and check_body_seq body = match body with
+  | Pair(x, Nil) -> true
+  | _ -> false
+
+and get_first p = match p with
+  | Pair(x, _) -> x  
+  | _ -> raise X_syntax_error
+
+and extract_string_of_symbol args = 
+  match args with
+  | Symbol(x) -> x
+  | _ -> raise X_syntax_error
+
+and args_to_string_list args =
+  match args with
+    | Pair(Symbol(x), Symbol(y)) -> [x ; y]
+    | Pair(Symbol(x), y) -> x :: args_to_string_list y 
+    | Nil -> []
+    | _ -> raise X_syntax_error
+
+and opt_args args =
+  match args with
+    | Pair(Symbol(x), y) -> x :: opt_args y 
+    | y -> []
+  
+and take_last args =
+  match args with
+    | Pair(Symbol(x), y) -> take_last y 
+    | Symbol(y) -> y 
+    | _ -> raise X_syntax_error
+
+and sexprs_to_exprs_list rest = 
+  match rest with
+  | Pair(first, second) -> tag_parse first :: sexprs_to_exprs_list second
+  | Nil -> []
+  | _ -> raise X_syntax_error
+
+and flatten_begin seq = 
+  match seq with
+  | Seq(e) :: es -> e @ flatten_begin es
+  | e :: es -> e :: flatten_begin es
+  | e -> e
+
+
+and tag_parse_lambda args body = 
+  let body_isnt_seq = check_body_seq body in
+  if (is_proper_list args) 
+  then (if body_isnt_seq 
+        then LambdaSimple(args_to_string_list args, tag_parse (get_first body))
+        else LambdaSimple(args_to_string_list args, Seq(flatten_begin(sexprs_to_exprs_list body))))
+  else (if (is_improper_list args)
+        then (if body_isnt_seq
+              then LambdaOpt(opt_args args, take_last args, tag_parse (get_first body))
+              else LambdaOpt(opt_args args, take_last args, Seq(flatten_begin(sexprs_to_exprs_list body))))
+        else (if body_isnt_seq
+              then LambdaOpt([], extract_string_of_symbol args , tag_parse (get_first body))
+              else LambdaOpt([], extract_string_of_symbol args , Seq(flatten_begin(sexprs_to_exprs_list body)))))
+;;
+
+let tag_parse_expressions sexpr = List.map (fun sexp -> tag_parse sexp) sexpr;;
 
   
 end;; (* struct Tag_Parser *)
