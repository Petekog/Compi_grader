diff --git a/reader.ml b/reader.ml
index 32445c2..8d241bb 100644
--- a/reader.ml
+++ b/reader.ml
@@ -1,6 +1,6 @@
 
 #use "pc.ml";;
-
+open PC;;
 exception X_not_yet_implemented;;
 exception X_this_should_not_happen;;
   
@@ -29,18 +29,296 @@ let rec sexpr_eq s1 s2 =
   | Pair(car1, cdr1), Pair(car2, cdr2) -> (sexpr_eq car1 car2) && (sexpr_eq cdr1 cdr2)
   | _ -> false;;
 
-module Reader: sig
-  val read_sexprs : string -> sexpr list
-end
-= struct
-let normalize_scheme_symbol str =
-  let s = string_to_list str in
-  if (andmap
-	(fun ch -> (ch = (lowercase_ascii ch)))
-	s) then str
-  else Printf.sprintf "|%s|" str;;
+
+  (*FUNCTIONS*)
+let rec help_gcd a b =
+  if b = 0 then a else gcd b (a mod b)
+
+and gcd a b =
+  let _gcd =help_gcd a b in
+  if _gcd<0 then (-1)*_gcd
+  else _gcd;;
+
+let rec proper_list_of_list lst =
+  match lst with
+  | [] -> Nil
+  | (x::y) -> Pair(x, proper_list_of_list y);;
+
+  let rec improper x y =
+    match x with
+    | [] -> y
+    | (z::w) -> Pair(z, improper w y);;
+    
+  let improper_list_of_list lst =
+    match lst with
+    | ((x, '.'), y) -> improper x y
+    | _ -> raise X_no_match;;
+    
+
+(*PARSERS*)
+let ascii_0 = int_of_char '0';;
+let ascii_a = int_of_char 'a';;
+let nt_division = char '/';;
+let nt_zero = char '0';;
+let nt_digit = range '0' '9';;
+
+let remove_leading nt_left nt=
+  let nt = caten nt_left nt in
+  let nt = pack nt(function(_, e) -> e) in
+  nt;;
+
+let remove_leading_zeroes = remove_leading (star nt_zero);;
+
+let make_paired nt_left nt_right nt =
+  let nt = caten nt_left nt in
+  let nt = pack nt (function (_, e) -> e) in
+  let nt = caten nt nt_right in
+  let nt = pack nt (function (e, _) -> e) in
+  nt;;
+
+let make_spaced nt =
+  make_paired (star nt_whitespace) (star nt_whitespace) nt;;
+
+(*let nt_natural = remove_leading_zeroes (plus nt_digit);;*)
+let nt_natural = plus nt_digit;;
+
+(*MAIN FUNCTION*)
+let rec nt_sexp s =
+  let nts = disj_list [nt_boolean;nt_char;nt_number;nt_string;nt_symbol;
+           nt_list;nt_dotted_list;nt_quoted;nt_quasi_quoted;nt_unquoted;
+           nt_unquote_and_spliced] in
+  remove_comments nts s
+(*COMMENTS*)
+and nt_line_comment s =
+  let prefix = char ';' in
+  let chars = range (char_of_int 11) (char_of_int 127) in
+  let comment = star chars in
+  let end_line= char (char_of_int 10) in
+  let nt = caten prefix comment in
+  let nt = caten nt end_line in
+  pack nt (fun x-> ' ') s
+
+and nt_sexp_comment s =
+  let prefix = word "#;" in
+  let nt = caten prefix nt_sexp in
+  pack nt (fun x-> ' ') s
+
+and remove_comments nts s =
+  let nt_spaces= pack nt_whitespace (fun x-> ' ') in
+  let comments= disj_list[nt_line_comment;nt_sexp_comment;nt_spaces] in
+  let comments= star comments in
+  let nt = make_paired comments comments nts in
+  nt s
+
+(*BOOLEAN*)
+and nt_boolean s = 
+let nt_true = pack (word_ci "#t") (fun x-> Bool(true)) in
+let nt_false = pack(word_ci "#f") (fun x-> Bool(false)) in 
+disj nt_true nt_false s
+  
+(*CHARS*)
+and nt_char s =
+  let nt_visible_or_named = disj nt_named_char nt_visible_simple_char  in
+  let nt = caten nt_char_prefix nt_visible_or_named in
+  let nt = not_followed_by nt nt_symbol in
+  pack nt (fun (x,y)->Char(y)) s
+  
+and nt_visible_simple_char s =
+  range (char_of_int 33) (char_of_int 127) s
+
+and nt_named_char s =
+  let newline = pack (word_ci "newline") (fun x-> char_of_int 10) in
+  let nul = pack (word_ci "nul") (fun x-> char_of_int 0) in
+  let page = pack (word_ci "page") (fun x-> char_of_int 12) in
+  let return = pack (word_ci "return") (fun x-> char_of_int 13) in
+  let space = pack (word_ci "space") (fun x-> char_of_int 32) in
+  let tab = pack (word_ci "tab") (fun x-> char_of_int 9) in
+  disj_list[newline;nul;page;return;space;tab] s
+
+and nt_char_prefix s=
+  word "#\\" s
+
+(*NUMBERS*)
+and nt_number s =
+  let integer_float_fraction =  disj_list[make_scientific;make_fraction;make_float;make_integer] in
+  let nt= not_followed_by integer_float_fraction nt_symbol in
+  pack nt (fun x-> Number(x)) s
+
+and nt_integer s =
+  let nt_plus = char '+' in
+  let nt_minus = char '-' in
+  let nt_plus_or_minus = disj nt_plus nt_minus in
+  let nt_maybe = maybe nt_plus_or_minus in
+  let nt = caten nt_maybe nt_natural in
+  pack nt (function (x,y)->
+    match x with
+    | Some '+' -> '+' :: y
+    | Some '-' -> '-' ::  y
+    | None -> y
+    | _ -> raise X_no_match) s
+
+and make_integer s =
+  pack nt_integer (fun x -> Fraction(int_of_string(list_to_string x),1)) s
+
+and nt_fraction s =
+  let slash = word "/" in
+  let nt = caten_list [nt_integer; slash;nt_natural] in
+  pack nt (fun (w) ->
+  match w with
+  | [x; y; z] ->
+    let x = int_of_string(list_to_string(x)) in
+    let z = int_of_string(list_to_string(z)) in
+    let _gcd = gcd x z in
+    let x = x /_gcd in
+    let z = z/_gcd in
+    [x,y,z] 
+  | _-> raise X_no_match) s
+
+and make_fraction s=
+  pack nt_fraction ( fun(w) ->
+  match w with
+  | [x,y,z] -> Fraction(x, z)
+  | _ -> raise X_no_match ) s
+
+and nt_float s=
+  let point = word "." in
+  let naturals= plus nt_digit in
+  let nt = caten_list [nt_integer; point;naturals] in
+  pack nt (fun (x) -> List.concat x ) s
+
+and make_float s=
+  pack nt_float (fun x-> Float(float_of_string(list_to_string(x)))) s
+  
+and nt_scientific s=
+  let integer_or_float = disj nt_float nt_integer  in
+  let nt_e = char_ci 'e' in
+  let nt_e = pack nt_e (fun x-> [x]) in
+  caten_list [integer_or_float;nt_e;nt_integer] s
+
+and make_scientific s=
+  pack nt_scientific (fun (w)->
+    match w with
+    | [x; y; z] ->
+      let x = float_of_string (list_to_string x) in
+      let z = float_of_string (list_to_string z) in
+      let w =  x*.(10.0**z) in
+      Float(w)
+    | _-> raise X_no_match ) s
+
+
+(*STRINGS*)
+and nt_string s=
+  let start = char '\"' in
+  let body = star nt_string_char in
+  let start_body = caten start body in
+  let nt = caten start_body start in 
+  pack nt (fun ((x,y),z)-> String(list_to_string(y))) s
+  
+  and nt_string_char s =
+    disj nt_string_meta_char nt_string_literal_char s
+
+  and nt_string_literal_char s =
+    let start= char '\"' in
+    let backslash= char '\\' in
+    let disj_start_back = disj start backslash in
+    let nt = diff nt_any disj_start_back in
+    pack nt (fun x-> x) s
+
+  and nt_string_meta_char s =
+    let return = pack (word "\\r") (fun x-> char_of_int 13) in
+    let new_line = pack (word "\\n") (fun x-> char_of_int 10) in
+    let tab = pack (word "\\t") (fun x-> char_of_int 9) in
+    let page = pack (word "\\f") (fun x-> char_of_int 12) in
+    let backslash = pack (word "\\\\") (fun x-> char_of_int 92) in
+    let double_quote = pack (word "\\\"") (fun x-> char_of_int 34) in
+    disj_list[return;new_line;tab;page;backslash;double_quote] s
+
+  
+    (*SYMBOLS*)
+    and nt_symbol s =
+    let plus_symbol_char = plus nt_symbol_char in
+    let double_symbol_char = caten nt_symbol_char plus_symbol_char in
+    let fix_double = pack double_symbol_char (fun (x,y)-> x::y) in
+    let fix_no_dot = pack nt_symbol_char_no_dot (fun x-> [x]) in
+    let nt = disj fix_double fix_no_dot in
+    pack nt (fun (x)-> Symbol(list_to_string(x))) s
+
+  and nt_symbol_char s =
+    let nt_dot = char '.' in
+    disj nt_symbol_char_no_dot nt_dot s
+
+  and nt_symbol_char_no_dot s=
+    let small_letters = range 'a' 'z' in
+    let captial_letters = range 'A' 'Z' in
+    let nt = disj small_letters captial_letters in
+    let nt = pack nt (fun x-> lowercase_ascii x) in
+    disj_list[nt_digit;nt;
+    char '!';
+    char '$';
+    char '^';
+    char '*';
+    char '-';
+    char '_';
+    char '=';
+    char '+';
+    char '<';
+    char '>';
+    char '?';
+    char '/';
+    char ':'] s
+
+(*LISTS*)
+(*//proper list -> null at the end*)
+and nt_list s = 
+  let _sexp = make_spaced nt_sexp in
+  let star_sexp = star _sexp in
+  let nt = make_paired (char '(') (char ')') star_sexp in
+  pack nt proper_list_of_list s
+
+(*//improper list without null at the end*)
+and nt_dotted_list s = 
+  let _tail = make_spaced nt_sexp in 
+  let _head = plus _tail in
+  let _head = caten _head (make_spaced (char '.')) in
+  let _pair = caten _head _tail in
+  let nt = make_paired (char '(') (char ')') _pair in
+  pack nt improper_list_of_list s
+
+(*QUOTES*)
+and make_quoted prefix name s =
+  let no_space_sexp = make_spaced nt_sexp in
+  let quoted = caten prefix no_space_sexp in
+  pack quoted (fun (x,y) -> Pair(Symbol (name),Pair(y,Nil))) s
+
+and nt_quoted s = make_quoted (char '\'') "quote" s
+and nt_quasi_quoted s = make_quoted (char '`') "quasiquote" s 
+and nt_unquoted s = make_quoted (char ',') "unquote" s
+and nt_unquote_and_spliced s = 
+  let prefix = word ",@" in
+  let no_space_sexp = make_spaced nt_sexp in
+  let quoted = caten prefix no_space_sexp in
+  pack quoted (function (x,y) -> Pair(Symbol ("unquote-splicing"), Pair(y, Nil))) s;;
+
+  module Reader: sig
+    val read_sexprs : string -> sexpr list
+  end
+  = struct
+
+  let normalize_scheme_symbol str =
+    let s = string_to_list str in
+    if (andmap
+    (fun ch -> (ch = (lowercase_ascii ch)))
+    s) then str
+    else Printf.sprintf "|%s|" str;;
 
 
-let read_sexprs string = raise X_not_yet_implemented;;
+(*MAIN PARSER*)
+let read_sexprs string =   
+  let s = string_to_list string in
+  let star_sexp = star nt_sexp in
+  let (x,y) = star_sexp s in
+  match x with
+  | [] -> [Nil]
+  | _-> x;;
   
 end;; (* struct Reader *)
diff --git a/readme.txt b/readme.txt
index e69de29..6fe73be 100644
--- a/readme.txt
+++ b/readme.txt
@@ -0,0 +1,4 @@
+Tzach uzi 203761218
+Nir Stiassnie 204733737
+
+We assert that the work we submitted is 100% our own. We have not received any part from any other student in the class, nor have we give parts of it for use to others.Nor have we used code from other sources: Courses taught previously at this university,courses taught at other universities, various bits of code found on the Internet, etc.We realize that should our code be found to contain code from other sources, that a formal case shall be opened against us with va’adat mishma’at, in pursuit of disciplinary action
diff --git a/semantic-analyser.ml b/semantic-analyser.ml
index 8e684f0..a97e56e 100644
--- a/semantic-analyser.ml
+++ b/semantic-analyser.ml
@@ -21,6 +21,11 @@ type expr' =
   | Applic' of expr' * (expr' list)
   | ApplicTP' of expr' * (expr' list);;
 
+exception X_update_vars_indeces_error;;
+exception X_box_lambda_error;;
+exception X_box_annotate_error;;
+exception X_find_depth_error
+
 let rec expr'_eq e1 e2 =
   match e1, e2 with
   | Const' Void, Const' Void -> true
@@ -69,17 +74,382 @@ end;;
 
 module Semantics : SEMANTICS = struct
 
-let annotate_lexical_addresses e = raise X_not_yet_implemented;;
 
-let annotate_tail_calls e = raise X_not_yet_implemented;;
+(*----------------------------ANNOTATE LEXICAL ADRESS----------------------------------*)
+
+let rec get_minor_index list x index =(
+  match list with
+  |[] -> index
+  | first::rest ->( 
+    if(String.equal first x)
+    then index
+    else get_minor_index rest x (index+1)
+  ));;
+
+let find_var_type list x index = (
+  if (index==(-1))
+  then VarParam(x,(get_minor_index list x 0))
+  else VarBound (x,index,(get_minor_index list x 0))
+);;
+
+let rec make_var' x env index =(
+  match env with
+  |[] -> VarFree(x)
+  | first::rest -> 
+    if (List.mem x first) 
+    then find_var_type first x index
+    else (make_var' x rest (index +1))
+);;
+
+
+let rec handle_annot env e  = (
+  match e with
+  | Const(x) -> Const'(x)
+  | Var(x) -> Var'(make_var' x env (-1))
+  | If(test, dit, dif) -> If'(handle_annot env test, handle_annot env dit, handle_annot env dif)
+  | Seq(x) -> Seq'(List.map (fun y -> handle_annot env y) x)
+  | Set(Var(x),y) -> Set'(make_var' x env (-1), handle_annot env y)
+  | Def(Var(x),y) -> Def'(make_var' x env (-1), handle_annot env y)
+  | Or(x) -> Or'(List.map (fun y -> handle_annot env y) x)
+  | LambdaSimple(args, exprs) -> LambdaSimple'(args, (handle_annot (args::env) exprs))
+  | LambdaOpt(params, variadic, body) -> LambdaOpt'(params, variadic, (handle_annot ((params@[variadic])::env) body))
+  | Applic(rator, rands) -> Applic'(handle_annot env rator, List.map (fun x -> handle_annot env x) rands)
+  | _ -> raise X_syntax_error);;
+
+
+
+(*-------------------------------------------------------------------------------*)
+
+
+(*----------------------------ANNOTATE TAIL CALLS----------------------------------*)
+
+
+let get_last_arg list = (
+  let rev = List.rev list in
+  List.hd rev);;
+
+
+
+let remove_last list = (
+  let rev = List.rev list in        
+  let rev_rest = List.tl rev in
+  let rest = List.rev rev_rest in
+  rest);;
+
+
+let rec annotate_tail in_tp e = 
+  match e with
+  | Const'(x) -> e
+  | Var'(x) -> e
+  | If'(test, dit, dif) -> If'(annotate_tail false test, annotate_tail in_tp dit, annotate_tail in_tp dif)
+  | Seq'(x) -> Seq'(annotate_tail_list in_tp x)
+  | Set'(x,y) -> Set'(x, annotate_tail false y)
+  | Def'(x,y) -> Def'(x, annotate_tail false y)
+  | Or'(x) -> Or'(annotate_tail_list in_tp x)
+  | LambdaSimple'(args, body) -> LambdaSimple'(args, annotate_tail true body)
+  | LambdaOpt'(args, variadic, body) -> LambdaOpt'(args, variadic, annotate_tail true body)
+  | Applic'(rator, rands) -> if (in_tp) then (ApplicTP'(annotate_tail false rator, List.map (annotate_tail false) rands))
+                                     else (Applic'  (annotate_tail false rator, List.map (annotate_tail false) rands))
+  | _ -> raise X_syntax_error
+
+
+and annotate_tail_list in_tp list = (
+    let last_arg = get_last_arg list in
+    let rest = remove_last list in
+    let output = (List.map (fun x -> annotate_tail false x) rest) @ [(annotate_tail in_tp last_arg)] in
+    output);;
+  
+(*-------------------------------------------------------------------------------*)
+
+
+(*----------------------------BOXING---------------------------------------------*)
+
+let rec flat_seq list =(
+  match list with
+  | [] -> []
+  | _ -> let car = List.hd list in
+         let cdr = List.tl list in
+            (match car with
+            | Seq'(x) -> x @ (flat_seq cdr)
+            | _ -> [car] @  (flat_seq cdr)
+            )
+);;
+
+(* Update the lexical adress of the vars that need to be boxed
+    as we dive in the scopes*)
+let update_vars_indeces vars_to_box = (
+    let update_var_index =(fun (x) ->
+      (match x with
+        | Var'(VarParam(v, minor)) -> Var'(VarBound(v,0,minor))
+        | Var'(VarBound(v, major, minor)) -> Var'(VarBound(v,major+1,minor))
+        | _ -> raise X_update_vars_indeces_error)
+      ) in
+    (match vars_to_box with 
+      | [] -> vars_to_box
+      | _ -> List.map update_var_index vars_to_box
+    )
+);;
+
+
+let depth = ref 0 ;;
+
+let rec box_annotate e vars_to_box =
+  match e with
+  | Const'(x) -> Const'(x)
+  | Var'(x) ->(
+      if (List.mem (Var'(x)) vars_to_box)
+      then BoxGet'(x)
+      else Var'(x))
+  | If'(test,dit,dif) -> If'(box_annotate test vars_to_box, box_annotate dit vars_to_box, box_annotate dif vars_to_box)
+  | Seq'(exprs) -> Seq'(List.map (fun (exp) -> box_annotate exp vars_to_box) exprs)
+  | Set'(x,value) ->(
+      let new_val = box_annotate value vars_to_box in
+      if(List.mem (Var'(x)) vars_to_box)
+      then BoxSet'(x,new_val)
+      else Set'(x,new_val)
+      )
+  | Def'(x,y) ->(
+    let v = box_annotate (Var'(x)) vars_to_box in  
+    match v with 
+    | Var'(z) -> Def'(z,box_annotate y vars_to_box)
+    | _-> raise X_syntax_error
+  )  
+  | Or'(exprs) -> Or'(List.map (fun (exp) -> box_annotate exp vars_to_box) exprs)
+  | LambdaSimple'(args,body) -> LambdaSimple'(args, box_lambda args body vars_to_box)
+  | LambdaOpt'(args,variadic,body) -> LambdaOpt'(args, variadic, box_lambda (args@[variadic]) body vars_to_box)
+  | Applic'(rator,rands) -> Applic'(box_annotate rator vars_to_box, List.map (fun (exp) -> box_annotate exp vars_to_box) rands) 
+  | ApplicTP'(rator,rands) ->ApplicTP'(box_annotate rator vars_to_box, List.map (fun (exp) -> box_annotate exp vars_to_box) rands) 
+  |_ -> raise X_syntax_error
+
+(*add to vars_to_box all the vars that need to be boxed and change corresponding bodies*)
+and box_lambda args body vars_to_box =(
+  (*updates the indeces of the vars in the enviorment.*)
+  let updated_vars = update_vars_indeces vars_to_box in
+  (*adding vars that need to be boxed to vars_to_box*)
+  let new_vars = need_to_box_list args 0 [] body in
+  let new_vars_to_box = new_vars @ updated_vars in
+  (*builds the new body recursivley*)
+  let new_body = box_annotate body new_vars_to_box in
+
+  (*Adding the set!.... in the beginning of the lambda, if needed.*)
+  match new_vars with
+  | [] -> new_body
+  | _ -> (
+    let sets = List.map (fun (x) -> 
+    (match x with
+    | Var'(VarParam(y,minor)) -> Set'(VarParam(y,minor), Box'(VarParam(y,minor)))
+    | _ -> raise X_box_annotate_error 
+    )) new_vars in
+    Seq'(flat_seq(sets@[new_body])))
+)
 
-let box_set e = raise X_not_yet_implemented;;
+
+
+(*checks if var x need to be boxed*)
+and need_to_box x body =(
+  (*find depths of read and write occurences*)
+  depth := 0; 
+  let read_array = find_depths_array "r" x body in
+  depth := 0; 
+  let write_array= find_depths_array "w" x body in
+  let bool_array = (List.map (fun (dr) -> List.map (fun (dw) -> dr != dw) write_array) read_array) in
+  let flatten_bool_array =  (List.flatten bool_array) in
+  let is_first_two_criteria = List.mem true flatten_bool_array in
+  (*Check additional criteria*)
+  if (is_first_two_criteria)
+  then check_for_additional_cretieria x body
+  else false
+)
+
+
+and check_for_additional_cretieria x body =(
+match body with 
+| Seq'(list) -> not(check_form1 x list) && not(check_form2 x list)
+|_-> true
+)
+
+and check_form1 x list =(
+match list with
+| [] -> false
+| first::rest -> if (is_write_occ x first) 
+                 then (search_contained_read_occ false x rest) 
+                 else check_form1 x rest
+)
+
+
+and check_form2 x list =(
+match list with
+| [] -> false
+| first::rest -> if (is_read_occ x first) 
+                 then (search_contained_write_occ false x rest) 
+                 else check_form2 x rest
+)
+
+(* find <read-ocur>*)
+and is_read_occ x first =(
+  let f = is_read_occ x in
+  match first with
+  | Var'(v) -> expr'_eq x (Var'(v))
+  | Set'(v,expr) -> is_read_occ x expr
+  | If'(test,dit,dif) -> (is_read_occ x dit) || (is_read_occ x dif)
+  | Or'(list) -> List.fold_left (||) false (List.map f list)
+  | Applic' (rator,rands) -> List.fold_left (||) false (List.map f  rands)
+  | ApplicTP' (rator,rands) -> List.fold_left (||) false (List.map f rands)
+  |_-> false 
+)
+
+(* find <write-ocur>*)
+and is_write_occ x first = (
+  match first with
+  | Set'(v,expr) -> expr'_eq x (Var'(v))
+  | If'(test,dit,dif) -> (is_write_occ x dit) || (is_write_occ x dif)
+  |_-> false
+)
+
+and search_contained_write_occ is_nested x list =(
+  match list with
+  |[] -> false
+  | first::rest -> search_contained_write_occ_ is_nested x first || search_contained_write_occ is_nested x rest
+)
+
+and search_contained_write_occ_ is_nested x expr=(
+  let f = search_contained_write_occ is_nested  x in
+  let f_ = search_contained_write_occ_ is_nested  x in
+  match expr with
+  | Const'(w) -> false
+  | Var'(w) -> (if is_nested 
+               then expr'_eq x (Var'(w)) 
+               else false)
+  | If'(test,dit,dif) -> (f_ dit) ||  (f_ dif)
+  | Seq'(list) -> f list
+  | Set'(z,value) ->  f_ (Var'(z))
+  | Or'(list) ->  f list
+  | LambdaSimple'(args,body) -> search_contained_write_occ_ true (update_var_index_ x) body
+  | LambdaOpt'(args,variadic,body) -> search_contained_write_occ_ true (update_var_index_ x) body 
+  | Applic' (rator,rands) -> f (rator::rands)
+  | ApplicTP' (rator,rands) -> f (rator::rands) 
+  | _->false
+)
+
+and search_contained_read_occ is_nested x list =(
+  match list with
+  |[] -> false
+  | first::rest -> search_contained_read_occ_ is_nested x first || search_contained_read_occ is_nested x rest 
+)
+
+and search_contained_read_occ_ is_nested x expr=(
+  let f = search_contained_read_occ is_nested x in
+  let f_ = search_contained_read_occ_ is_nested x in
+  match expr with
+  | Const'(w) -> false
+  | Var'(w) -> if(is_nested) then expr'_eq x (Var'(w)) else false
+  | If'(test,dit,dif) -> (f_ dit) ||  (f_ dif)
+  | Seq'(list) -> f list
+  | Set'(z,value) ->  f_ value
+  | Or'(list) ->  f list
+  | LambdaSimple'(args,body) -> search_contained_read_occ_ true (update_var_index_ x) body
+  | LambdaOpt'(args,variadic,body) -> search_contained_read_occ_ true (update_var_index_ x) body 
+  | Applic' (rator,rands) -> f (rator::rands)
+  | ApplicTP' (rator,rands) -> f (rator::rands)
+  | _->false
+)
+
+and update_var_index_ x = 
+ (match x with
+        | Var'(VarParam(v, minor)) -> Var'(VarBound(v,0,minor))
+        | Var'(VarBound(v, major, minor)) -> Var'(VarBound(v,major+1,minor))
+        | _ -> raise X_update_vars_indeces_error
+ )
+
+
+(*iterate over the body (including nested)
+ and return array of depths of occurences of x*)
+and find_depths_array flag x body =(
+  let handle_var_depth =(
+    match flag with
+    | "w" -> []
+    | "r" -> (if (expr'_eq body x) then [-1] else [])
+    | _ -> raise X_find_depth_error
+  ) in
+  let handle_set_depth y value =(
+    match flag with
+    | "w" -> ( let  nested = (find_depths_array flag x value) in
+               if (expr'_eq (Var'(y)) x) 
+               then ([-1] @ nested)  else nested)
+    | "r" -> find_depths_array flag x value
+    | _ -> raise X_find_depth_error
+  ) 
+  in
+  (match body with
+	| Const'(y) -> []
+	| Var'(y) -> handle_var_depth
+  | Box'(y) -> []
+  | BoxGet'(y) -> []
+  | BoxSet'(y, value) -> (find_depths_array flag x value)
+	| If' (test ,dit , dif) -> (find_depths_array flag x test)@(find_depths_array flag x dit)@(find_depths_array flag x dif)
+	| Seq' (list) -> (List.flatten (List.map (fun (expr) -> find_depths_array flag x expr) list))
+	| Set' (y, value) -> handle_set_depth y value
+	| Def' (y, value) -> find_depths_array flag x value
+	| Or' (list) -> (List.flatten (List.map (fun (expr) -> find_depths_array flag x expr) list))
+	| LambdaSimple' (args, _body_) -> (find_depth_lambda x _body_ flag)
+	| LambdaOpt' (args, variadic ,_body_) ->  (find_depth_lambda x _body_ flag)
+	| Applic' (rator, rands) -> (List.flatten (List.map (fun (expr) -> find_depths_array flag x expr) (rator::rands)))
+	| ApplicTP'(rator, rands)-> (List.flatten (List.map (fun (expr) -> find_depths_array flag x expr) (rator::rands)))
+  )
+)
+
+and find_depth_lambda x body flag =(
+  let new_x =(
+        match x with
+      | Var'(VarParam(v, minor)) -> Var'(VarBound(v,0,minor))
+      | Var'(VarBound(v, major, minor)) -> Var'(VarBound(v,major+1,minor))
+      | _ -> raise X_find_depth_error
+  ) in
+  depth := !depth +1;
+  let index = !depth in
+  let _body_ = find_depths_array flag new_x body  in
+  (match _body_ with
+  | [] -> []
+  | _ -> [index]
+  )
+)
+
+(*iterate over list and check for each member if it need to be boxed
+ return a list of all the vars that need to be boxed in the list*)
+and  need_to_box_list args minor vars_to_box body =(
+  match args with
+  | [] -> vars_to_box
+  | first :: rest ->
+    if (need_to_box (Var'(VarParam(first, minor))) body)
+    then need_to_box_list rest (minor+1) (vars_to_box @ [Var'(VarParam(first,minor))]) body
+    else need_to_box_list rest (minor+1) vars_to_box body
+);;
+
+
+
+(*-------------------------------------------------------------------------------*)
+
+
+
+
+let annotate_lexical_addresses e = handle_annot [] e;;
+
+let annotate_tail_calls e = annotate_tail false e;;
+
+let box_set e = box_annotate e [];;
 
 let run_semantics expr =
   box_set
     (annotate_tail_calls
        (annotate_lexical_addresses expr));;
-  
+
+(*let test_s value = 
+    let sexpr_list= Reader.read_sexprs value in
+    let parsed =  Tag_Parser.tag_parse_expressions sexpr_list in
+    let f = fun ([x]) -> x in
+    let v = f parsed in
+    run_semantics v;;
+    *)
 end;; (* struct Semantics *)
 
 
diff --git a/tag-parser.ml b/tag-parser.ml
index 138249e..7e604d3 100644
--- a/tag-parser.ml
+++ b/tag-parser.ml
@@ -1,5 +1,5 @@
 #use "reader.ml";;
-
+open Reader;;
 type constant =
   | Sexpr of sexpr
   | Void
@@ -58,7 +58,297 @@ let reserved_word_list =
 
 (* work on the tag parser starts here *)
 
-let tag_parse_expressions sexpr = raise X_not_yet_implemented;;
+
+
+
+(*----------------------FUNCTIONS--------------------------------*)
+
+
+
+let rec make_new_letrec_body bindings body = (
+  match bindings with 
+  | Nil -> body
+  | Pair(Pair(var, Pair(value, Nil)), cdr) -> Pair(Pair(Symbol("set!"), Pair(var, Pair(value, Nil))), make_new_letrec_body cdr body)
+  | _ -> raise X_syntax_error
+);;
+
+
+let rec make_new_letrec_bindings bindings = (
+  match bindings with 
+  | Nil -> Nil
+  | Pair(Pair(var, Pair(value, Nil)), cdr) -> Pair(Pair(var, Pair(Pair(Symbol("quote"), Pair(Symbol("whatever"),Nil)), Nil)), make_new_letrec_bindings cdr)
+  | _ -> raise X_syntax_error
+);;
+
+
+let rec unique_list_of_sexp sexp_list list_to_return = 
+  match sexp_list with
+  | Nil -> list_to_return
+  | Pair(Symbol x, y) -> 
+          if (List.mem x list_to_return)
+          then raise X_syntax_error 
+          else unique_list_of_sexp y (List.append list_to_return [x]) 
+  | Symbol(x) -> 
+      if (List.mem x list_to_return) 
+      then raise X_syntax_error 
+      else List.append list_to_return [x] 
+  | _ -> raise X_syntax_error;;
+
+
+let rec is_proper_list sexpr = 
+  match sexpr with
+  | Nil -> true
+  | Pair(a,b) -> is_proper_list b
+  | _-> false;;
+
+let rec get_last_arg list = 
+  let list_length = List.length list in
+  List.nth list (list_length-1);;
+
+
+let expand_cond_1 test expr ribs = 
+ let expr = (match expr with
+              | Nil -> raise X_syntax_error
+              | _ -> Pair(Symbol "begin", expr)) in
+            (match ribs with
+              | Nil -> Pair(Symbol "if", Pair(test, Pair(expr, Nil)))
+              | _ -> Pair(Symbol "if", Pair(test, Pair(expr, Pair(Pair(Symbol "cond", ribs), Nil)))));;
+
+
+let make_assignments test exprf rest =
+  let value = Pair(Symbol("value"), Pair(test, Nil)) in 
+  let f = Pair(Symbol("f"), Pair(Pair(Symbol("lambda"), Pair(Nil, Pair(exprf, Nil))), Nil)) in
+  let lambda_rest = Pair(Symbol("rest"), Pair(Pair(Symbol("lambda"), Pair(Nil, Pair(Pair(Symbol("cond"), rest), Nil))), Nil)) in
+  match rest with
+    | Nil -> Pair(value, Pair(f, Nil))
+    | _ ->   Pair(value, Pair(f, Pair(lambda_rest, Nil)));;
+
+
+let make_body rest = 
+  let exprf = Pair(Pair(Symbol("f"), Nil), Pair(Symbol("value"), Nil)) in
+  let dif = Pair(Pair(Symbol("rest"), Nil), Nil) in
+  match rest with
+    | Nil -> Pair(Symbol("if"), Pair(Symbol("value"), Pair(exprf, Nil)))
+    | _ ->   Pair(Symbol("if"), Pair(Symbol("value"), Pair(exprf, dif)));;
+
+
+let expand_cond_2 test exprf rest = 
+  let assignments = make_assignments test exprf rest in
+  let body = make_body rest in
+  Pair(Symbol("let"),Pair(assignments, Pair(body, Nil)));;
+
+
+
+(*1 - get let vars, 2- get let values *)
+let rec get_let_variables bindings flag = 
+  (match bindings with
+    | Nil -> Nil
+    | Pair(Pair(var, Pair(value, Nil)), rest) -> 
+      (match flag with
+      | 1 -> 
+        (let args = get_let_variables rest 1 in
+        (Pair(var, args)))
+      | 2 -> 
+        (let values = get_let_variables rest 2 in
+        (Pair(value, values))) 
+      | _ -> raise X_syntax_error)
+    | _ -> raise X_syntax_error);;
+
+
+let rec make_bindings_for_pset bindings = (
+  match bindings with
+  | Pair(Pair(Symbol(var),value),Nil) -> Pair(Pair(Symbol(String.uppercase_ascii var), value),Nil)
+  | Pair(Pair(Symbol(var),value),cdr) -> Pair(Pair(Symbol(String.uppercase_ascii var), value),make_bindings_for_pset cdr)
+  | _ -> raise X_syntax_error
+);;
+
+let rec make_body_for_pset bindings =(
+   match bindings with
+  | Pair(Pair(Symbol(var), Pair(y, Nil)),Nil) -> Pair(Pair(Symbol("set!"),Pair(Symbol(var),Pair(Symbol(String.uppercase_ascii var), Nil))), Nil)
+  | Pair(Pair(Symbol(var),value),cdr) -> Pair(Pair(Symbol("set!"),Pair(Symbol(var),Pair(Symbol(String.uppercase_ascii var), Nil))), make_body_for_pset cdr)
+  | _ -> raise X_syntax_error
+);;
+
+let rec flat_sequence list =(
+  match list with
+  | [] -> []
+  | _ -> let car = List.hd list in
+          let cdr = List.tl list in(
+          match car with
+          | Seq(x) -> x @ (flat_sequence cdr)
+          | _ -> [car] @  (flat_sequence cdr)
+          )
+)
+
+(*----------------------------------------------------------------*)
+
+let rec tag_parse_exp exp =
+match exp with
+
+(*CONSTS*)
+| Number(x) -> Const(Sexpr(Number(x)))
+| Bool(x) -> Const(Sexpr(Bool(x)))
+| Char(x) -> Const(Sexpr(Char(x)))
+| String(x) -> Const(Sexpr(String(x)))
+| Pair(Symbol("quote"), Pair(x, Nil)) -> Const(Sexpr(x))
+
+(*Vars*)
+| Symbol(x) -> 
+  if (List.mem x reserved_word_list) then raise X_syntax_error else Var(x)
+
+(*CONDITIONS*)
+| Pair(Symbol("if"), Pair(test, Pair(dit, Pair(dif, Nil)))) -> If(tag_parse_exp test, tag_parse_exp dit, tag_parse_exp dif)
+| Pair(Symbol("if"), Pair(test, Pair(dit, Nil))) -> If(tag_parse_exp test, tag_parse_exp dit, Const(Void))
+
+
+(*Sequence*)
+| Pair(Symbol("begin"), cdr) ->(
+    match cdr with
+    | Nil -> Const(Void)
+    | Pair(x, Nil) -> tag_parse_exp x
+    | _ -> Seq(flat_sequence (tag_parse_list cdr)))
+
+
+(*Set*)  
+| Pair(Symbol("set!"), Pair(Symbol(x), Pair(cdr, Nil))) ->
+  Set(tag_parse_exp (Symbol(x)), tag_parse_exp cdr)
+
+(*Define*)
+| Pair(Symbol("define"), Pair(Symbol(x), Pair(cdr, Nil))) ->
+   Def(tag_parse_exp (Symbol(x)), tag_parse_exp cdr)
+
+(*Disjunctions*)
+| Pair(Symbol("or"), cdr) ->(
+    match cdr with
+    | Nil -> Const(Sexpr(Bool false))
+    | Pair(x,Nil) -> tag_parse_exp x
+    | _ -> Or(tag_parse_list cdr))
+
+
+(*Lambdas*)
+| Pair(Symbol("lambda"), Pair(args, rest)) ->(
+  let unique_args_list = unique_list_of_sexp args [] in
+  if (is_proper_list args) then 
+    (match rest with
+    | Pair(x, Nil) -> LambdaSimple(unique_args_list, tag_parse_exp x)
+    | _ ->  LambdaSimple(unique_args_list, Seq(flat_sequence (tag_parse_list rest))))                                           
+  else 
+    (match rest with
+    | Pair(x, Nil) -> LambdaOpt(unique_args_list, get_last_arg unique_args_list, tag_parse_exp x)
+    | _ -> LambdaOpt(unique_args_list, get_last_arg unique_args_list, Seq(flat_sequence (tag_parse_list rest))))
+  )
+
+
+(*-------------------------MACROS---------------------------------------*)
+
+(*MIT Define*)
+| Pair(Symbol("define"), Pair(Pair(Symbol(name), args), exprs)) ->
+      let name = tag_parse_exp (Symbol(name)) in
+      let proc = tag_parse_exp (Pair(Symbol("lambda"), Pair(args, exprs))) in
+      Def(name, proc)
+
+(*COND*)
+| Pair(Symbol("cond"), ribs) ->
+  (match ribs with
+  | Pair(Pair(Symbol "else", x),_) -> tag_parse_exp (Pair(Symbol("begin"), x))
+  | Pair(Pair(test, Pair(Symbol "=>", Pair(exprf, Nil))), rest) -> tag_parse_exp (expand_cond_2 test exprf rest )
+  | Pair(Pair(test, expr), rest) -> tag_parse_exp (expand_cond_1 test expr rest)
+  | _ ->raise X_syntax_error)
+
+(*LET*)
+| Pair(Symbol("let"), Pair(bindings, body)) ->  
+  let variables = get_let_variables bindings 1 in
+  let values = get_let_variables bindings 2 in
+  let l_body = (match body with
+                    | Pair(x,Nil) -> tag_parse_exp x
+                    | _ -> Seq(flat_sequence (tag_parse_list body))) in
+  Applic(LambdaSimple((unique_list_of_sexp variables []), l_body), (tag_parse_list values))
+
+(*LET**)
+| Pair(Symbol("let*"), Pair(bindings, body)) ->
+ (match bindings with
+ | Nil -> tag_parse_exp (Pair(Symbol("let"),Pair(bindings,body)))
+ | Pair(Pair(var,Pair(value,Nil)),Nil) -> tag_parse_exp (Pair(Symbol("let"), Pair(bindings,body)))
+ | Pair(Pair(var,Pair(value,Nil)), cdr)-> 
+    let first =  Pair(Pair(var, Pair(value, Nil)),Nil) in
+    let new_body = Pair(Pair(Symbol("let*"), Pair(cdr, body)),Nil) in
+    let new_expr = Pair(Symbol("let"),Pair(first, new_body)) in
+    tag_parse_exp new_expr
+ |_ -> raise X_syntax_error
+ )
+
+ (*LET-REC*)
+| Pair(Symbol("letrec"),Pair(bindings, body)) ->
+  (match bindings with
+  | Nil -> tag_parse_exp (Pair(Symbol("let"),Pair(bindings,body)))
+  | Pair(Pair(var, Pair(value, Nil)), cdr) -> 
+    let new_bindings = make_new_letrec_bindings bindings in
+    let new_body = make_new_letrec_body bindings body in
+    tag_parse_exp (Pair(Symbol("let"), Pair(new_bindings, new_body)))
+  | _ -> raise X_syntax_error
+  )
+
+
+(*AND*)
+| Pair(Symbol("and"), cdr) -> expand_and cdr
+
+(*QUASIQUOTE*)
+| Pair(Symbol("quasiquote"), Pair(list, Nil)) -> tag_parse_exp (expand_quasiquote list)
+
+(*PSET*)
+| Pair(Symbol("pset!"),bindings) -> tag_parse_exp (expand_pset bindings)
+
+(*APPLIC*)
+| Pair(proc, args) -> Applic(tag_parse_exp proc, tag_parse_list args)
+
+| _ -> raise X_syntax_error
+
+(*------------------------HELP FUNCTIONS-------------------------------------------------*)
+
+
+and expand_pset bindings = (
+  let new_bindings=  make_bindings_for_pset bindings in
+  let body = make_body_for_pset bindings in
+  Pair(Symbol("let"), Pair(new_bindings, body))
+)
+
+
+and expand_quasiquote list= (
+  match list with
+  | Pair(Symbol("unquote"),Pair(sexpr,Nil)) ->  sexpr
+  | Pair(Symbol("unquote-splicing"), Pair(sexpr,Nil)) -> raise X_syntax_error
+  | Nil -> Pair((Symbol("quote")), Pair(Nil, Nil))
+  | Symbol(x) -> Pair(Symbol("quote"), Pair(Symbol(x),Nil)) 
+  | Pair(a,b) ->
+    (match a with
+      | Pair(Symbol("unquote-splicing"), Pair(sexpr, Nil)) -> Pair(Symbol("append"), Pair(sexpr, Pair(expand_quasiquote b, Nil)))
+      | _ -> Pair(Symbol("cons"), Pair(expand_quasiquote a, Pair(expand_quasiquote b, Nil)))
+    )
+  | _ -> raise X_syntax_error
+)
+
+and tag_parse_list list =(
+  match list with
+  | Nil -> []
+  | Pair(x, y) -> (tag_parse_exp x)::(tag_parse_list y)
+  | _ -> raise X_syntax_error)
+
+
+and expand_and list = (
+    match list with
+    | Nil -> Const(Sexpr(Bool(true)))
+    | Pair(x,Nil) -> tag_parse_exp x
+    | Pair(x,cdr) -> If(tag_parse_exp x, expand_and cdr,Const(Sexpr(Bool(false))))
+    |_-> raise X_syntax_error
+);;
+
+
+let tag_parse_expressions sexpr = List.map tag_parse_exp sexpr;;
+
+
+let test value =
+  let sexpr_list= read_sexprs value in
+  tag_parse_expressions sexpr_list;;
 
   
 end;; (* struct Tag_Parser *)
