diff --git a/reader.ml b/reader.ml
index 32445c2..ba391e6 100644
--- a/reader.ml
+++ b/reader.ml
@@ -1,6 +1,6 @@
 
 #use "pc.ml";;
-
+open PC;;
 exception X_not_yet_implemented;;
 exception X_this_should_not_happen;;
   
@@ -29,6 +29,242 @@ let rec sexpr_eq s1 s2 =
   | Pair(car1, cdr1), Pair(car2, cdr2) -> (sexpr_eq car1 car2) && (sexpr_eq cdr1 cdr2)
   | _ -> false;;
 
+(* We copied the following functions from the practical session's materials.*)
+
+  let make_paired nt_left nt_right nt =
+    let nt = caten nt_left nt in
+    let nt = pack nt (function (_ ,e) -> e)  in
+    let nt = caten nt nt_right  in
+    let nt = pack nt (function (e, _) -> e)  in
+    nt;;
+
+  let make_spaced nt =  make_paired (star nt_whitespace)  (star nt_whitespace) nt;;
+  let tok_lparen = make_spaced  (char '(') ;;
+  let tok_rparen = make_spaced  (char ')') ;;
+
+(*end*)
+
+  let digit = range '0' '9';;
+  let natural_number = star digit;;
+
+  let digit_to_natural_val c = ((int_of_char c) - (int_of_char '0'));; 
+  let digit_to_float_val c = float_of_int (digit_to_natural_val c);; 
+  let rec gcd a b = if b = 0 then a else gcd b (a mod b);;
+
+  let char_nul = char_of_int 0 ;;  
+  let char_tab = char_of_int 9 ;;  
+  let char_newline = char_of_int 10 ;; 
+  let char_page = char_of_int 12 ;; 
+  let char_return = char_of_int 13 ;;
+  let char_spaced = char_of_int 32 ;; 
+  let char_double_quote = char_of_int 34 ;;
+  let char_quote = char_of_int 39 ;; 
+  let char_unquote = char_of_int 44 ;; 
+  let char_backslash = char_of_int 92 ;; 
+  let char_quasiquote = char_of_int 96 ;; 
+
+  let range_ci_to_lower = pack (range_ci 'a' 'z') (fun a -> lowercase_ascii a)
+  let char_no_dot = disj_list [digit; range_ci_to_lower; (one_of "!$^*-_=+<>?/:")] ;;
+  let dot = (char '.');;
+  let symbol_char = disj char_no_dot dot ;;
+  
+
+  let rec nt_expr input = 
+
+    let parse = disj_list [parse_bool;parse_char;parse_float;parse_fraction;parse_string;parse_symbol;parse_empty_list;parse_list;parse__dotted_list;parse_quote_forms] in
+    skip parse input
+  
+    and sexpr_comments input = 
+      let start = (word "#;") in
+      let nt = caten start nt_expr in
+      let nt = pack nt (fun (a,b) -> ()) in
+      nt input
+  
+    and line_comments input = 
+      let start = (char ';') in
+      let end_line = disj (pack nt_end_of_input (fun _ -> ())) (pack (char '\n') (fun _ -> ())) in
+      let nt = diff nt_any end_line in
+      let nt = caten start (star nt) in
+      let nt = pack nt (fun (a,b) -> ()) in   
+      nt input
+  
+    and parse_whitespaces input = 
+      (pack nt_whitespace (fun _ -> ())) input
+  
+  
+    and nt_skip input = 
+      let comments = disj line_comments sexpr_comments in
+      let skip = disj parse_whitespaces comments in  
+      skip input
+  
+    and skip nt input =
+      let skip_rec = star nt_skip in
+      ((make_paired skip_rec skip_rec) nt) input
+  
+
+    and parse_symbol input =
+      let nt = pack (caten symbol_char (plus symbol_char)) (fun (a,b) ->  (list_to_string (a::b))) in 
+      let char_as_str = pack char_no_dot (fun (a) -> String.make 1 a) in
+      let nt = disj nt char_as_str in
+      let nt = pack nt (fun (a)->Symbol(a)) in
+      nt input
+
+
+    and sign_of_int a = if a<0 then -1. else 1.
+
+    and parse_sign input = 
+      let minus = pack (char '-') (fun _ -> -1 ) in
+      let plus = pack (char '+') (fun _ -> 1 ) in
+      let if_sign = maybe (disj minus plus) in
+      let ret_sign = pack if_sign (function
+        None -> 1 
+        | Some(x) -> x) in
+      ret_sign input
+
+    and natural_str_to_value ls = 
+      List.fold_left (fun u x -> u*10 + (digit_to_natural_val x)) 0 ls
+
+    and float_str_to_value ls = 
+      List.fold_right (fun x u -> u/.10. +. (digit_to_float_val x)/.10.) ls 0.
+
+    and parse_natural_num str =
+      let nt = pack (plus digit) natural_str_to_value in 
+      nt str
+
+    and parse_float_num str =
+      let nt = pack (plus digit) float_str_to_value in
+      nt str
+
+    and parse_num_sign input = 
+      let nt = caten parse_sign parse_natural_num in
+      let nt = pack nt (fun (sign,number) -> (sign * number,sign)) in
+      nt input
+
+    and parse_num input = 
+      let nt = pack parse_num_sign (fun (sigend_num,sign) -> sigend_num) in
+      nt input
+
+    and parse_integer_value input = 
+      let nt = pack parse_num (fun (a) ->  (a,1)) in
+      nt input 
+    
+    
+    and parse_fraction_value input = 
+      let nt1 = caten parse_num (char '/') in
+      let nt2 = caten nt1 parse_natural_num in
+      let nt = pack nt2 (function ((a,b),c) ->  
+      let gcd_div =  (gcd a c)  in
+      let div = if gcd_div = 0 then 1 else (abs gcd_div) in
+      (a/div,c/div)) in 
+      nt input 
+    
+    and parse_float_value input = 
+      let nt1 = caten parse_num_sign (char '.') in
+      let nt2 = caten nt1 parse_float_num in
+      let nt = pack nt2 (fun (((sigend_num,sign),b),c) -> ((float_of_int sigend_num) +. c*. (float_of_int sign))) in 
+      nt input 
+
+    and parse_scientific input = 
+      let parse_fraction_as_float = pack parse_integer_value  (fun (a,b) -> (float_of_int (a/b)))  in
+      let parse_numbers = disj parse_float_value parse_fraction_as_float  in
+      let nt = caten parse_numbers (char_ci 'e') in
+      let nt = caten nt parse_num in
+      let nt = pack nt (fun ((value,b),exponent) -> value *.10.** (float_of_int exponent)) in 
+      nt input  
+
+    and parse_fraction input = 
+      let nt  =  disj parse_fraction_value parse_integer_value  in
+      let nt = not_followed_by nt symbol_char in
+      let nt  = pack nt (fun (a,b) ->  Number(Fraction(a,b))) in 
+      nt input
+    
+    
+    and parse_float input = 
+      let nt  = disj  parse_scientific parse_float_value   in
+      let nt = not_followed_by nt symbol_char in
+      let nt = pack nt (fun (a) ->  Number(Float(a))) in 
+      nt input 
+      
+     
+    and parse_bool input = 
+      let nt_t = pack (word_ci "#t") (fun x -> Bool(true)) in
+      let nt_f = pack (word_ci "#f") (fun x -> Bool(false)) in
+      let nt = disj nt_t nt_f in
+      nt input
+
+    and parse_string input = 
+        (* A special backslash must precede Meta Chars. we need to remove the extra backslash while parsing into ASTs*)
+        let nt_return = pack (word_ci "\\r") (fun _ -> char_return) in
+        let nt_newline = pack (word_ci "\\n") (fun _ -> char_newline) in
+        let nt_tab = pack (word_ci "\\t") (fun _ -> char_tab) in
+        let nt_page = pack (word_ci "\\f") (fun _ -> char_page) in
+        let nt_backslash = pack (word_ci "\\\\") (fun _ -> char_backslash) in
+        let nt_double_quote = pack (word_ci "\\\"") (fun _ -> char_double_quote) in
+        
+        let literal_chars = const (fun (ch) -> match ch with 
+            | '\"' -> false
+            | '\\' -> false
+            | _ -> true) in 
+
+        let nt_literal_chars = pack literal_chars (fun e -> e) in
+        let nt_meta_chars = disj_list [nt_return;nt_newline;nt_tab;nt_page;nt_backslash;nt_double_quote] in
+        let nt = disj nt_literal_chars nt_meta_chars in 
+        
+        (* A string must be surrounded with the double quote char*)
+        let nt = make_paired (char '\"') (char '\"') (star nt) in    
+        let nt = pack nt (fun s -> String(list_to_string s)) in 
+        nt input
+
+    and parse_char input = 
+      let nt_nul = pack (word_ci "nul") (fun _ -> char_nul) in
+      let nt_newline = pack (word_ci "newline") (fun _ -> char_newline) in
+      let nt_return = pack (word_ci "return") (fun _ -> char_return) in
+      let nt_tab = pack (word_ci "tab") (fun _ -> char_tab) in
+      let nt_page = pack (word_ci "page") (fun _ -> char_page) in
+      let nt_spaced = pack (word_ci "space") (fun _ -> char_spaced) in
+      
+      let nt_named_chars = disj_list [nt_nul;nt_newline;nt_return;nt_tab;nt_page;nt_spaced] in
+      let nt_visible_chars =  const (fun (ch) -> ch > char_spaced) in
+      let nt_chars = disj nt_named_chars nt_visible_chars in
+      let nt_char_prefix =  word_ci "#\\" in
+      let nt = caten nt_char_prefix nt_chars in
+      let nt = pack nt (fun (e,s) -> Char s) in
+      nt input
+
+    and parse_empty_list input =
+      let nt = caten (caten tok_lparen (star nt_skip)) tok_rparen  in
+      let nt = pack nt (fun _ -> Nil) in   
+      nt input
+    
+    and parse_quote_forms input =
+      let nt_quote = pack (caten (char_ci char_quote) nt_expr) (fun (_,s) -> ("quote",s)) in
+      let nt_quasiquote = pack (caten (char_ci char_quasiquote) nt_expr) (fun (_,s) -> "quasiquote",s) in
+      let nt_unquote = pack (caten (char_ci char_unquote) nt_expr) (fun (_,s) -> "unquote",s) in
+      let nt_unquote_splicing = pack (caten (word_ci ",@")  nt_expr) (fun (_,s) -> "unquote-splicing",s) in
+      let nt_quote_forms = disj_list [nt_quote;nt_quasiquote;nt_unquote;nt_unquote_splicing] in
+      let nt = pack nt_quote_forms (fun (a,s) -> Pair(Symbol(a),Pair(s,Nil))) in
+      nt input
+
+
+    and parse_list input =
+      let nt = caten (caten tok_lparen (star nt_expr)) tok_rparen in
+      let nt = pack nt (fun ((l,exp_list),r) -> List.fold_right (fun a b -> Pair(a,b)) exp_list Nil ) in
+      nt input
+
+    and parse__dotted_list input =
+      let nt = pack (caten tok_lparen (plus nt_expr)) (fun (l,exp) -> exp) in
+      let nt = pack (caten nt (char '.')) (fun (exp1,dot) -> exp1) in
+      let nt = pack (caten nt  nt_expr) (fun (exp1,exp2) -> (exp1,exp2)) in
+      let nt = pack (caten nt tok_rparen) (fun ((exp1,exp2),r) -> (exp1,exp2)) in
+      let nt = pack nt (fun (exp1,exp2) -> List.fold_right (fun a b -> Pair(a,b)) exp1 exp2) in
+      nt input
+
+let rec sexprs_runner lst =
+  if lst = [] then []
+  else 
+    let (e,s) = nt_expr lst in
+    e :: (sexprs_runner s);;
+
 module Reader: sig
   val read_sexprs : string -> sexpr list
 end
@@ -41,6 +277,9 @@ let normalize_scheme_symbol str =
   else Printf.sprintf "|%s|" str;;
 
 
-let read_sexprs string = raise X_not_yet_implemented;;
-  
+
+let read_sexprs string =  
+  sexprs_runner (string_to_list string);;
+
+
 end;; (* struct Reader *)
diff --git a/readme.txt b/readme.txt
index e69de29..f220b00 100644
--- a/readme.txt
+++ b/readme.txt
@@ -0,0 +1,2 @@
+Yishay Nadav ID 312419328 AND Yana Orhov ID 321112591
+We assert that the work we submitted is 100% our own. We have not received anypart from any other student in the class, nor have we give parts of it for use to others.Nor have we used code from other sources: Courses taught previously at this university,courses taught at other universities, various bits of code found on the Internet, etc.We realize that should our code be found to contain code from other sources, that aformal case shall be opened against us withva’adat mishma’at, in pursuit of disciplinary action.
diff --git a/semantic-analyser.ml b/semantic-analyser.ml
index 914a630..5edbd35 100644
--- a/semantic-analyser.ml
+++ b/semantic-analyser.ml
@@ -61,14 +61,165 @@ end;;
 
 module Semantics : SEMANTICS = struct
 
-let annotate_lexical_addresses e = raise X_not_yet_implemented;;
+let seq_id = ref 0 ;;
+let next_seq_id() = let v= !seq_id in
+  (seq_id:= v+1 ; !seq_id);;
+let init_seq_id() = (seq_id:= 0 ; !seq_id);;
 
-let annotate_tail_calls e = raise X_not_yet_implemented;;
+let lamb_id = ref 1 ;;
+let next_lamb_id() = let v= !lamb_id in
+  (lamb_id:= v+1 ; !lamb_id);;
+let init_lamb_id() = (lamb_id:= 1 ; !lamb_id);;
 
-let box_set e = raise X_not_yet_implemented;;
+
+let get_var_idx lst v =
+  let rec get_idx lst v =
+    match lst with 
+    | [] -> raise X_no_match
+    | hd :: tl -> if v = hd then 0 else 1 + (get_idx tl v)  in
+  (get_idx lst v) 
+
+
+let rec annotate_lexical bound_lst param_lst expr =
+  let make_expr' =  annotate_lexical bound_lst param_lst in
+  let make_var'  = make_var_lexical bound_lst param_lst in
+    match expr with 
+    | Const(s)->Const'(s)
+    | Var(v)->Var'(make_var' v)
+    | If(test,dit,dif)-> If'((make_expr' test),(make_expr' dit),(make_expr' dif))
+    | Seq(sexprs) -> Seq'(List.map make_expr' sexprs)
+    | Set(Var(v),value)-> Set'((make_var' v),(make_expr' value)) 
+    | Def(Var(v),value)->Def'((make_var' v),(make_expr' value))
+    | Or(sexprs) ->Or'(List.map make_expr' sexprs)
+    | Applic(first,sexprs) -> Applic' ((make_expr' first),(List.map make_expr' sexprs))
+    | LambdaSimple (args,body)-> LambdaSimple'(args, annotate_lexical (args::bound_lst) args body)
+    | LambdaOpt(args,opt,body)-> LambdaOpt'(args,opt, annotate_lexical ((args@[opt])::bound_lst) (args@[opt]) body) 
+    | _ -> raise X_syntax_error 
+
+
+  and make_var_lexical bound_lst param_lst v =
+    try VarParam(v,get_var_idx param_lst v)
+    with X_no_match ->  
+    try let (major,minor) = get_lst_idx (List.tl bound_lst) v in  VarBound(v,major,minor)
+    with _ ->  VarFree(v)
+
+
+  and get_lst_idx lists v =
+    let rec get_idx lists v =
+      match lists with 
+      | [] -> raise X_no_match
+      | hd :: tl -> if List.mem v hd then (0,get_var_idx hd v) else (let (major,minor) = get_idx tl v in (1+ major, minor)) in
+      (get_idx lists v)
+
+
+let rec annotate_tail tp expr=
+  match expr with 
+    | Set'(v,value)-> Set'(v, annotate_tail false value)
+    | Def'(v,value)-> Def'(v, annotate_tail false value)
+    | Or'(sexprs) ->Or'(annotate_tail_rest tp sexprs)
+    | Seq'(sexprs) -> Seq'(annotate_tail_rest tp sexprs)
+    | Applic'(first,sexprs) when tp = true -> ApplicTP'(annotate_tail false first, List.map (annotate_tail false) sexprs)
+    | Applic'(first,sexprs) when tp = false -> Applic'(annotate_tail false first, List.map (annotate_tail false) sexprs) 
+    | If'(test,dit,dif)-> If'((annotate_tail false test) ,(annotate_tail tp dit),(annotate_tail tp dif))
+    | LambdaSimple' (args,body)-> LambdaSimple'(args, annotate_tail true body)
+    | LambdaOpt'(args,opt,body)-> LambdaOpt'(args, opt, annotate_tail true body)
+    | _ -> expr
+  
+  and annotate_tail_rest tp sexprs =  
+    let rev_lst =  (List.rev sexprs) in
+    (List.map (annotate_tail false) (List.rev (List.tl rev_lst)))@[(annotate_tail tp (List.hd rev_lst))]
+  
+
+let rec set_boxes vars expr  =
+  let set_box_rec = set_boxes vars in  
+  match expr with 
+    | Or'(sexprs) ->Or'(List.map set_box_rec  sexprs)
+    | Seq'(sexprs) -> Seq'(List.map set_box_rec  sexprs)
+    | Applic'(first,sexprs) -> Applic'(set_box_rec first, List.map set_box_rec  sexprs)
+    | ApplicTP'(first,sexprs) -> ApplicTP'(set_box_rec first, List.map set_box_rec  sexprs)
+    | If'(test,dit,dif)-> If'((set_box_rec  test) ,(set_box_rec dit),(set_box_rec dif)) 
+    | Var'(v) when List.mem v vars -> BoxGet'(v) 
+    | Set'(v,value)->  if List.mem v vars then BoxSet'(v, set_box_rec value) else Set'(v , set_box_rec value)
+    | Def'(v,value)->  if List.mem v vars then BoxSet'(v, set_box_rec value) else Def'(v , set_box_rec value)
+    | LambdaSimple' (args,body)->  set_boxes_lambda args [] body vars 
+    | LambdaOpt'(args,opt,body)-> set_boxes_lambda args [opt] body vars 
+    | _ -> expr
+
+  and map_flat f lst = List.flatten (List.map f lst)
+
+  and read_write e lst lamb_id seq_id body = 
+    let read_write_rec =  read_write e lst lamb_id seq_id  in 
+    let read_write_rec_lambda _lamb_id = read_write e lst _lamb_id seq_id in 
+     match body with
+      | Var'(VarBound(v,major,minor)) when v = e  -> lst@[("r",lamb_id,seq_id,(-1))]
+      | Var'(VarParam (v,mn)) when v = e  -> lst@[("r",lamb_id,seq_id,(-1))]
+      | If'(test,dit,dif)-> lst@(map_flat read_write_rec [test;dit;dif]) 
+      | Seq'(sexprs) -> let _seq_id = next_seq_id() in lst@(List.map (fun (a,b,c,d) -> (a,b,c,(b-lamb_id))) (map_flat (read_write e lst lamb_id _seq_id) sexprs))  
+      | Set'(v, value) -> lst@(read_write_rec value)@(check_write_var v e lamb_id seq_id)
+      | Def'(v, value) -> lst@(read_write_rec value)@(check_write_var v e lamb_id seq_id)
+      | Or'(sexprs) -> lst@(map_flat read_write_rec sexprs)
+      | Applic'(first,sexprs) ->  lst@(map_flat read_write_rec (first::sexprs)) 
+      | ApplicTP'(first,sexprs) ->  lst@(map_flat read_write_rec (first::sexprs)) 
+      | LambdaSimple'(args,body) ->   if (List.mem e args) then lst else let _lamb_id = next_lamb_id() in  lst@((read_write_rec_lambda _lamb_id) body)
+      | LambdaOpt'(args,opt,body) ->   if (List.mem e args) then lst else let _lamb_id = next_lamb_id() in lst@((read_write_rec_lambda _lamb_id) body)
+      | _ -> lst
+
+
+    and find_occur lst (t,lamb_id,seq_id,rel_depth_seq) =
+    let rec find lst =
+      match lst with 
+      | [] -> false 
+      | ((t_curr,lamb_id_curr,seq_id_curr,rel_depth_seq_curr)::tl) when ((t_curr = t) && (rel_depth_seq_curr!= 0) && (rel_depth_seq = 0) && (seq_id_curr = seq_id)) ->  false || (find (List.tl lst)) 
+      | ((t_curr,lamb_id_curr,seq_id_curr,rel_depth_seq_curr)::tl) when ((t_curr = t) && (lamb_id_curr != lamb_id)) ->  true
+      |_ -> (find (List.tl lst)) in
+    (find lst)
+
+    and get_rw_value lst = 
+    let rec get_rw lst =
+      match lst with 
+      | [] -> false
+      | ((t,lamb_id,seq_id,rel_depth_seq)::tl) when t = "r" -> (find_occur tl ("w",lamb_id,seq_id,rel_depth_seq)) || (get_rw tl)
+      | ((t,lamb_id,seq_id,rel_depth_seq)::tl) when t = "w" -> (find_occur tl ("r",lamb_id,seq_id,rel_depth_seq)) || (get_rw tl) 
+      |_ -> raise X_syntax_error in
+    (get_rw lst)
+
+  and check_write_var v e lamb_id seq_id=
+    match v with 
+      | VarFree (v) when (v = e) -> [("w",lamb_id,seq_id, (-1))]
+      | VarParam (v,mn) when (v = e) -> [("w",lamb_id,seq_id, (-1))]
+      | VarBound (v,major,minor) when (v = e) -> [("w",lamb_id,seq_id,(-1))]
+      |_ -> []
+
+  and seq_flat expr' =  
+      match expr' with
+      | Seq'(a) -> a
+      | _ ->  [expr']
+  
+  and update_dist v =
+    match v with 
+    |  VarParam(v, idx) -> VarBound(v,0,idx)
+    |  VarBound(v,major,minor) -> VarBound(v,major+1,minor)
+    | _ ->  v
+
+  and set_boxes_lambda args opt body vars  = 
+    let m_args = args@opt in
+    let set_rw e = let _lamb_id = init_lamb_id() in let _seq_id = init_seq_id() in (e,  get_rw_value (read_write e [] _lamb_id _seq_id body)) in
+    let args' = List.map (fun (e,b) -> e) (List.filter (fun (e,rw) -> rw) (List.map set_rw m_args)) in
+    let params_lst = if m_args = [] then [] else List.map (fun v ->  VarParam (v,get_var_idx m_args v)) args' in
+    let vars = params_lst@(List.map update_dist vars) in
+    let body_lst =  List.flatten (List.map seq_flat ((List.map (fun v -> Set'(v,Box'(v))) params_lst)@[set_boxes vars body])) in
+    let body = if List.length body_lst = 1 then  (List.hd body_lst) else Seq'(body_lst) in
+    if opt = [] then  LambdaSimple' (args, body) else LambdaOpt'(args, (List.hd opt), body)
+
+
+let annotate_lexical_addresses e = annotate_lexical [] [] e;;
+
+let annotate_tail_calls e = annotate_tail false e ;;
+
+let box_set e =  set_boxes [] e;;
 
 let run_semantics expr =
-  box_set
+  box_set 
     (annotate_tail_calls
        (annotate_lexical_addresses expr));;
   
diff --git a/tag-parser.ml b/tag-parser.ml
index 138249e..f76a24c 100644
--- a/tag-parser.ml
+++ b/tag-parser.ml
@@ -1,5 +1,5 @@
 #use "reader.ml";;
-
+open PC;;
 type constant =
   | Sexpr of sexpr
   | Void
@@ -58,8 +58,283 @@ let reserved_word_list =
 
 (* work on the tag parser starts here *)
 
-let tag_parse_expressions sexpr = raise X_not_yet_implemented;;
+let rec tag_parse sexp =
+  match sexp with 
+  | Bool(exp) -> Const(Sexpr(sexp))
+  | Char(exp) -> Const(Sexpr(sexp))
+  | Number(exp) -> Const(Sexpr(sexp))
+  | String(exp) -> Const(Sexpr(sexp))
+  | Symbol(sexp) -> Var((unreserved_word sexp)) 
+  | Pair(Symbol("quote"),Pair(sexp,Nil)) -> Const(Sexpr(sexp))
+  | Pair(Symbol("unquote"),Pair(sexp,Nil)) -> Const(Sexpr(sexp))
+  | Pair(Symbol("if"),Pair(test,Pair(dit,Pair(dif,Nil)))) -> If(tag_parse test,tag_parse dit,tag_parse dif)
+  | Pair(Symbol("if"),Pair(test,Pair(dit,Nil))) -> If(tag_parse test,tag_parse dit,Const(Void))
+  | Pair(Symbol("cond"),ribs) -> tag_parse (cond_macro_expand ribs)
+  | Pair(Symbol("lambda"),Pair(Nil,body)) -> LambdaSimple([], tag_parse_implicit body)
+  | Pair(Symbol("lambda"),Pair(args,body)) -> (parse_tag_lambda args body) 
+  | Pair(Symbol("or"),Nil) -> Const(Sexpr(Bool(false)))
+  | Pair(Symbol("or"),Pair(exp,Nil)) -> (tag_parse exp)
+  | Pair(Symbol("or"),sexps) -> Or(str_to_sexps_list sexps)
+  | Pair(Symbol("define"),Pair(Symbol(name),Pair(body,Nil))) -> Def(Var(unreserved_word(name)), tag_parse body)
+  | Pair(Symbol("define"),Pair(Pair(name,argl),exprs)) -> tag_parse (Pair(Symbol("define"),Pair(name,Pair(Pair(Symbol("lambda"),Pair(argl,exprs)),Nil))))
+  | Pair(Symbol("set!"),Pair(Symbol(name),Pair(body,Nil))) -> Set(Var(unreserved_word(name)), tag_parse body)
+  | Pair(Symbol("begin"),Nil) -> Const(Void)
+  | Pair(Symbol("begin"),Pair(exp,Nil)) -> (tag_parse exp)
+  | Pair(Symbol("begin"),sexps) -> Seq(str_to_sexps_flatten_list sexps)
+  | Pair(Symbol("let"), Pair(bindings,sexps)) -> tag_parse (let_macro_expand bindings sexps )
+  | Pair(Symbol("let*"),Pair(Nil,sexps)) -> (tag_parse (Pair(Symbol("let"), Pair(Nil,sexps)))) 
+  | Pair(Symbol("let*"),Pair(Pair(bindings,Nil),sexps)) -> (tag_parse (Pair(Symbol("let"), Pair(Pair(bindings,Nil) ,sexps))))    
+  | Pair(Symbol("let*"),Pair(bindings,sexps)) -> (tag_parse (let_klenee_macro_expand bindings sexps))
+  | Pair(Symbol("letrec"), Pair(bindings,sexps)) -> tag_parse (letrec_macro_expand bindings sexps)
+  | Pair(Symbol("quasiquote"),Pair(sexp,Nil)) -> tag_parse (quasiquote_macro_expand sexp)
+  | Pair(Symbol("and"),Nil) -> Const(Sexpr(Bool(true)))
+  | Pair(Symbol("and"),Pair(exp,Nil)) -> tag_parse exp
+  | Pair(Symbol("and"),exp) -> tag_parse (and_macro_expand exp)
+  | Pair(Symbol("pset!"),exps) -> tag_parse (pset_macro_expand exps)
+  | Pair(first,rest) -> Applic( tag_parse first, str_to_sexps_list rest)
+  | _ -> raise (X_syntax_error)
+
+  (*Go through Pairs and activate parse on each var while creating a list*)
+  and split_sexps_list parser sexps = 
+  let rec split sexps= 
+    match sexps with
+    | Pair(x,Nil) -> (parser x)
+    | Pair(x,y) -> List.append (parser x) (split y)
+    | Nil -> []
+    | _ -> raise (X_no_match) in
+  (split sexps)
+
+
+  and parse_tag_seq expr =  
+    let x = tag_parse expr in
+      match x with
+      | Seq(a) -> a
+      | _ ->  [x]
+
+
+  and parse_tag_lambda args body =
+  match args with
+  | Symbol(args) -> LambdaOpt([],args,tag_parse_implicit body)
+  | _ -> (
+    let parsed_args =  parse_args args in
+    let body = tag_parse_implicit body in
+    if (is_proper_args args) 
+    then LambdaSimple(parsed_args, body) 
+    else LambdaOpt((args_without_opt parsed_args),(opt_var parsed_args),body))
+
+(*Helper checks for lambda*)
+
+and parse_valid_arg sexps =
+  let rec split sexps = 
+    match sexps with
+    | Pair(Symbol(x),Nil) -> [x]
+    | Pair(Symbol(x),Symbol(y)) -> [x;y]
+    | Pair(Symbol(x),y) -> List.append [x] (split y)
+    | Nil -> []
+    | _ -> raise (X_no_match) in
+    let lst = (split sexps) in
+    if (duplicates_exists lst) then raise (X_no_match) else lst
+
+
+
+and is_proper_args s = 
+  let rec is_proper s =
+    match s with 
+    | Pair(x,Nil) -> true
+    | Pair(x,y) ->  (is_proper y)
+    | _ -> false in
+  (is_proper s)
+
+  and opt_var lst = (List.hd (List.rev lst))
+  and args_without_opt lst = (List.rev (List.tl (List.rev lst))) 
+
+  
+
+  and parse_tag_list expr =  [tag_parse expr] 
+  and str_to_sexps_list sexps = (split_sexps_list parse_tag_list sexps)
+  and str_to_sexps_flatten_list sexps = (split_sexps_list parse_tag_seq sexps)
+  and parse_args sexps = (parse_valid_arg sexps)
+
+ 
+
+  and duplicates_exists lst =
+    let rec contains  = function 
+      | []  -> false
+      | hd::t1 -> List.exists ( (=) hd) t1 || contains t1 in
+    (contains lst)
+
+
+  and unreserved_word word = if (List.mem word reserved_word_list) then raise(X_syntax_error) else word 
+  and unreserved_string str = (List.map unreserved_word str)  
+
+
+  and tag_parse_implicit sexp = 
+    match sexp with
+    | Pair(x,Nil) -> (tag_parse x)
+    | Pair(x,y) -> Seq(str_to_sexps_flatten_list sexp )
+    | _ -> raise (X_no_match)   (* need to think about it!*)
+
+
+  
+  and get_bindings_ref  bindings = 
+    let rec split bindings = 
+      match bindings with
+      | Pair (Pair(Symbol(x),Pair(y,Nil)), s) -> Pair(Symbol(unreserved_word x),(split s))      
+      | Nil -> Nil
+      | _ -> raise (X_no_match) in
+    (split bindings)
+  
+  
+  and get_bindings_values bindings = 
+    let rec split bindings = 
+      match bindings with
+      | Pair(Pair(Symbol(x),Pair(y,Nil)), s) -> Pair(y,(split s))      
+      | Nil -> Nil
+      | _ -> raise (X_no_match) in
+    (split bindings)
+    
+  
+  and let_macro_expand bindings sexps = 
+    let bindings_ref =  get_bindings_ref bindings in
+    let bindings_values =  get_bindings_values bindings in
+    Pair(Pair(Symbol("lambda"),Pair(bindings_ref,sexps)),bindings_values)
+
+
+  and let_klenee_macro_expand bindings sexps = 
+      match bindings with
+      | Pair(first,rest)  ->  
+        Pair(Symbol("let"), Pair(Pair(first,Nil), Pair(Pair(Symbol("let*"),Pair(rest,sexps)), Nil)))     
+      | _ -> raise (X_no_match)           
+ 
+  and get_new_bindings  sexps = 
+    let rec split sexps= 
+      match sexps with
+      | Pair(Pair(Symbol(x),y), s) -> x::(split s)   
+      | Nil -> []
+      | _ -> raise (X_no_match) in
+    (split sexps)
+
+  and make_bindings  lst  = 
+    let rec split lst = 
+      match lst with
+      | (x :: s) -> Pair(Symbol(x), split s)
+      | [] -> Nil in 
+    (split lst)
+  
+  and make_uniqe_args lst =
+    let rec get_uniqe_dollar hd n_lst = 
+      let n_hd = "$"^hd in
+      if ((List.mem n_hd n_lst) || (List.mem n_hd lst ))  then (get_uniqe_dollar n_hd n_lst) else  n_hd:: n_lst in
+    (List.fold_right (fun a acc -> (get_uniqe_dollar a acc )) lst [] )
+    
+  and get_new_body lst_old lst_new = 
+    let rec split lst_old lst_new = 
+      match lst_old with
+      | (x :: s) -> Pair(Pair(Symbol("set!"),Pair(Symbol(x),Pair(Symbol(List.hd lst_new),Nil))),split s (List.tl lst_new))
+      | [] -> Nil in
+    (split lst_old lst_new)
+  
+  and pset_macro_expand sexps = 
+    let bindings_ref =  get_new_bindings sexps in
+    let uniqe_args =  (make_uniqe_args bindings_ref) in
+    let args = make_bindings uniqe_args in
+    let body = get_new_body bindings_ref uniqe_args in    
+    let values = get_bindings_values sexps in 
+    Pair(Pair(Symbol("lambda"),Pair(args, body)),values)
+ 
+ 
+
+   
+
+
+    
+    
+  and split_sexps_pairs parser sexps = 
+    let rec split sexps= 
+      match sexps with
+      | Pair(x,y) -> Pair((parser x),split y)
+      | Nil -> Nil
+      | _ -> raise (X_no_match) in
+    (split sexps)
+
+  
+  and get_bindings_with_set bindings sexp = 
+    let rec split bindings sexp = 
+      match bindings with
+      | Pair(Pair(x,y), s) -> Pair(Pair(Symbol("set!"), Pair(x,y)) ,(split s sexp))
+      | Nil -> Pair(Pair(Symbol("let"),Pair(Nil,sexp)),Nil)
+      | _ -> raise (X_no_match) in
+    (split bindings sexp)
+
+
+
+  and letrec_macro_expand bindings sexps = 
+    let bindings_ref =  get_bindings_ref bindings in
+    let quasi_w  x = Pair(x ,Pair(Pair(Symbol("quote"),Pair(Symbol("whatever"),Nil)),Nil)) in
+    let first = (split_sexps_pairs quasi_w bindings_ref) in
+    let second = get_bindings_with_set bindings sexps in
+    Pair(Symbol("let"),Pair(first, second))
+
+
+  and and_macro_expand exp = 
+    let rec tag_parse_and exp = 
+      match exp with 
+      | Pair(exp,Pair(rest,Nil)) -> 
+            Pair(Symbol("if"),
+              Pair(exp,
+                Pair(rest,
+                  Pair(Bool(false),Nil))))
+      | Pair(exp,rest) ->
+            Pair(Symbol("if"),
+              Pair(exp,
+                Pair(and_macro_expand rest,
+                  Pair(Bool(false),Nil))))
+      | _ -> raise X_syntax_error in
+    (tag_parse_and exp)
+  
+
+
+
+  and cond_macro_expand ribs = 
+  match ribs with 
+  | Pair(Pair(exp,Pair(Symbol("=>"),Pair(rest,Nil))),Nil) -> 
+      Pair(Symbol("let"),Pair(Pair(Pair(Symbol("value"),Pair(exp,Nil)),
+      Pair(Pair(Symbol("f"),Pair(Pair(Symbol("lambda"),Pair(Nil,Pair(rest,Nil))),Nil)),Nil)),
+      Pair(Pair(Symbol("if"),Pair(Symbol("value"),Pair(Pair(Pair(Symbol("f"),Nil),
+      Pair(Symbol("value"),Nil)),Nil))),Nil)))
+  | Pair(Pair(exp,Pair(Symbol("=>"),exprf)),rest) ->
+      Pair(Symbol("let"),Pair(Pair(Pair(Symbol("value"),Pair(exp,Nil)),
+      Pair(Pair(Symbol("f"),Pair(Pair(Symbol("lambda"),Pair(Nil,exprf)),Nil)),
+      Pair(Pair(Symbol("rest"),Pair(Pair(Symbol("lambda"),Pair(Nil,Pair(cond_macro_expand rest,Nil))),Nil)),Nil))),
+      Pair(Pair(Symbol("if"),Pair(Symbol("value"),Pair(Pair(Pair(Symbol("f"),Nil),Pair(Symbol("value"),Nil)),
+      Pair(Pair(Symbol("rest"),Nil),Nil)))),Nil)))
+  | Pair(Pair(Symbol("else"),rest),_) -> Pair(Symbol("begin"),rest)
+  | Pair(Pair(rib,body),Nil) -> Pair(Symbol("if"),Pair(rib,Pair(Pair(Symbol("begin"),body),Nil)))
+  | Pair(Pair(rib,body),rest) -> Pair(Symbol("if"),Pair(rib,Pair(Pair(Symbol("begin"),body),Pair((cond_macro_expand rest),Nil))))
+  | _ -> raise X_syntax_error  
+
+
+
+and quasiquote_macro_expand sexp = 
+  match sexp with
+  | Pair(Symbol("unquote"),Pair(sexp,Nil)) -> sexp
+  | Pair(Symbol("unquote-splicing"),Pair(sexp,Nil)) -> raise X_syntax_error
+  | Nil -> Pair(Symbol("quote"),Pair(sexp,Nil)) 
+  | Symbol(exp) -> Pair(Symbol("quote"),Pair(sexp,Nil)) 
+  | Pair(car,cdr) -> (match (car,cdr) with
+    | (Pair(Symbol("unquote-splicing"),Pair(car,_)),cdr) -> Pair(Symbol("append"),Pair(car,Pair(quasiquote_macro_expand cdr,Nil)))
+    | (car,Pair(Symbol("unquote-splicing"),Pair(cdr,_))) -> Pair(Symbol("cons"),Pair(quasiquote_macro_expand car,Pair(cdr,Nil)))
+    | _ -> Pair(Symbol("cons"),Pair(quasiquote_macro_expand car,Pair(quasiquote_macro_expand cdr,Nil))))
+  | _ -> raise X_syntax_error
+
+
+
+
+let tag_parse_expressions sexpr = List.map tag_parse sexpr;;
+
 
   
 end;; (* struct Tag_Parser *)
 
+
+
