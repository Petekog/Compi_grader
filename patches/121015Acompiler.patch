diff --git a/reader.ml b/reader.ml
index 32445c2..db4ae12 100644
--- a/reader.ml
+++ b/reader.ml
@@ -1,6 +1,6 @@
 
 #use "pc.ml";;
-
+open PC;;
 exception X_not_yet_implemented;;
 exception X_this_should_not_happen;;
   
@@ -40,7 +40,258 @@ let normalize_scheme_symbol str =
 	s) then str
   else Printf.sprintf "|%s|" str;;
 
+  
+(* Mathematical functions *)
+let rec gcd a b =
+  (match a>=b with
+  |true ->
+    (match b with
+    | 0-> a
+    | any-> gcd b (a mod b))
+  |false ->
+    gcd b a);;
+  
+let abs x =
+  match x>0 with
+  |true-> x
+  |false-> -x;;
+
+(* Parsers *)
+
+let nt_skip nt = pack nt (fun(_)->[]);;
+let nt_notchar ch = const (fun(c)->c!=ch);;
+
+(* Whitespaces *)
+let nt_skipwhitespaces = nt_skip nt_whitespace;;
+
+(* Comments *)
+let nt_semicolon = char ';';;
+let nt_endlinecomment = disj (char '\n') (pack nt_end_of_input (fun(_)->'\n'));;
+let nt_skiplinecomment = nt_skip (caten_list [nt_skip nt_semicolon; nt_skip (star (nt_notchar '\n')); nt_skip nt_endlinecomment]);;
+
+
+(* Symbols *)
+let nt_digit_char = range '0' '9';;
+let nt_lowercase_letter = range 'a' 'z';;
+let nt_uppercase_letter = pack (range 'A' 'Z') (fun ch -> (lowercase_ascii ch ));;
+let nt_mathsign = one_of "+-";;
+let nt_slashsign = char '/';;
+let nt_punctuation = one_of "!$^*_=<>?/:+-";;
+
+let nt_symbolcharnodot = disj_list [nt_digit_char; nt_lowercase_letter; nt_uppercase_letter; nt_punctuation];;
+let nt_dot_char = char '.';;
+let listed_char nt_ch = pack nt_ch (fun(s)->[s]);;
+let nt_symbolchar = disj nt_dot_char nt_symbolcharnodot;;
+let nt_symbol = 
+  let sc_psc= (caten nt_symbolchar (plus nt_symbolchar)) in
+  let packed_sc_psc = pack sc_psc (function(hd,tl)->List.concat [[hd]; tl]) in
+  disj packed_sc_psc (listed_char nt_symbolcharnodot);;
+
+let cr_symbol = 
+  pack nt_symbol (function(s)->Symbol(list_to_string s));;
+
+(* Numbers *)
+let nt_natural = plus nt_digit_char;;
+let nt_integer = caten (maybe nt_mathsign) nt_natural;;
+let nt_float = caten_list [nt_natural; (listed_char nt_dot_char) ; nt_natural];;
+let nt_fraction = caten_list [nt_natural ; (listed_char nt_slashsign) ;nt_natural];;
+
+let _integer_ = pack nt_integer (function(sign,n)-> match sign with
+                                  | Some '-'-> -1*int_of_string (list_to_string n)
+                                  | any -> int_of_string (list_to_string n));;
+
+let _float_ = pack (caten (maybe nt_mathsign) nt_float) (function(sign,f)-> match sign with
+| Some '-'-> -1.0*.float_of_string (list_to_string (List.concat f))
+| any -> float_of_string (list_to_string (List.concat f)));;
+     
+let _fraction_ = pack (caten (maybe nt_mathsign) nt_fraction) (function(sign,f)-> match sign with
+| Some '-'-> (match f with
+              | n::s::m-> (-1*(int_of_string (list_to_string n)),'/',int_of_string (list_to_string (List.flatten m)))
+              | any-> raise X_this_should_not_happen
+              ) 
+| any -> (match f with
+              | n::s::m-> (int_of_string (list_to_string n),'/',int_of_string (list_to_string (List.flatten m)))
+              | any-> raise X_this_should_not_happen
+              ));;
+
+let _exp_num_ = caten (disj _float_ (pack _integer_ (fun(i)->float_of_int i))) (caten (char_ci 'e') _integer_);;
+
+let rec exp= function(f,i)->
+  if(i=0)
+  then
+    f 
+  else 
+    if(i<0)
+    then
+      exp(f/.10.0,i+1)
+    else
+      exp(f*.10.0,i-1);;
+
+let cr_number =function(n)->
+  try let ((i,_,m),rest)=(_fraction_ n) in
+    (Number(Fraction(i/(gcd (abs i) m),m/(gcd (abs i) m))),rest)
+  with PC.X_no_match ->
+    try let ((f,(e,i)),rest)=(_exp_num_ n) in
+      (Number(Float(exp(f,i))),rest)
+    with PC.X_no_match->
+      try let (f,rest)=(_float_ n) in
+        (Number(Float(f)),rest)
+      with PC.X_no_match->
+        let (i,rest)= (_integer_ n) in
+        (Number(Fraction(i,1)),rest);;
+      
+        
+
+(* Char *)
+let nt_charprefix = word "#\\";;
+let nt_simplechar = const (fun(ch)-> ch>' ');;
+let nt_namedchar = disj_list [pack (word_ci "nul") (fun(_)->char_of_int 0); 
+                              pack (word_ci "newline") (fun(_)->char_of_int 10);
+                              pack (word_ci "return") (fun(_)->char_of_int 13);
+                              pack (word_ci "tab") (fun(_)->char_of_int 9);
+                              pack (word_ci "page") (fun(_)->char_of_int 12);
+                              pack (word_ci "space") (fun(_)->char_of_int 32)];;
+
+let nt_char = caten nt_charprefix (disj nt_namedchar nt_simplechar);;
+let cr_char = pack nt_char (function(pre,ch)-> Char(ch));;
+
+(* Boolean *)
+let nt_hashtag = char '#';;
+let nt_bool = caten nt_hashtag (one_of_ci "ft");;
+
+let cr_boolean =
+  pack nt_bool (function(hash,b_val)-> match b_val with
+                | 't'->Bool(true)
+                | 'T'->Bool(true)
+                | 'f'->Bool(false)
+                | 'F'->Bool(false)
+                | any-> raise PC.X_no_match);;
+
+(* String *)
 
-let read_sexprs string = raise X_not_yet_implemented;;
+let nt_stringmetachar= 
+  let nt_bs= pack (word "\\\\") (fun(_)->'\\') in
+  let nt_dq=   pack (word "\\\"") (fun(_)->'\"') in
+  let nt_tab=  pack (word "\\t") (fun(_)->'\t') in
+  let nt_nl=   pack (word "\\n") (fun(_)->'\n') in
+  let nt_page= pack (word "\\f") (fun(_)->'\012') in
+  let nt_ret=  pack (word "\\r") (fun(_)->'\r') in
+  disj_list [nt_bs;nt_dq;nt_tab;nt_nl;nt_page;nt_ret];;
+ 
+let nt_stringliteralchar = (pack (pack (nt_notchar '\\') (fun(ch)->(nt_notchar '\"') [ch])) (fun(ch,l)->ch));;
+let nt_stringchar = disj nt_stringliteralchar nt_stringmetachar;;
+
+(* fold left           fold right
+   f(f(f(x,y)),z) ,    f(x,f(y,f(z))) *)
+
+let nt_doublequotes = char '\"';;
+let nt_string = caten_list [listed_char nt_doublequotes; star nt_stringchar ;listed_char nt_doublequotes];;
+
+let cr_string = pack nt_string (function(sl)-> match sl with 
+| _::s::_-> String(list_to_string s)
+| any-> raise PC.X_no_match
+);;
+let nt_lparen = char '(';;
+let nt_rparen = char ')';;
+(* 
+let cdr nt = pack nt (function(head,tail)->tail);;
+let car nt= pack nt (function(head,tail)->head);; *)
+let make_nil nt = pack nt (function(_)->Nil);;
+
+let rec cr_sexp str=
+  let skip_before nt= 
+    pack (caten _skips_ nt) (function(_,x)->x) in
+  let cfg = (disj_list
+                            [not_followed_by (skip_before cr_boolean) nt_symbolchar;
+                             skip_before cr_char;
+                             not_followed_by (skip_before cr_number) nt_symbolchar;
+                             not_followed_by (skip_before cr_string) nt_symbolchar;
+                             not_followed_by (skip_before cr_symbol) nt_symbolchar; 
+                             not_followed_by (skip_before cr_list) nt_symbolchar;
+                             not_followed_by (skip_before cr_dottedlist) nt_symbolchar;
+                             not_followed_by (skip_before cr_quoted) nt_symbolchar;
+                             not_followed_by (skip_before cr_quasiquoted) nt_symbolchar;
+                             not_followed_by (skip_before cr_unquoted) nt_symbolchar;
+                             not_followed_by (skip_before cr_unquotedspliced) nt_symbolchar
+                             
+                             ])  in
+  cfg str
+
+(* Skips (Whitespaces and Comments) *)
+and nt_skipsexpcomment str = 
+    let skip_before nt= 
+      pack (caten _skips_ nt) (function(_,x)->x) in
+    let nt_skipsexp = nt_skip cr_sexp in
+    let nt_sexpcommentinitial = word "#;" in
+    let nt_sexpcomment = caten nt_sexpcommentinitial (disj (nt_skip (skip_before nt_end_of_input)) nt_skipsexp) in
+    (nt_skip nt_sexpcomment) str
+and _skips_ str =
+  let nt_allskips = star (disj_list [nt_skipwhitespaces; nt_skiplinecomment; nt_skipsexpcomment]) in
+  nt_allskips str
+
+
+(* Quotes *)
+and quoted _name_ _word_ str = 
+  let nt_quoted = (caten (word _word_) cr_sexp) in
+  let packed_quoted = pack nt_quoted (fun(c,sexp)->Pair(Symbol(_name_),Pair(sexp,Nil))) in
+  packed_quoted str
+and cr_quoted str = quoted "quote" "'" str
+and cr_quasiquoted str = quoted "quasiquote" "`" str
+and cr_unquoted str = quoted "unquote" "," str
+and cr_unquotedspliced str = quoted "unquote-splicing" ",@" str
+
+(* Lists *)
+and list2pairs sexp = function(sexps)->match sexps with
+| [] -> sexp
+| x::[]->Pair(x,sexp)
+| x::y->Pair(x,(list2pairs sexp) y)
+(* and make_pair_from_list nt = pack nt (fun(a,b)->Pair(a,b));; *)
+and cr_list str = 
+  let skip_before nt= 
+    pack (caten _skips_ nt) (function(_,x)->x) in
   
+  let list_form = caten (skip_before nt_lparen) (caten (star cr_sexp) (skip_before nt_rparen)) in
+  let packed_list_form = pack list_form (function(lp,(sexps,rp))->sexps) in
+  (pack packed_list_form (list2pairs Nil)) str
+
+and cr_dottedlist str = 
+  let skip_before nt= 
+    pack (caten _skips_ nt) (function(_,x)->x) in
+
+  let special_dot = skip_before nt_dot_char in
+  let list_form = caten (skip_before nt_lparen) (caten (plus cr_sexp) (caten special_dot (caten cr_sexp (skip_before nt_rparen)))) in
+  let packed_list_form = pack list_form (function(lp,(plus_sexps,(dot,(sexp,rp))))->(plus_sexps,sexp)) in
+  (pack packed_list_form (function(sexps,sexp)->(list2pairs sexp) sexps)) str
+  ;;
+
+  let read_sexprs str= 
+    let skip_after nt = 
+      pack (caten nt _skips_) (function(x,_)->x) in
+    let (parsed, rest) =  (skip_after (star cr_sexp)) (string_to_list str) in
+    match rest with
+    |[]->parsed
+    |any-> raise PC.X_no_match;;
+  
+  
+
 end;; (* struct Reader *)
+
+
+
+
+(* and cr_quoted str=
+  let nt_quoted = (caten (char '\'') cr_sexp) in
+  let packed_quoted = pack nt_quoted (fun(c,sexp)->Pair(Symbol("Quoted"),sexp)) in
+  packed_quoted str;; *)
+(* and nt_list = (caten_list [nt_lparen; ((star cr_sexp)); nt_rparen]) ;; *)
+(* 
+let tok_natural = 
+  pack nt_natural (fun(ds)->int_of_string (list_to_string ds)) *)
+
+
+(* 
+*)
+(* let nt_backslash = char '\';;
+let nt_gershaim = char '"';;
+
+ *)
diff --git a/readme.txt b/readme.txt
index e69de29..3a529ae 100644
--- a/readme.txt
+++ b/readme.txt
@@ -0,0 +1,2 @@
+We - Ron Sofer 204738637 and Tamir Berejik 307901231, assert that the work we submitted is 100% our own. We have not received any part from any other student in the class, nor have we give parts of it for use to others.
+Nor have we used code from other sources: Courses taught previously at this university, courses taught at other universities, various bits of code found on the internet, etc. We realize that should our code be found to contain code from other sources, that a formal case shall be opened against us with va'adat mishma'at, in persuit of disciplinary action.
diff --git a/semantic-analyser.ml b/semantic-analyser.ml
index 8e684f0..2e4fa3c 100644
--- a/semantic-analyser.ml
+++ b/semantic-analyser.ml
@@ -69,17 +69,234 @@ end;;
 
 module Semantics : SEMANTICS = struct
 
-let annotate_lexical_addresses e = raise X_not_yet_implemented;;
+let _test_ f str = let reader_out = Reader.read_sexprs str in
+  let parser_out = Tag_Parser.tag_parse_expressions reader_out in
+  List.map f parser_out;;
 
-let annotate_tail_calls e = raise X_not_yet_implemented;;
+let _test_tail_ a t str = let exprquote = _test_ a str in
+         List.map t exprquote;;
+
+let create_new_var = function((str,i))->(str,(0,i));;
+let inc_lex_addr = function((str,(b,p)))->(str,(b+1,p));;
+let dec_lex_addr = function((str,(b,p)))->(str,(b-1,p));;
+let filter_neg = function(_list_)-> List.filter (fun((_,(x,_)))->x>=0) _list_ ;;
+let rec get_indices = function(i,_list_)-> match _list_ with 
+   | []->[]
+   | _::rest-> i::(get_indices((i+1),rest));;
+let get_lexical_address str var_list =
+try let (_,i) = List.find (fun((s,i))->s=str) var_list in
+i
+with Not_found -> 
+(-1,-1);; (* represent free variable *)
+
+let a_lex_var str var_list= 
+let (b,p)=get_lexical_address str var_list in
+match b with 
+|(-1)->VarFree(str)
+|0->VarParam(str,p)
+|_->VarBound(str,b-1,p);;
+
+let apply_map f _list_ second_param = List.map (fun(x)->f x second_param) _list_ ;;
+
+let rec a_lex_a e var_list= match e with
+|Const(sexp)->Const'(sexp)
+|Var(str)-> Var'(a_lex_var str var_list)
+|If(cond,if_then,if_else)-> If'(a_lex_a cond var_list,a_lex_a if_then var_list,a_lex_a if_else var_list)
+|Seq(seq_list)-> Seq'(apply_map a_lex_a seq_list var_list)
+|Set(Var(v),expr)->Set'(a_lex_var v var_list, a_lex_a expr var_list)
+|Def(Var(v),expr)->Def'(a_lex_var v var_list, a_lex_a expr var_list)
+|Or(expr_list)-> Or'(apply_map a_lex_a expr_list var_list)
+|LambdaSimple(str_list,expr)->
+let indices= get_indices(0,str_list) in
+let new_vars = List.combine str_list indices in
+let new_vars= List.map create_new_var new_vars in
+let new_var_list = new_vars @ (List.map inc_lex_addr var_list) in
+LambdaSimple'(str_list,a_lex_a expr new_var_list)
+|LambdaOpt(str_list,str,expr)->
+let params = str_list @ [str] in
+let indices= get_indices(0,params) in
+let new_vars = List.combine params indices in
+let new_vars= List.map create_new_var new_vars in
+let new_var_list = new_vars @ (List.map inc_lex_addr var_list) in
+LambdaOpt'(str_list,str,a_lex_a expr new_var_list)
+|Applic(expr,expr_list)->Applic'(a_lex_a expr var_list, apply_map a_lex_a expr_list var_list)
+|_-> raise X_this_should_not_happen
+
+
+(* and get_seqquote = function
+| []-> []
+| car::cdr-> (a_lex_a car)::(get_seqquote cdr);; *)
+(* [(("a",(0,0))] *)
+let annotate_lexical_addresses e =  a_lex_a e [];;
+
+let rec a_tail_c e is_tp= match e with
+(* |Const'(sexp)->Const'(sexp) *)
+(* |Var'(str)-> Var'(a_lex_var str var_list) *)
+|If'(cond,if_then,if_else)-> If'(a_tail_c cond false,a_tail_c if_then is_tp, a_tail_c if_else is_tp)
+|Seq'(seq_list)-> Seq'(a_tail_seq seq_list is_tp)
+|Set'(v,expr)->Set'(v, a_tail_c expr false)
+|Def'(v,expr)->Def'(v, a_tail_c expr false)
+|Or'(expr_list)-> Or'(a_tail_seq expr_list is_tp)
+|LambdaSimple'(str_list,expr)-> LambdaSimple'(str_list,a_tail_c expr true)
+|LambdaOpt'(str_list,str,expr)-> LambdaOpt'(str_list,str,a_tail_c expr true)
+|Applic'(expr,expr_list)-> if(is_tp) then ApplicTP'(a_tail_c expr false,apply_map a_tail_c expr_list false) else Applic'(a_tail_c expr false,apply_map a_tail_c expr_list false)
+|x->x
+
+and a_tail_seq _list_ is_tp = match _list_ with
+|[]->[]
+|x::[]->[a_tail_c x is_tp]
+|x::y ->(a_tail_c x false)::(a_tail_seq y is_tp);;
+
+let annotate_tail_calls e = a_tail_c e false;;
+
+let any_true bool_list = 
+(List.filter (fun(x)->x) bool_list)=[]
+
+let wrap_io=function(_list_)->['i']@_list_@['o']
+
+let rec get_occurences expr var_name = match expr with
+|Var'(v)-> (match v with
+|VarParam(name,p)-> if(name=var_name) then ['r'] else []
+|VarBound(name,b,p)->if(name=var_name) then ['r'] else []
+|_-> [])
+|If'(cond,if_then,if_else)-> ['i']@(get_occurences cond var_name)@['o']@
+              ['i']@(get_occurences if_then var_name)@['o']@
+              ['i']@(get_occurences if_else var_name)@['o']
+|Seq'(seq_list) -> List.flatten (apply_map get_occurences seq_list var_name)
+|Set'(v,expr)-> 
+ (match v with
+ |VarParam(name,p)-> if(name=var_name) then ['w'] else []
+ |VarBound(name,b,p)->if(name=var_name) then ['w'] else []
+ |_-> []) @ (get_occurences expr var_name)
+|Def'(v,expr)-> 
+ (match v with
+ |VarParam(name,p)-> if(name=var_name) then ['w'] else []
+ |VarBound(name,b,p)->if(name=var_name) then ['w'] else []
+ |_-> []) @ (get_occurences expr var_name)
+|Or'(expr_list) -> List.flatten (List.map wrap_io (apply_map get_occurences expr_list var_name))
+|LambdaSimple'(str_list,expr)-> if(List.mem var_name str_list) then [] else ['i']@(get_occurences expr var_name)@['o']
+|LambdaOpt'(str_list,str,expr)-> if(List.mem var_name str_list || (String.equal(str) var_name)) then [] else ['i']@(get_occurences expr var_name)@['o']
+|Applic'(expr,expr_list)-> (List.flatten (List.map wrap_io (apply_map get_occurences expr_list var_name)))@ ['i']@(get_occurences expr var_name)@['o']
+|ApplicTP'(expr,expr_list)->(List.flatten (List.map wrap_io (apply_map get_occurences expr_list var_name)))@ ['i']@(get_occurences expr var_name)@['o']
+|_->[]
+
+
+
+
+let rec should_be_boxed _list_ = match _list_ with 
+| []-> false
+| x::[]-> false
+| x::y-> (match x with
+|'r'-> should_be_boxed y
+|'w'-> should_be_boxed y
+|'i'->should_be_boxed3 _list_
+|'o'->should_be_boxed3 _list_
+|_-> raise X_this_should_not_happen)
+
+and should_be_boxed3 _list_ = (match _list_ with
+| []-> false
+| x::[]-> false
+| x::y -> (match x with
+|'w'-> (need_occ y 0 'r')||(should_be_boxed3 y)
+|'r'-> (need_occ y 0 'w')||(should_be_boxed3 y)
+| _ -> should_be_boxed3 y))
+
+and need_occ _list_ same_lex occ= (match _list_ with
+|[]-> false
+|x::[]->(same_lex!=0) && (x==occ)
+|x::y->if(x==occ) then (same_lex<0)||(need_occ y same_lex occ)
+else (match x with
+|'i'-> need_occ y (if(same_lex<0) then same_lex else (same_lex+1)) occ
+|'o'->need_occ y (same_lex-1) occ
+|_-> need_occ y same_lex occ))
+
+let should_be_boxed_wrapper var_name expr = 
+let occurences = get_occurences expr var_name in
+should_be_boxed occurences;;
+
+let rec box_parameters expr names_list= (match expr with
+(* |Const'-> *)
+|Var'(v)->(match v with 
+|VarParam(name,p)-> if(List.mem name names_list) then BoxGet'(v) else expr
+|VarBound(name,b,p) -> if(List.mem name names_list) then BoxGet'(v) else expr
+|_-> expr)
+|If'(cond,if_then,if_else)->If'(box_parameters cond names_list,box_parameters if_then names_list,box_parameters if_else names_list)
+|Seq'(seq_list)-> Seq'(apply_map box_parameters seq_list names_list)
+|Set'(v,expr_toset)-> (match v with 
+|VarParam(name,p)-> if(List.mem name names_list) then BoxSet'(v,box_parameters expr_toset names_list) else expr
+|VarBound(name,b,p) -> if(List.mem name names_list) then BoxSet'(v,box_parameters expr_toset names_list) else expr
+|_-> expr)
+|Def'(v,expr_toset)-> (match v with 
+|VarParam(name,p)-> if(List.mem name names_list) then BoxSet'(v,box_parameters expr_toset names_list) else expr
+|VarBound(name,b,p) -> if(List.mem name names_list) then BoxSet'(v,box_parameters expr_toset names_list) else expr
+|_-> expr)
+|Or'(expr_list)-> Or'(apply_map box_parameters expr_list names_list)
+|LambdaSimple'(str_list,body_expr)-> 
+let not_params = List.map (fun(v)->not (List.mem v str_list)) names_list in
+let not_params = List.combine names_list not_params in
+let not_params = List.filter (fun(_,b)->b) not_params in
+let not_params = List.map (fun(x,_)->x) not_params in
+LambdaSimple'(str_list,box_parameters body_expr not_params)
+
+|LambdaOpt'(str_list,str,body_expr)-> 
+let not_params = List.map (fun(v)->not (List.mem v (str_list@[str]))) names_list in
+let not_params = List.combine names_list not_params in
+let not_params = List.filter (fun(_,b)->b) not_params in
+let not_params = List.map (fun(x,_)->x) not_params in
+LambdaOpt'(str_list,str,box_parameters body_expr not_params)
+|Applic'(app_expr,expr_list)->Applic'(box_parameters app_expr names_list,apply_map box_parameters expr_list names_list)
+|ApplicTP'(app_expr,expr_list)->ApplicTP'(box_parameters app_expr names_list,apply_map box_parameters expr_list names_list)
+|e-> e
+)
+
+
+let box_set e = match e with
+(* |Const'-> *)
+(* |Var'-> *)
+(* |If'(cond,if_then,if_else)-> *)
+(* |Seq'(seq_list)-> *)
+(* |Set'(v,expr)-> *)
+(* |Def'(v,expr)-> *)
+(* |Or'(expr_list)-> *)
+|LambdaSimple'(str_list,expr)->
+let box_needed = apply_map should_be_boxed_wrapper str_list expr in
+let vars_ind = List.combine str_list (get_indices (0,str_list)) in
+let pairs = List.combine vars_ind box_needed in
+let var_names_ind_boxed = List.map (fun(n,_)->n) (List.filter (fun(_,b)->b) pairs) in
+let set_exprs =  List.map (fun(v,minor)->Set'(VarParam(v,minor),Box'(VarParam(v,minor)))) var_names_ind_boxed in
+if(List.length(set_exprs)==0)
+then e
+else
+LambdaSimple'(str_list,
+let var_names_boxed = (List.map (fun(v,_)->v) var_names_ind_boxed) in  
+(match expr with
+|Seq'(expr_list)->Seq'(set_exprs@(apply_map box_parameters expr_list var_names_boxed))
+|x->Seq'(set_exprs@[box_parameters x var_names_boxed])))
+|LambdaOpt'(str_list,str,expr)->
+let params=(str_list@[str]) in
+let box_needed = apply_map should_be_boxed_wrapper params expr in
+let vars_ind = List.combine params (get_indices (0,params)) in
+let pairs = List.combine vars_ind box_needed in
+let var_names_ind_boxed = List.map (fun(n,_)->n) (List.filter (fun(_,b)->b) pairs) in
+let set_exprs =  List.map (fun(v,minor)->Set'(VarParam(v,minor),Box'(VarParam(v,minor)))) var_names_ind_boxed in
+if(List.length(set_exprs)==0)
+then e
+else
+LambdaOpt'(str_list,str,
+(let var_names_boxed = (List.map (fun(v,_)->v) var_names_ind_boxed) in  
+(match expr with
+|Seq'(expr_list)->Seq'(set_exprs@(apply_map box_parameters expr_list var_names_boxed))
+|x->Seq'(set_exprs@[box_parameters x var_names_boxed]))))
+(* |Applic'(expr,expr_list)-> *)
+(* |ApplicTP'-> *)
+|e->e
+;;
 
-let box_set e = raise X_not_yet_implemented;;
 
 let run_semantics expr =
-  box_set
-    (annotate_tail_calls
-       (annotate_lexical_addresses expr));;
+box_set(
+  annotate_tail_calls
+    (annotate_lexical_addresses expr));;
+
   
 end;; (* struct Semantics *)
-
-
diff --git a/tag-parser.ml b/tag-parser.ml
index 138249e..da39052 100644
--- a/tag-parser.ml
+++ b/tag-parser.ml
@@ -58,8 +58,237 @@ let reserved_word_list =
 
 (* work on the tag parser starts here *)
 
-let tag_parse_expressions sexpr = raise X_not_yet_implemented;;
+
+
+let reserved_word_list =
+  ["and"; "begin"; "cond"; "define"; "else";
+   "if"; "lambda"; "let"; "let*"; "letrec"; "or";
+   "quasiquote"; "quote"; "set!"; "pset!"; "unquote";
+   "unquote-splicing"];;  
+
+(* work on the tag parser starts here *)
+
+let not_reserved_word = function(str)-> not (List.mem str reserved_word_list);;
+
+let rec get_last_pair_item = function
+                            | Pair(_,x)->(get_last_pair_item x)
+                            | x->x;;
+
+let rec list_of_nested_pairs = function
+                            | Nil->[]
+                            | Pair(x,Nil)->[x]
+                            | Pair(x,y)->[x]@(list_of_nested_pairs y)
+                            | _-> [];;
+
+let rec nested_pairs_of_list = function
+                            | []-> Nil
+                            | lst-> Pair(List.hd lst,nested_pairs_of_list (List.tl lst));;
+
+let create_sexpr str sexpr_list = nested_pairs_of_list ([Symbol(str)]@sexpr_list);;
+
+
+let tag_const = function     
+            |Pair(Symbol("quote"),Pair(x,Nil))->Const(Sexpr(x))
+            |Bool(x)->Const(Sexpr(Bool(x)))
+            |Char(x)->Const(Sexpr(Char(x)))
+            |Number(x)->Const(Sexpr(Number(x)))
+            |String(x)->Const(Sexpr(String(x)));;
+
+let tag_var = function
+            | Symbol(v)-> if(not_reserved_word v) then
+                            Var(v)
+                          else
+                            raise (Match_failure ("tag-parser.ml",75,16));;
+
+
+let rec tag_parse = function 
+            | x ->  try tag_const x
+                    with Match_failure _->
+                    try tag_var x
+                    with Match_failure _->
+                    try tag_if x
+                    with Match_failure _->
+                    try expand_cond x
+                    with Match_failure _->
+                    try tag_lambda x
+                    with Match_failure _->
+                    try tag_or x
+                    with Match_failure _->
+                    try expand_and x
+                    with Match_failure _->
+                    try tag_def x
+                    with Match_failure _->
+                    try tag_set x
+                    with Match_failure _->
+                    try tag_begin x
+                    with Match_failure _->
+                    try expand_let x
+                    with Match_failure _->
+                    try expand_let_star x
+                    with Match_failure _->
+                    try expand_let_rec x
+                    with Match_failure _->
+                    try expand_quasiquote x
+                    with Match_failure _->
+                    try expand_pset x
+                    with Match_failure _->
+                    try tag_applic x
+                    with Match_failure _-> raise X_this_should_not_happen 
+
+
+and tag_if = function
+            | Pair(Symbol("if"),Pair(c,Pair(tn,else_or_nil))) -> (match else_or_nil with
+                                                                | Nil->If((tag_parse c),(tag_parse tn),Const(Void))
+                                                                | Pair(el,Nil)-> If((tag_parse c),(tag_parse tn),(tag_parse el))
+                                                                | _-> raise (Match_failure ("tag-parser.ml",75,16)))
+        
+and tag_lambda = function
+            | Pair(Symbol("lambda"), Pair(args,body))-> (match (get_last_pair_item args) with
+                                                      | Nil-> let arguments = list_of_nested_pairs args in
+                                                              let arg_str = List.map (fun(Symbol(s))->s) arguments in
+                                                              LambdaSimple(arg_str,seq_for_lambda body)
+                                                      | Symbol(x) ->  let simple_args = list_of_nested_pairs args in
+                                                                      let arg_str = List.map (fun(Symbol(s))->s) simple_args in
+                                                                      LambdaOpt(arg_str,x,seq_for_lambda body)
+                                                      | _-> raise (Match_failure ("tag-parser.ml",75,16)))
+            | _-> raise (Match_failure ("tag-parser.ml",75,16))
+                                                              
+            | _->raise (Match_failure ("tag-parser.ml",75,16))
+
+and tag_applic = function
+            | Pair(x,y)-> Applic(tag_parse x,List.map tag_parse (list_of_nested_pairs y))
+            | _-> raise (Match_failure ("tag-parser.ml",75,16))
+
+and tag_or = function
+            | Pair(Symbol("or"), x)-> Or(List.map tag_parse (list_of_nested_pairs x))
+            | _-> raise (Match_failure ("tag-parser.ml",75,16))
+
+and tag_def = function
+            | Pair(Symbol("define"),Pair(Pair(name,args),body))-> (match body with
+                                                                  | Nil-> raise (Match_failure ("tag-parser.ml",75,16))
+                                                                  |_->    let lambda_expr = tag_lambda (Pair(Symbol("lambda"), Pair(args,body))) in
+                                                                          Def(tag_var name,lambda_expr))
+            | Pair(Symbol("define"),Pair(name,Pair(expr,Nil)))-> Def(tag_var name, tag_parse expr) 
+            |_->raise (Match_failure ("tag-parser.ml",75,16))
+
+and tag_set = function
+            | Pair(Symbol("set!"),Pair(v,Pair(expr,Nil)))-> Set(tag_var v,tag_parse expr)
+            | _->raise (Match_failure ("tag-parser.ml",75,16))
+and seq_for_lambda = function
+            | Nil->Const(Void)
+            | Pair(y,Nil)->tag_parse y
+            | body-> Seq(get_seq_input body)
+and tag_begin = function
+            | Pair(Symbol("begin"),rest)-> (match rest with
+                                          | Nil-> Const(Void)
+                                          | Pair(y,Nil)-> tag_parse y
+                                          | _ -> Seq(get_seq_input rest))
+and expand_let = function
+            | (Pair(Symbol("let"),Pair(vars_vals,body)))->  tag_parse (expand_let_sexpr (Pair(vars_vals,body)))
+                                                        (* let vars = List.map (fun(Pair(var1,val1))->var1) (list_of_nested_pairs vars_vals) in
+                                                            let vals = List.map (fun(Pair(var1,Pair(val1,Nil)))->val1) (list_of_nested_pairs vars_vals) in  
+                                                            Applic(LambdaSimple(List.map (fun(Symbol(s))->s) vars, seq_for_lambda body),List.map tag_parse vals) *)
+            | _-> raise (Match_failure ("tag-parser.ml",75,16))
+                                          
+(* and *)
+and expand_let_sexpr = function
+            | Pair(vars_vals,body)->let vars = List.map (fun(Pair(var1,val1))->var1) (list_of_nested_pairs vars_vals) in
+              let vals = List.map (fun(Pair(var1,Pair(val1,Nil)))->val1) (list_of_nested_pairs vars_vals) in  
+              let lambda_sexpr = Pair(Symbol("lambda"),Pair(nested_pairs_of_list vars,body)) in
+              Pair(lambda_sexpr,nested_pairs_of_list vals)
+              
+and expand_let_star = function
+            | (Pair(Symbol("let*"),Pair(vars_vals,body)))-> (match vars_vals with
+                                                          | Nil-> expand_let (Pair(Symbol("let"),Pair(Nil,body)))
+                                                          | Pair(var_val,Nil)-> expand_let (Pair(Symbol("let"),Pair(Pair(var_val,Nil),body)))
+                                                          | Pair(Pair(var1,val1),rest_vars_vals)-> tag_parse (Pair(Symbol("let"),Pair(Pair(Pair(var1,val1),Nil), Pair(Pair(Symbol("let*"),Pair(rest_vars_vals,body)),Nil)))))
+            |_-> raise (Match_failure ("tag-parser.ml",75,16))
+
+and expand_let_rec = function
+            | (Pair(Symbol("letrec"),Pair(vars_vals,body)))-> let vars = List.map (fun(Pair(var1,val1))->var1) (list_of_nested_pairs vars_vals) in
+                                                              let vals = List.map (fun(Pair(var1,Pair(val1,Nil)))->val1) (list_of_nested_pairs vars_vals) in  
+                                                              let let_args_as_pairs = List.map (fun(var1)->Pair(var1,Pair(Pair(Symbol("quote"),Pair(Symbol("whatever"),Nil)),Nil))) vars in
+                                                              let let_args_pair_list = nested_pairs_of_list let_args_as_pairs in
+                                                              let let_body = List.map (fun((var1,val1))->Pair(Symbol("set!"),Pair(var1,Pair(val1,Nil)))) (List.combine vars vals) in
+                                                              let let_body = let_body @ [Pair(Symbol("let"),Pair(Nil,body))] in
+                                                              tag_parse (Pair(Symbol("let"),Pair(let_args_pair_list,(nested_pairs_of_list let_body))))
+                                                              (* Applic(LambdaSimple(List.map (fun(Symbol(s))->s) vars, Seq(get_seq_input body)),List.map tag_parse vals) *)
+
+and expand_and = function
+            | Pair(Symbol("and"),Nil)-> tag_parse (Bool(true))
+            | Pair(Symbol("and"),Pair(arg,Nil))-> tag_parse (arg)
+            | Pair(Symbol("and"),Pair(head,tail))->tag_parse (Pair(Symbol("if"),Pair(head,Pair(Pair(Symbol("and"),tail),Pair(Bool(false),Nil)))))
+
+and expand_quasiquote = function
+            | Pair(Symbol("quasiquote"),Pair(x,Nil))-> tag_parse (expand_quasiquote_sexpr x)
+            
+and expand_quasiquote_sexpr = function
+            | Pair(Symbol("unquote"),Pair(sexpr,Nil))-> sexpr
+            | Pair(Symbol("unquote-splicing"),Pair(sexpr,Nil))-> (create_sexpr "quote" [create_sexpr "unquote-splicing" [sexpr]])
+            | Nil-> (Pair(Symbol("quote"), Pair(Nil,Nil)))
+            | Symbol(x)-> (Pair(Symbol("quote"), Pair(Symbol(x),Nil)))
+            | Pair(a,b)-> (match a with
+                        | Pair(Symbol("unquote-splicing"),Pair(sexpr,Nil))-> (create_sexpr "append" [sexpr; expand_quasiquote_sexpr b])
+                        | _-> (create_sexpr "cons" [expand_quasiquote_sexpr a;expand_quasiquote_sexpr b]) )
+
+and expand_cond = function
+            | Pair(Symbol("cond"),cond_sexpr)-> tag_parse (expand_cond_sexpr cond_sexpr)
+
+and expand_cond_sexpr = function
+            | Pair(Pair(c,Pair(Symbol("=>"),Pair(f_body,Nil))),Nil)-> let f = create_sexpr "f" [create_sexpr "lambda" [Nil;f_body]] in
+                                                            let val1 = create_sexpr "value" [c] in
+                                                            let let_body = create_sexpr "if" [Symbol("value"); Pair(create_sexpr "f" [],Pair(Symbol("value"),Nil))] in
+                                                            create_sexpr "let" [nested_pairs_of_list [val1;f];let_body]
+                                                            
+            | Pair(Pair(c,Pair(Symbol("=>"),Pair(f_body,Nil))),rest_c)-> let f = create_sexpr "f" [create_sexpr "lambda" [Nil;f_body]] in
+                                                               let val1 = create_sexpr "value" [c] in
+                                                               let rest = create_sexpr "rest" [create_sexpr "lambda" [Nil;expand_cond_sexpr rest_c]] in
+                                                               let let_body = create_sexpr "if" [Symbol("value"); Pair(create_sexpr "f" [],Pair(Symbol("value"),Nil)); create_sexpr "rest" []] in
+                                                               create_sexpr "let" [nested_pairs_of_list [val1;f;rest];let_body]
+            | Pair(Pair(Symbol("else"),else_body),_) -> Pair(Symbol("begin"),else_body)
+            | Pair(Pair(c,c_body),Nil)-> let then_sexpr = Pair(Symbol("begin"),c_body) in
+                                         create_sexpr "if" [c;then_sexpr]
+            | Pair(Pair(c,c_body),rest_c)-> let then_sexpr = Pair(Symbol("begin"),c_body) in
+                                            let else_sexpr = expand_cond_sexpr rest_c in
+                                            create_sexpr "if" [c;then_sexpr;else_sexpr]
+            
+and expand_pset = function
+            | Pair(Symbol("pset!"),vars_vals)->tag_parse (expand_pset_sexpr vars_vals)
+
+and expand_pset_sexpr = function
+            | vars_vals -> let vars_vals_list = list_of_nested_pairs vars_vals in
+                           (match vars_vals_list with
+                           | []-> raise (Match_failure ("tag-parser.ml",75,16))
+                           | _-> let vars = List.map (fun(Pair(Symbol(var1),_))->var1) vars_vals_list in
+                                 let vals = List.map (fun(Pair(_,Pair(val1,Nil)))->val1) vars_vals_list in
+                                 let new_vars = get_hygienic_vars(vars, vars, []) in
+                                 let symbols_args = List.map (fun(str)->Symbol(str)) new_vars in
+                                 let symbol_vars = List.map (fun(Pair(var1,_))->var1) vars_vals_list in
+                                 let vars_newvars = List.combine symbol_vars symbols_args in
+                                 let set_list = List.map (fun((v,n_v))->create_sexpr "set!" [v;n_v]) vars_newvars in
+                                 let lambda_body = nested_pairs_of_list set_list in
+                                 let lambda_closure = Pair(Symbol("lambda"),Pair(nested_pairs_of_list symbols_args,lambda_body)) in
+                                 Pair(lambda_closure, nested_pairs_of_list vals))
+
+
+and get_hygienic_vars =function(all_vars,set_vars ,new_vars: string list*string list * string list) -> (match set_vars with
+                                                  | []->new_vars
+                                                  | x::rest-> let x_new=x^"1" in
+                                                              if(List.mem x_new all_vars) then let new_set_vars = x_new::rest in
+                                                              (get_hygienic_vars(all_vars,new_set_vars,new_vars))
+                                                              else (get_hygienic_vars(all_vars@[x_new],rest,new_vars@[x_new])))
+and get_seq_input = function(seq_list)->
+            List.flatten (List.map flatten_seq (List.map tag_parse (list_of_nested_pairs seq_list)))
+
+and flatten_seq = function
+            | Seq(x)-> List.flatten (List.map flatten_seq x)
+            | x->[x]
+
+
+
+let tag_parse_expressions sexpr = List.map tag_parse sexpr;;
 
   
 end;; (* struct Tag_Parser *)
 
+
