diff --git a/reader.ml b/reader.ml
index 32445c2..97aa2a7 100644
--- a/reader.ml
+++ b/reader.ml
@@ -1,5 +1,6 @@
 
 #use "pc.ml";;
+open PC;;
 
 exception X_not_yet_implemented;;
 exception X_this_should_not_happen;;
@@ -36,11 +37,256 @@ end
 let normalize_scheme_symbol str =
   let s = string_to_list str in
   if (andmap
-	(fun ch -> (ch = (lowercase_ascii ch)))
-	s) then str
+       (fun ch -> (ch = (lowercase_ascii ch)))
+       s) then str
   else Printf.sprintf "|%s|" str;;
 
-
 let read_sexprs string = raise X_not_yet_implemented;;
+
+(******************** Our Functions ********************)
+
+(* Boolean Parsers *)
+let true_parser = pack (word_ci "#t") (fun e -> Bool(true)) ;;
+let false_parser = pack (word_ci "#f") (fun e -> Bool(false)) ;;
+let bool_parser = disj true_parser false_parser ;;
+
+(*char parsers*)
+let char_prefix_parser = (word_ci "#\\") ;;
+let visible_simple_parser = const (fun ch -> ' ' <= ch) ;;
+
+let visible_char_parser = 
+  let nt = caten char_prefix_parser visible_simple_parser in
+  pack nt (fun (_,ch) -> ch) ;;
+
+let named_nul_parser = pack (word_ci "#\\nul") (fun ch -> Char.chr(0));;
+let named_newline_parser = pack (word_ci "#\\newline") (fun ch -> Char.chr(10));;
+let named_return_parser = pack (word_ci "#\\return") (fun ch -> Char.chr(13));;
+let named_tab_parser = pack (word_ci "#\\tab") (fun ch -> Char.chr(9));;
+let named_page_parser = pack (word_ci "#\\page") (fun ch -> Char.chr(12));;
+let named_space_parser = pack (word_ci "#\\space")  (fun ch -> Char.chr(32));;
+
+let named_char_parser = disj_list [
+  named_nul_parser;
+  named_newline_parser;
+  named_return_parser;
+  named_tab_parser;
+  named_page_parser;
+  named_space_parser
+  ] ;;
+
+let char_parser = pack (disj named_char_parser visible_char_parser) (fun c -> Char(c)) ;;
+
+(*number parsers*)
+let digit_parser = range '0' '9' ;;
+let plus_parser = char '+' ;;
+let minus_parser = char '-' ;;
+let sign_parser = disj plus_parser minus_parser ;; 
+let natural_parser = pack (plus digit_parser) (fun num -> int_of_string (list_to_string num)) ;;
+let signed_natural_parser = 
+  pack (caten (maybe sign_parser) natural_parser) (fun (s, n)-> 
+  match s with
+  | Some('+') -> n
+  | Some('-') -> (-1)*n
+  | None -> n
+  | _ -> raise X_no_match
+  );;
+
+let integer_parser = not_followed_by (pack signed_natural_parser (fun num -> Fraction(num, 1))) (char '.') ;; 
+
+let gcd a b = 
+  let rec findgcd a b =
+    if ( a mod b > 0) 
+      then (findgcd b (a mod b))
+      else b in
+    findgcd a b;;
+
+let slash_parser = char '/' ;;
+let fraction_parser = pack (caten (caten signed_natural_parser slash_parser) natural_parser) (fun ((num1,_), num2)->
+  let divider = gcd (abs(num1)) num2 in
+  let num1 = num1 / divider in
+  let num2 = num2 / divider in
+  Fraction(num1, num2)
+);;
+
+let dot_parser = char '.' ;;
+let mantissa_parser = pack (plus digit_parser) (fun ls -> list_to_string ls) ;;
+let float_parser = pack (caten (caten signed_natural_parser dot_parser) mantissa_parser) (fun ((num1,_), num2)->
+  Float(float_of_string(string_of_int(num1) ^ "." ^ num2))
+) ;; 
+
+(*Scientific Notation parser*)  
+let sci_float_parser = 
+  let nt = pack (plus digit_parser) (fun ls -> list_to_string ls) in
+  let nt = pack (caten (caten signed_natural_parser dot_parser) nt) (fun ((num1, _), num2) -> 
+    float_of_string(string_of_int(num1) ^ "." ^ num2 )) in nt;;
+let sci_num_parser = 
+  let nt = pack signed_natural_parser (fun x -> float_of_int x) in 
+  let nt = disj sci_float_parser nt in
+  let nt = pack (caten (caten nt (word_ci "e")) signed_natural_parser) (fun ((num1, _), num2) -> 
+    Float(num1 *. (10.0 ** float_of_int(num2)))) in nt;;
+
+let number_parser =  pack (disj_list [sci_num_parser; float_parser; fraction_parser; integer_parser]) (fun x -> Number(x)) ;;
+
+(* delimter parsers *)
+let coma_parser = char ',' ;;
+let dot_parser = char '.' ;;
+let rp_parser = char  ')' ;;
+let lp_parser = char '(' ;;
+let slash_parser = char '/' ;;
+let plus_parser = char '+' ;;
+let minus_parser = char '-' ;;
+let backslash_parser = char '\\' ;;
+let doublequote_parser = char '\"' ;;
+let whitespace_parser = (const (fun ch -> ch <= ' ')) ;;
+
+ 
+(*string parsers*)
+
+let make_paired left right nt = (*copy from P.S*)
+  let nt = caten left nt in
+  let nt = pack nt (fun (_,e) -> e) in
+  let nt = caten nt right in
+  let nt = pack nt (fun (e,_) -> e) in
+  nt;;
+  
+
+let ignore_parser = disj doublequote_parser backslash_parser ;;
+let string_literal_char_parser = diff nt_any ignore_parser;; 
+
+let slash_parser = pack (word_ci "\\\\") (fun ch -> Char.chr(92));;
+let doublequoteword_parser = pack (word_ci "\\\"") (fun ch -> Char.chr(34));;
+let tab_parser = pack (word_ci "\\t") (fun ch -> Char.chr(9));;
+let page_parser = pack (word_ci "\\f") (fun ch -> Char.chr(12));;
+let newline_parser = pack (word_ci "\\n") (fun ch -> Char.chr(10));;
+let return_parser = pack (word_ci "\\r") (fun ch -> Char.chr(13));;
+let string_meta_char_parser = disj_list [
+  slash_parser;
+  doublequoteword_parser;
+  newline_parser;
+  return_parser;
+  tab_parser;
+  page_parser;  
+];;
+
+let string_char_parser = disj string_literal_char_parser string_meta_char_parser ;; 
+let string_parser =
+  let nt_string =  make_paired (char '\"') (char '\"') (star string_char_parser) in
+  let nt_string = pack nt_string (fun s -> String(list_to_string(s))) in
+  nt_string;;
+
+
+(*symbols parsers*)
+
+let exclamation_mark_parser = char '!';;
+let dollar_sign_parser = char '$' ;;
+let power_sign_parser = char '^' ;;
+let mul_sign_parser = char '*' ;;
+let plus_parser = char '+' ;;
+let equal_parser = char '=' ;;
+let minus_parser = char '-' ;;
+let underscore_parser = char '_';;
+let less_sign_parser = char '<' ;;
+let big_sign_parser = char '>' ;;
+let question_mark_parser = char '?' ;;
+let colon_parser = char ':' ;;
+let slash_parser = char '/' ;;
+let doublequote_parser = char '"' ;;
+let atoz_parser = pack (range_ci 'a' 'z') (fun ch ->lowercase_ascii ch) ;; 
+
+let symbol_char_no_dot_parser = disj_list [
+  digit_parser; atoz_parser; exclamation_mark_parser; power_sign_parser;
+   mul_sign_parser;  minus_parser; underscore_parser; equal_parser; plus_parser; less_sign_parser; big_sign_parser; 
+   question_mark_parser; slash_parser; colon_parser
+  ] ;;
+
+let symbol_char_parser = disj symbol_char_no_dot_parser dot_parser ;;
+let symbol_parser = 
+  let nt = pack (caten symbol_char_parser (plus symbol_char_parser)) (fun (x,z)-> (x::z)) in
+  let nt = disj nt (pack symbol_char_no_dot_parser (fun x -> [x]))  in
+  let nt = pack nt (fun (x)-> Symbol(list_to_string(x))) in
+  nt;;
+
+(*line comments*)
+let nt_end_of_input2 = function
+  | []  -> (' ', [])
+  | _ -> raise X_no_match ;;
+
+let semicolon_parser = char ';' ;;
+let newline_parser = pack (word_ci "\n") (fun ch -> Char.chr(10));;
+let end_of_comment_parser = disj newline_parser nt_end_of_input2 ;;
+
+let comments_parser = 
+  let nt = caten semicolon_parser (star (const (fun ch -> ch != '\n'))) in
+  let nt = caten nt end_of_comment_parser in
+  let nt = pack nt (fun s -> ' ') in
+  nt;;
+
+(*Sexpr parser*)
+
+let prefix_comment_parser = caten (word "#;") (star whitespace_parser) ;;
+
+let rec sexpr_parser s = make_paired toignore toignore (disj_list [
+    nil_parser; bool_parser; char_parser; (not_followed_by number_parser symbol_parser); string_parser;
+    symbol_parser; list_parser; dottedlist_parser; quoted_parser;
+    quasiquoted_parser; unquoted_parser; unquoteandspliced_parser
+  ]) s
+
+  and nil_parser s = 
+    let nt = pack (make_paired lp_parser rp_parser toignore) (fun _ -> Nil) in
+    nt s 
+
+  and toignore s = 
+    let ignore = disj_list[whitespace_parser; comments_parser; sexp_comments_parser] in
+    let ignore = star ignore in
+    ignore s
+  
+  and sexp_comments_parser s = 
+    let nt = prefix_comment_parser in
+    let nt = pack nt (fun (x,_) -> x) in
+    let nt = caten nt sexpr_parser in
+    let nt = pack nt (fun (x,y) -> ' ') in
+    nt s 
+
+  and list_parser s =
+    let nt = make_paired lp_parser rp_parser (star sexpr_parser) in
+    let nt = pack nt (fun ls -> List.fold_right (fun z w -> Pair(z,w)) ls Nil) in 
+    nt s
+  
+  and dottedlist_parser s = 
+    let nt = caten (plus sexpr_parser) (char '.') in
+    let nt = pack nt (fun (e,_) -> e) in
+    let nt = caten nt sexpr_parser in 
+    let nt = make_paired lp_parser rp_parser nt in
+    let nt = pack nt (fun (ls, e) -> 
+      List.fold_right (fun x y -> Pair(x,y)) ls e) in 
+    nt s
+    
+  and quoted_parser s = 
+    let nt = caten (word "'") sexpr_parser in
+    let nt= pack nt (fun (x, exp) -> Pair(Symbol("quote"), Pair(exp, Nil))) in 
+    nt s 
+
+  and quasiquoted_parser s = 
+    let nt = caten (word "`") sexpr_parser in
+    let nt= pack nt (fun (x, exp) -> Pair(Symbol("quasiquote"), Pair(exp, Nil))) in 
+    nt s 
+
+  and unquoted_parser s = 
+    let nt = caten (word ",") sexpr_parser in
+    let nt= pack nt (fun (x, exp) -> Pair(Symbol("unquote"), Pair(exp, Nil))) in 
+    nt s
   
+  and unquoteandspliced_parser s = 
+    let nt = caten (word ",@") sexpr_parser in
+    let nt= pack nt (fun (x, exp) -> Pair(Symbol("unquote-splicing"), Pair(exp, Nil))) in 
+    nt s ;;
+    
+  let read_sexprs string =
+    let nt = star sexpr_parser (string_to_list string) in
+    let (x,s) = nt in 
+    match s with
+    | [] -> x 
+    | _ -> raise X_no_match;;
+        
 end;; (* struct Reader *)
+    
diff --git a/readme.txt b/readme.txt
index e69de29..29fa2c9 100644
--- a/readme.txt
+++ b/readme.txt
@@ -0,0 +1,5 @@
+Ofeer Mintz - 309988731
+Lilah Zitnitski - 313236549
+
+We assert that the work we submitted is 100% our own. We have not received any part from any other student in the class, nor have we give parts of it for use to others. Nor have we used code from other sources: Courses taught previously at this university, courses taught at other universities, various bits of code found on the Internet, etc. We realize that should our code be found to contain code from other sources, that aformal case shall be opened against us with va’adat mishma’at, in pursuit of disciplinaryaction.
+
diff --git a/semantic-analyser.ml b/semantic-analyser.ml
index 8e684f0..77f1a14 100644
--- a/semantic-analyser.ml
+++ b/semantic-analyser.ml
@@ -1,4 +1,5 @@
 #use "tag-parser.ml";;
+open Tag_Parser;;
 
 type var = 
   | VarFree of string
@@ -54,10 +55,10 @@ let rec expr'_eq e1 e2 =
          (expr'_eq body1 body2)
   | Applic'(e1, args1), Applic'(e2, args2)
   | ApplicTP'(e1, args1), ApplicTP'(e2, args2) ->
-	 (expr'_eq e1 e2) &&
-	   (List.for_all2 expr'_eq args1 args2)
-  | _ -> false;;	
-                      
+   (expr'_eq e1 e2) &&
+     (List.for_all2 expr'_eq args1 args2)
+  | _ -> false;;  
+                         
 exception X_syntax_error;;
 
 module type SEMANTICS = sig
@@ -69,17 +70,279 @@ end;;
 
 module Semantics : SEMANTICS = struct
 
-let annotate_lexical_addresses e = raise X_not_yet_implemented;;
+(* Annotate Lexical Addresses *)
 
-let annotate_tail_calls e = raise X_not_yet_implemented;;
+let rec calc_minor vars x n = match vars with
+| a :: rest -> if String.equal x a then n else (calc_minor rest x (n+1))
+| [] -> raise X_syntax_error ;;
 
-let box_set e = raise X_not_yet_implemented;;
+let rec add_global_helper vars_list vars = match vars with
+| x :: rest -> (x, -1, (calc_minor vars_list x 0)) :: (add_global_helper vars_list rest)
+| [] -> [] ;;
+
+let rec add_global_vars global_vars vars = match global_vars with
+| (x, depth, position) :: rest -> (x, depth+1, position) :: (add_global_vars rest vars)
+| [] -> List.append global_vars (add_global_helper vars vars) ;;
+
+let rec check_global_vars global_vars var = match global_vars with
+| [] -> []
+| (x, depth, position) :: rest -> if String.equal x var then [(x, depth, position)] else check_global_vars rest var ;;
+
+let rec reverse_global_vars global_vars = match global_vars with
+| x :: rest -> reverse_global_vars rest @ [x]
+| [] -> [] ;;
+
+let handle_var global_vars vars x = if (List.mem x vars) then 
+  VarParam(x, (calc_minor vars x 0))
+  else ( 
+    let reversed_global_vars = reverse_global_vars global_vars in 
+    let var = check_global_vars reversed_global_vars x in 
+    (match var with 
+      | [(name, depth, position)] -> VarBound(name, depth, position)
+      | _ -> VarFree(x))) ;;
+
+let rec handle_lambda global_vars vars body = match body with
+| Const(x) -> Const'(x)
+| Var(x) -> Var'(handle_var global_vars vars x) 
+| If(test, dit, dif) -> If'((handle_lambda global_vars vars test), (handle_lambda global_vars vars dit), (handle_lambda global_vars vars dif))
+| Seq(expr_list) -> Seq'(List.map (handle_lambda global_vars vars) expr_list)
+| Set(Var(x), value) -> Set'((handle_var global_vars vars x), (handle_lambda global_vars vars value))
+| Def(Var(x), value) -> Def'((handle_var global_vars vars x), (handle_lambda global_vars vars value))
+| Or(expr_list) -> Or'(List.map (handle_lambda global_vars vars) expr_list)
+| LambdaSimple(new_vars, body) -> LambdaSimple'(new_vars, (handle_lambda (add_global_vars global_vars new_vars) new_vars body))
+| LambdaOpt(new_vars, var, body) ->
+  let combined_vars = List.append new_vars [var] in
+  LambdaOpt'(new_vars, var, (handle_lambda (add_global_vars global_vars combined_vars) combined_vars body))
+| Applic(func, lst) -> Applic'((handle_lambda global_vars vars func), List.map (handle_lambda global_vars vars) lst)
+| _ -> raise X_syntax_error ;;
+
+let rec lexical_helper e = match e with
+| Const(x) -> Const'(x)
+| Var(x) -> Var'(VarFree(x))
+| If(test, dit, dif) -> If'(lexical_helper test, lexical_helper dit, lexical_helper dif)
+| Seq(expr_list) -> Seq'(List.map lexical_helper expr_list)
+| Set(Var(x), value) -> Set'(VarFree(x), lexical_helper value)
+| Def(Var(x), value) -> Def'(VarFree(x), lexical_helper value)
+| Or(expr_list) -> Or'(List.map lexical_helper expr_list)
+| LambdaSimple(vars, body) -> LambdaSimple'(vars, (handle_lambda (add_global_vars [] vars) vars body))
+| LambdaOpt(vars, var, body) -> 
+  let combined_vars = List.append vars [var] in 
+  LambdaOpt'(vars, var, (handle_lambda (add_global_vars [] combined_vars) combined_vars body))
+| Applic(func, lst) -> Applic'(lexical_helper func, List.map lexical_helper lst)
+| _ -> raise X_syntax_error ;;
+
+let annotate_lexical_addresses e = lexical_helper e;;
+
+(* Annotate Tail Calls *)
+
+let rec tail_calls_helper e is_tp = match e with
+| Const'(_) | Var'(_) -> e
+| If'(test, dit, dif) -> If'((tail_calls_helper test false), (tail_calls_helper dit is_tp), (tail_calls_helper dif is_tp))
+| Seq'(expr_list) -> if is_tp then Seq'(handle_tp_seq expr_list) else (Seq'(List.map (fun item -> tail_calls_helper item false) expr_list))
+| Set'(x, value) -> Set'(x, (tail_calls_helper value false))
+| Def'(x, value) -> Def'(x, (tail_calls_helper value false))
+| Or'(expr_list) -> if is_tp then Or'(handle_tp_seq expr_list) else (Or'(List.map (fun item -> tail_calls_helper item false) expr_list))
+| LambdaSimple'(vars, body) -> LambdaSimple'(vars, (tail_calls_helper body true))
+| LambdaOpt'(vars, var, body) -> LambdaOpt'(vars, var, (tail_calls_helper body true))
+| Applic'(func, lst) -> if is_tp then ApplicTP'((tail_calls_helper func false), (List.map (fun item -> tail_calls_helper item false) lst))
+  else Applic'((tail_calls_helper func false), (List.map (fun item -> tail_calls_helper item false) lst))
+| _ -> raise X_syntax_error 
+
+and handle_tp_seq lst = 
+let rec helper lst = match lst with 
+ | Applic'(func, lst) :: [] -> [ApplicTP'((tail_calls_helper func false), (List.map (fun item -> tail_calls_helper item false) lst))]
+ | x :: rest -> (tail_calls_helper x false) :: (helper rest)
+ | _ -> []
+in helper lst ;;
+
+let annotate_tail_calls e = tail_calls_helper e false;;
+
+(* Box Set *)
+
+(*
+
+Box -> if Lambda -> 
+  1. go over all lambda params:
+    1.1. check if there are read occurences 
+    1.2. check if there are write occurences 
+    1.3 check if read and write are in different ribs
+  2. if lambda body is seq:
+    2.1. check if there is read occur
+      2.1.1. check if there is a E with write occur
+      2.1.2. if yes then don't box
+    2.2. check if there is write occur
+      2.1.1. check if there is a E with read occur 
+      2.1.2. if yes then don't 
+  3. if 1 and not 2 then box 
+
+*)
+
+let read_rib = ref 0 ;; 
+let write_rib = ref 0 ;;
+
+let rec find_read var body occurs = match body with
+| Var'(VarBound(x, _, _)) | Var'(VarParam(x, _)) -> if String.equal x var then occurs @ [!read_rib] else occurs
+| If'(test, dit, dif) -> (find_read var test occurs) @ (find_read var dit occurs) @ (find_read var dif occurs)
+| Seq'(expr_list) -> List.append occurs (List.flatten (List.map (fun expr -> find_read var expr occurs) expr_list))
+| Set'(x, value) -> find_read var value occurs
+| BoxSet'(x, value) -> find_read var value occurs
+| Def'(x, value) -> find_read var value occurs
+| Or'(expr_list) -> List.append occurs (List.flatten (List.map (fun expr -> find_read var expr occurs ) expr_list))
+| LambdaSimple'(vars, new_body) -> (read_rib := !read_rib+1 ; find_read var new_body occurs)
+| LambdaOpt'(vars, var, new_body) -> (read_rib := !read_rib+1 ; find_read var new_body occurs)
+| Applic'(func, lst) -> read_rib := !read_rib+1; (find_read var func occurs) @ List.append occurs (List.flatten (List.map (fun expr -> find_read var expr occurs) lst))
+| ApplicTP'(func, lst) -> (find_read var func occurs) @ List.append occurs (List.flatten (List.map (fun expr -> find_read var expr occurs) lst))
+| _ -> occurs ;; 
+
+let rec find_read_local var body occurs n = match body with
+| Var'(VarBound(x, _, _)) | Var'(VarParam(x, _)) -> if String.equal x var then occurs @ [n] else occurs
+| If'(test, dit, dif) -> (find_read_local var test occurs (n+1)) @ (find_read_local var dit occurs (n+1)) @ (find_read_local var dif occurs(n+1))
+| Seq'(expr_list) -> List.append occurs (List.flatten (List.map (fun expr -> find_read_local var expr occurs (n+1)) expr_list))
+| Set'(x, value) -> find_read_local var value occurs (n+1)
+| BoxSet'(x, value) -> find_read_local var value occurs (n+1)
+| Def'(x, value) -> find_read_local var value occurs (n+1)
+| Or'(expr_list) -> List.append occurs (List.flatten (List.map (fun expr -> find_read_local var expr occurs (n+1)  ) expr_list))
+| LambdaSimple'(vars, new_body) ->  (find_read_local var new_body occurs (n+1))
+| LambdaOpt'(vars, var, new_body) ->  find_read_local var new_body occurs (n+1)
+| Applic'(LambdaSimple'(vars, new_body), lst) -> (*test 1*)
+ (find_read_local var (LambdaSimple'(vars, new_body)) occurs (n+1)) @ List.append occurs (List.flatten (List.map (fun expr -> find_read_local var expr occurs (n+1)) lst))
+| Applic'(func, lst) -> (find_read_local var func occurs (n+1)) @ List.append occurs (List.flatten (List.map (fun expr -> find_read_local var expr occurs (n+1)) lst))
+| ApplicTP'(func, lst) -> (find_read_local var func occurs (n+1)) @ List.append occurs (List.flatten (List.map (fun expr -> find_read_local var expr occurs (n+1)) lst))
+| _ -> occurs ;;
+
+let rec find_write var body occurs = match body with
+| If'(test, dit, dif) -> (find_write var test occurs) @ (find_write var dit occurs) @ (find_write var dif occurs)
+| Seq'(expr_list) -> List.append occurs (List.flatten (List.map (fun expr -> find_write var expr occurs) expr_list))
+| Set'(VarFree(x),value) -> find_write var value occurs
+| Set'(VarBound(x, _, _), value) | Set'(VarParam(x, _), value) -> 
+  if String.equal x var then occurs @ [!write_rib] @ (find_write var value occurs) else occurs
+| Def'(x, value) -> find_write var value occurs
+| BoxSet'(x, value) -> find_write var value occurs
+| Or'(expr_list) -> List.append occurs (List.flatten (List.map (fun expr -> find_write var expr occurs) expr_list))
+| LambdaSimple'(vars, new_body) -> (write_rib := !write_rib+1 ; find_write var new_body occurs)
+| LambdaOpt'(vars, var, new_body) -> (write_rib := !write_rib+1 ; find_write var new_body occurs)
+| Applic'(func, lst) -> (find_write var func occurs) @ List.append occurs (List.flatten (List.map (fun expr -> find_write var expr occurs) lst))
+| ApplicTP'(func, lst) -> (find_write var func occurs) @ List.append occurs (List.flatten (List.map (fun expr -> find_write var expr occurs) lst))
+| _ -> occurs ;; 
+
+let rec find_write_local var body occurs n = match body with
+| If'(test, dit, dif) -> (find_write_local var test occurs (n+1)) @ (find_write_local var dit occurs (n+1)) @ (find_write_local var dif occurs (n+1))
+| Seq'(expr_list) -> List.append occurs (List.flatten (List.map (fun expr -> find_write_local var expr occurs (n+1)) expr_list))
+| Set'(VarFree(x),value) -> find_write_local var value occurs (n+1)
+| Set'(VarBound(x, _, _), value) | Set'(VarParam(x, _), value) -> 
+  if String.equal x var then occurs @ [n] @ (find_write_local var value occurs (n+1)) else occurs
+| Def'(x, value) -> find_write_local var value occurs (n+1)
+| BoxSet'(x, value) -> find_write_local var value occurs (n+1)
+| Or'(expr_list) -> List.append occurs (List.flatten (List.map (fun expr -> find_write_local var expr occurs (n+1)) expr_list))
+| LambdaSimple'(vars, new_body) -> find_write_local var new_body occurs (n+1)
+| LambdaOpt'(vars, var, new_body) ->  find_write_local var new_body occurs (n+1)
+| Applic'(func, lst) -> (find_write_local var func occurs (n+1)) @ List.append occurs (List.flatten (List.map (fun expr -> find_write_local var expr occurs (n+1)) lst))
+| ApplicTP'(func, lst) -> (find_write_local var func occurs (n+1)) @ List.append occurs (List.flatten (List.map (fun expr -> find_write_local var expr occurs (n+1)) lst))
+| _ -> occurs ;; 
+
+let rec get_read_write_diff read_occur write_occur = match read_occur with 
+| [] -> false
+| x :: rest -> if List.mem x write_occur then (get_read_write_diff rest write_occur) else true ;;
+
+let rec check_box_cond1 x body = 
+  (read_rib := 0 ; write_rib := 0) ;
+  let read_occur = find_read x body [] in
+  let write_occur = find_write x body [] in
+  let global_answer = if (List.length read_occur) == 0 || (List.length write_occur) == 0 then false else (
+    let difference = (List.length read_occur != List.length write_occur) || (get_read_write_diff read_occur write_occur) in difference) in global_answer ;;  
+    
+let rec check_box_cond1_local x body = 
+  (read_rib := 0 ; write_rib := 0) ;
+  let read_occur = find_read_local x body [] 0 in
+  let write_occur = find_write_local x body [] 0 in
+  let local_answer = if (List.length read_occur) == 0 || (List.length write_occur) == 0 then false else (
+    let difference = (List.length read_occur != List.length write_occur) || (get_read_write_diff read_occur write_occur) in difference) in local_answer;;  
+
+let rec check_box_cond2_12 write_occur read_occur = match write_occur with
+| 0 :: rest -> (match read_occur with 
+  | x :: rest -> if x > 0 then true else check_box_cond2_12 write_occur rest 
+  | [] -> false )
+| _ -> false ;;
+
+let check_seq body = match body with 
+| Seq'(_) -> true
+| _ -> false ;;
+
+let check_box_cond2 x body = 
+  (read_rib := 0 ; write_rib := 0) ;
+  let write_occur = find_write x body [] in
+  let read_occur = find_read x body [] in
+  let check_cond2_1 = (check_box_cond2_12 write_occur read_occur) in
+  let check_cond2_2 = (check_box_cond2_12 read_occur write_occur) in
+  if (check_seq body) then (if not check_cond2_1 && not check_cond2_2 then true else false) else true ;; 
+  
+let rec find_first_expr expr_list = match expr_list with
+| Set'(VarParam(x, value), Box'(VarParam(w, z))) :: rest -> find_first_expr rest
+| _ -> expr_list ;;
+
+let rec handle_box_lambda full_vars vars body setvars = match vars with
+| [] -> body
+| x :: rest -> 
+  let box_cond1 = (check_box_cond1 x body) || (check_box_cond1_local x body) in 
+  let box_cond2 = check_box_cond2 x body in
+  if box_cond1 &&  box_cond2 then 
+    (let new_body = box x body in 
+    match new_body with 
+    | Seq'(expr_list)->
+      let setvars = setvars @ [Set'(VarParam(x, (calc_minor full_vars x 0)), Box'(VarParam(x, (calc_minor full_vars x 0))))] in
+      let new_body = List.append setvars (find_first_expr expr_list) in
+      let new_body = Seq'(new_body) in
+      (handle_box_lambda full_vars rest new_body setvars)
+    | _ ->  
+      let setvars = setvars @ [Set'(VarParam(x, (calc_minor full_vars x 0)), Box'(VarParam(x, (calc_minor full_vars x 0))))] in
+      let new_body = List.append setvars [new_body] in
+      let new_body = Seq'(new_body) in
+      (handle_box_lambda full_vars rest new_body setvars) )
+  else handle_box_lambda full_vars rest body setvars
+
+and box var body = 
+  let rec box_rec var body = match body with
+  | Var'(VarBound(x, y, z)) -> if String.equal x var then BoxGet'(VarBound(x, y, z)) else Var'(VarBound(x, y, z))
+  | Var'(VarParam(x, y)) -> if String.equal x var then BoxGet'(VarParam(x, y)) else Var'(VarParam(x, y))
+  | If'(test, dit, dif) -> If'(box_rec var test, box_rec var dit, box_rec var dif)
+  | Seq'(expr_list) -> Seq'(List.map (fun expr -> box_rec var expr) expr_list)
+  | BoxSet'(VarBound(x, y, z), value) -> BoxSet'(VarBound(x, y, z), box_rec var value)
+  | BoxSet'(VarParam(x, y), value) -> BoxSet'(VarParam(x, y), box_rec var value)
+  | Set'(VarFree(x), value) -> Set'(VarFree(x), box_rec var value)
+  | Set'(VarBound(x, y, z), value) ->  if String.equal x var then BoxSet'(VarBound(x, y, z), box_rec var value) else Set'(VarBound(x, y, z), box_rec var value)
+  | Set'(VarParam(x, y), value) ->  if String.equal x var then BoxSet'(VarParam(x, y), box_rec var value) else Set'(VarParam(x, y), box_rec var value)
+  | Def'(x, value) -> Def'(x, box_rec var value)
+  | Or'(expr_list) -> Or'(List.map (fun expr -> box_rec var expr) expr_list)
+  | LambdaSimple'(curr_vars, new_body) -> 
+    if List.mem var curr_vars then LambdaSimple'(curr_vars, handle_box_lambda curr_vars curr_vars new_body [])
+    else LambdaSimple'(curr_vars, box_rec var new_body)
+  | LambdaOpt'(vars, varopt, new_body) -> LambdaOpt'(vars, varopt, box_rec var new_body)
+  | Applic'(func, lst) -> Applic'(box_rec var func,(List.map (fun expr -> box_rec var expr) lst))
+  | ApplicTP'(func, lst) -> ApplicTP'(box_rec var func,(List.map (fun expr -> box_rec var expr) lst))
+  | _ -> body 
+in box_rec var body
+;;
+
+let rec box_helper e = match e with 
+| Const'(_) | Var'(_) -> e
+| If'(test, dit, dif) -> If'((box_helper test), (box_helper dit), (box_helper dif))
+| Seq'(expr_list) -> Seq'(List.map box_helper expr_list)
+| Set'(x, value) -> Set'(x, (box_helper value))
+| Def'(x, value) -> Def'(x, (box_helper value))
+| Or'(expr_list) -> Or'(List.map box_helper expr_list)
+| LambdaSimple'(vars, body) -> 
+  if List.length vars == 0 then LambdaSimple'(vars, box_helper body) 
+  else LambdaSimple'(vars, (handle_box_lambda vars vars body []))
+| LambdaOpt'(vars, var, body) -> LambdaOpt'(vars, var, (handle_box_lambda (List.append vars [var]) (List.append vars [var]) body [] ))
+| Applic'(func, lst) -> Applic'(box_helper func, (List.map (fun expr -> box_helper expr) lst))
+| ApplicTP'(func, lst) -> ApplicTP'(box_helper func,(List.map (fun expr -> box_helper expr) lst))
+| _ -> raise X_syntax_error ;;
+
+let box_set e = box_helper e;;
 
 let run_semantics expr =
   box_set
     (annotate_tail_calls
        (annotate_lexical_addresses expr));;
-  
-end;; (* struct Semantics *)
-
 
+end;; (* struct Semantics *)
diff --git a/tag-parser.ml b/tag-parser.ml
index 138249e..b90ec76 100644
--- a/tag-parser.ml
+++ b/tag-parser.ml
@@ -1,4 +1,6 @@
+
 #use "reader.ml";;
+open Reader;;
 
 type constant =
   | Sexpr of sexpr
@@ -15,7 +17,7 @@ type expr =
   | LambdaSimple of string list * expr
   | LambdaOpt of string list * string * expr
   | Applic of expr * (expr list);;
-
+    
 let rec expr_eq e1 e2 =
   match e1, e2 with
   | Const Void, Const Void -> true
@@ -40,7 +42,7 @@ let rec expr_eq e1 e2 =
      (expr_eq e1 e2) &&
        (List.for_all2 expr_eq args1 args2)
   | _ -> false;;
-	
+  
                        
 exception X_syntax_error;;
 
@@ -58,8 +60,188 @@ let reserved_word_list =
 
 (* work on the tag parser starts here *)
 
-let tag_parse_expressions sexpr = raise X_not_yet_implemented;;
+let rec handle_args arg_list = match arg_list with
+  | Nil -> []
+  | Symbol(x) -> x :: []
+  | Pair(Symbol(x), y) -> x :: handle_args y
+  | _ -> [] ;; 
+
+let rec handle_improper_args arg_list = match arg_list with 
+  | Pair(Symbol(x), y) -> x :: handle_improper_args y
+  | _ -> [] ;; 
+
+let rec is_proper lst = match lst with 
+  | Nil -> true
+  | Pair(x, y) -> is_proper y
+  | _ -> false ;; 
+
+let rec handle_let_vars arg_list = match arg_list with
+  | Nil -> Nil
+  | Pair(Pair(Symbol(x), Pair(_, Nil)), rest) -> Pair(Symbol(x), (handle_let_vars rest))
+  | _ -> Nil ;;
+
+let rec handle_let_vals arg_list = match arg_list with
+  | Nil -> Nil
+  | Pair(Pair(Symbol(_), Pair(value, Nil)), rest) -> Pair(value, (handle_let_vals rest))
+  | _ -> Nil ;;
+
+let rec handle_letrec_vars args_list = match args_list with
+  | Nil -> Nil
+  | Pair(Pair(Symbol(x), _), rest) -> Pair(Pair(Symbol(x), Pair(Pair(Symbol "quote", Pair(Symbol ("whatever"), Nil)), Nil)), (handle_letrec_vars rest))
+  | _ -> Nil ;; 
+
+let rec handle_letrec_body args_list body = match args_list with
+  | Nil -> Pair(Pair(Symbol("let"), Pair(Nil, body)), Nil)
+  | Pair(Pair(Symbol(x), expr), rest) -> Pair(Pair(Symbol("set!"), Pair(Symbol(x), expr)), (handle_letrec_body rest body))
+  | _ -> Nil ;;
+
+let rec handle_pset_args expr = match expr with 
+  | Nil -> []
+  | Pair(Pair(Symbol(x),_),rest) -> x :: handle_pset_args rest
+  | _ -> [] ;;
+
+let rec handle_pset_renamed_args expr number = match expr with 
+  | Nil -> []
+  | Pair(Pair(Symbol(x),_),rest) -> (string_of_int number) :: (handle_pset_renamed_args rest (number+1))
+  | _ -> [] ;;
+
+let rec handle_pset_exprs expr =  match expr with
+  | Nil -> []
+  | Pair(Pair(Symbol(x),Pair(value, Nil)) ,rest) -> value :: handle_pset_exprs rest
+  | _ -> [];;
+
+let make_let_pairs renamed_args values = 
+  let pairs = List.combine renamed_args values in
+  let rec let_pairs list = match list with
+  | [] -> Nil
+  | (x, y) :: rest -> Pair(Pair(Symbol(x),Pair(y,Nil)),let_pairs rest)
+  in let_pairs pairs;;
+
+ let rec make_set_pairs vars renamed_vars = 
+  let pairs = List.combine vars renamed_vars in
+  let rec let_set_pairs list = match list with
+  | [] -> Nil
+  | (x, y) :: rest -> Pair(Pair(Symbol("set!"),Pair(Symbol(x), Pair(Symbol(y), Nil))),let_set_pairs rest)
+  in let_set_pairs pairs;;
 
+
+let rec tag_parse sexpr = match sexpr with  
+  | Bool(x) -> Const(Sexpr(Bool(x)))
+  | Char(x) -> Const(Sexpr(Char(x)))
+  | Number(x) -> Const(Sexpr(Number(x)))
+  | String(x) -> Const(Sexpr(String(x)))
+  | Pair(Symbol("quote"), Pair(x, Nil)) -> Const(Sexpr(x))
+  | Pair(Symbol("unquote"), Pair(x, Nil)) -> Const(Sexpr(x))
+  | Symbol(x) -> if (List.mem x reserved_word_list)
+    then raise X_syntax_error
+    else Var(x)
+  | Pair(Symbol("if"), Pair(test, Pair(dit, Pair(dif, Nil)))) ->
+    If(tag_parse test, tag_parse dit, tag_parse dif)
+  | Pair(Symbol("if"), Pair(test, Pair(dit, Nil))) ->
+    If(tag_parse test, tag_parse dit, Const(Void))
+  | Pair(Symbol("begin"), seq) -> (match seq with
+    | Nil -> Const(Void)
+    | Pair(x, Nil) -> tag_parse x
+    | _ -> Seq(handle_seq seq) )
+  | Pair(Symbol("set!"), Pair(Symbol(var), Pair(exp, Nil))) -> Set(Var(var), tag_parse exp)
+  | Pair(Symbol("define"), Pair(Symbol(var), Pair(exp, Nil))) -> Def(Var(var), tag_parse exp)
+  | Pair(Symbol("or"), seq) -> (match seq with
+    | Nil -> Const(Sexpr(Bool(false)))
+    | Pair(x, Nil) -> tag_parse x
+    | _ -> Or(handle_seq seq) )
+  | Pair(Symbol("lambda"), Pair(args, body)) -> (
+    let tagged_args = handle_args args in
+    let tagged_body = tag_parse (Pair(Symbol("begin"), body)) in
+    match args with 
+    | Symbol(x) -> LambdaOpt([], x, tagged_body)
+    | _ -> if is_proper args then LambdaSimple(tagged_args, tagged_body)
+      else LambdaOpt((handle_improper_args args), (List.nth tagged_args ((List.length tagged_args)-1)), tagged_body) )
+  (***** Macro Expansions *****)
+  | Pair(Symbol("and"), seq) -> expand_and seq 
+  | Pair(Symbol("let"), Pair(args, body)) -> expand_let args body
+  | Pair(Symbol("let*"), Pair(args, body)) -> expand_let_kleene args body
+  | Pair(Symbol("letrec"), Pair(args, body)) -> expand_letrec args body
+  | Pair(Symbol("cond"), ribs) -> expand_cond ribs
+  | Pair(Symbol("quasiquote"), Pair(x, Nil)) -> expand_quasi x
+  | Pair(Symbol("define") , Pair(Pair(Symbol(var), arglist), exp)) -> Def(Var(var), (tag_parse (Pair(Symbol("lambda"), Pair(arglist, exp)))) )
+  | Pair(Symbol("pset!"), x) -> expand_pset x
+  (***** Macro Expansions *****)
+  | Pair(Symbol(x), lst) -> Applic(Var(x), handle_seq lst)
+  | Pair(x, lst) -> Applic(tag_parse x, handle_seq lst)
+  | _ -> raise X_syntax_error
+
+and handle_seq seq = 
+  let rec make_list s = match s with 
+  | Nil -> []
+  | Pair(Pair(Symbol("begin"), x), y) -> List.append (handle_seq x) (handle_seq y)
+  | Pair(x, y) -> 
+    let var_x = tag_parse x in
+    let lst = var_x :: make_list y in lst
+  | _ -> tag_parse seq :: [] in make_list seq
+
+and expand_and seq = match seq with
+  | Nil -> tag_parse (Bool(true))
+  | Pair(x, Nil) -> tag_parse x
+  | Pair(x, rest) -> tag_parse (Pair(Symbol("if"), Pair(x, Pair(Pair(Symbol "and", rest), Pair(Bool(false), Nil)))))
+  | _ -> raise X_syntax_error
+
+and expand_let args body = 
+  let vars = handle_let_vars args in
+  let vals = handle_let_vals args in
+  tag_parse (Pair(Pair(Symbol("lambda"), Pair(vars, body)), vals)) 
+
+and expand_let_kleene args body = match args with 
+  | Nil -> tag_parse (Pair(Symbol("let"), Pair(Nil, body)))
+  | Pair(Pair(var, Pair(value, Nil)), Nil) -> tag_parse ((Pair(Symbol("let"), Pair(args, body)))) 
+  | Pair(Pair(var, Pair(value, Nil)), rest) -> 
+    tag_parse (Pair(Symbol("let"), Pair(Pair(Pair(var, Pair(value, Nil)), Nil), Pair(Pair(Symbol("let*"), Pair(rest, body)), Nil)))) 
+  | _ -> raise X_syntax_error
+
+and expand_letrec args body = 
+  let vars = handle_letrec_vars args in 
+  let sets_body = handle_letrec_body args body in
+  tag_parse (Pair(Symbol("let"), Pair(vars, sets_body)))
+
+and expand_cond ribs = 
+  let rec make_rib ribs = match ribs with
+    | Pair(Pair(Symbol("else"), seq), rest) -> Pair(Symbol("begin"), seq)
+    | Pair(Pair(test, Pair(Symbol("=>"), seq)), Nil) ->
+        Pair(Symbol("let"), Pair(Pair(Pair(Symbol("value"), Pair(test, Nil)), Pair(Pair(Symbol("f"), Pair(Pair(Symbol("lambda"),
+          Pair(Nil, seq)), Nil)), Nil)), Pair(Pair(Symbol("if"), Pair(Symbol("value"), Pair(Pair(Pair(Symbol("f"), Nil), Pair(Symbol("value"), Nil)), Nil))), Nil)))
+    | Pair(Pair(test, Pair(Symbol("=>"), seq)), rest) -> 
+      Pair(Symbol "let", Pair(Pair(Pair(Symbol("value"), Pair(test, Nil)), Pair(Pair(Symbol("f"), Pair(Pair(Symbol("lambda"), Pair(Nil, seq)), Nil)), 
+        Pair(Pair(Symbol("rest"), Pair(Pair(Symbol("lambda"), Pair(Nil, Pair((make_rib rest), Nil))), Nil)), Nil))), 
+        Pair(Pair(Symbol("if"), Pair(Symbol("value"), Pair(Pair(Pair(Symbol("f"), Nil), Pair(Symbol("value"), Nil)), Pair(Pair(Symbol("rest"), Nil), Nil)))), Nil)))
+    | Pair(Pair(test, seq), Nil) -> Pair(Symbol("if"), Pair(test, Pair(Pair(Symbol("begin"), seq), Nil)))
+    | Pair(Pair(test, seq), rest) -> (Pair(Symbol("if"), Pair(test, Pair(Pair(Symbol("begin"), seq), Pair((make_rib rest), Nil)))))
+    | _ -> raise X_syntax_error
+  in tag_parse (make_rib ribs)
+
+and expand_quasi expr =
+  let rec make_quasi expr = match expr with 
+    | Nil -> Pair(Symbol("quote"), Pair(Nil, Nil))
+    | Pair(Symbol("unquote"), Pair(x, Nil)) -> x
+    | Pair(Symbol("unquote-splicing"), Pair(x, Nil)) -> x
+    | Symbol(x) -> Pair(Symbol("quote"), Pair(Symbol(x), Nil))
+    | Pair(first, rest) -> ( match first with 
+      | Pair(Symbol("unquote-splicing"), Pair(x, Nil)) -> Pair(Symbol("append"), Pair(x, Pair((make_quasi rest), Nil)))
+      | _ -> ( match rest with 
+        | Pair(Symbol("unquote-splicing"), Pair(x, Nil)) -> Pair(Symbol("cons"), Pair((make_quasi first), Pair(x, Nil)))
+        | _ -> Pair(Symbol("cons"), Pair((make_quasi first), Pair((make_quasi rest), Nil))) ) ) 
+    | _ -> raise X_syntax_error
+  in match expr with 
+    | Pair(Symbol("unquote-splicing"), Pair(x, Nil)) -> raise X_syntax_error
+    | _ -> tag_parse (make_quasi expr) 
+
+and expand_pset expr = 
+  let vars = handle_pset_args expr in
+  let renamed_vars = handle_pset_renamed_args expr 1 in
+  let values = handle_pset_exprs expr in
+  tag_parse (Pair(Symbol("let"), Pair((make_let_pairs renamed_vars values), (make_set_pairs vars renamed_vars)))) ;;
   
-end;; (* struct Tag_Parser *)
 
+
+let tag_parse_expressions sexpr = List.map tag_parse sexpr ;;
+
+  
+end;; (* struct Tag_Parser *)
