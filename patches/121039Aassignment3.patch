diff --git a/reader.ml b/reader.ml
index 32445c2..7e1ac5e 100644
--- a/reader.ml
+++ b/reader.ml
@@ -1,46 +1,262 @@
-
-#use "pc.ml";;
-
-exception X_not_yet_implemented;;
-exception X_this_should_not_happen;;
-  
-type number =
-  | Fraction of int * int
-  | Float of float;;
-  
-type sexpr =
-  | Bool of bool
-  | Nil
-  | Number of number
-  | Char of char
-  | String of string
-  | Symbol of string
-  | Pair of sexpr * sexpr;;
-
-let rec sexpr_eq s1 s2 =
-  match s1, s2 with
-  | Bool(b1), Bool(b2) -> b1 = b2
-  | Nil, Nil -> true
-  | Number(Float f1), Number(Float f2) -> abs_float(f1 -. f2) < 0.001
-  | Number(Fraction (n1, d1)), Number(Fraction (n2, d2)) -> n1 = n2 && d1 = d2
-  | Char(c1), Char(c2) -> c1 = c2
-  | String(s1), String(s2) -> s1 = s2
-  | Symbol(s1), Symbol(s2) -> s1 = s2
-  | Pair(car1, cdr1), Pair(car2, cdr2) -> (sexpr_eq car1 car2) && (sexpr_eq cdr1 cdr2)
-  | _ -> false;;
-
-module Reader: sig
-  val read_sexprs : string -> sexpr list
-end
-= struct
-let normalize_scheme_symbol str =
-  let s = string_to_list str in
-  if (andmap
-	(fun ch -> (ch = (lowercase_ascii ch)))
-	s) then str
-  else Printf.sprintf "|%s|" str;;
-
-
-let read_sexprs string = raise X_not_yet_implemented;;
-  
-end;; (* struct Reader *)
+
+#use "pc.ml";;
+open PC;;
+
+exception X_not_yet_implemented;;
+exception X_this_should_not_happen;;
+
+
+
+type number =
+  | Fraction of int * int
+  | Float of float;;
+
+type sexpr =
+  | Bool of bool
+  | Nil
+  | Number of number
+  | Char of char
+  | String of string
+  | Symbol of string
+  | Pair of sexpr * sexpr;;
+
+let rec sexpr_eq s1 s2 =
+  match s1, s2 with
+  | Bool(b1), Bool(b2) -> b1 = b2
+  | Nil, Nil -> true
+  | Number(Float f1), Number(Float f2) -> abs_float(f1 -. f2) < 0.001
+  | Number(Fraction (n1, d1)), Number(Fraction (n2, d2)) -> n1 = n2 && d1 = d2
+  | Char(c1), Char(c2) -> c1 = c2
+  | String(s1), String(s2) -> s1 = s2
+  | Symbol(s1), Symbol(s2) -> s1 = s2
+  | Pair(car1, cdr1), Pair(car2, cdr2) -> (sexpr_eq car1 car2) && (sexpr_eq cdr1 cdr2)
+  | _ -> false;;
+
+module Reader: sig
+  val read_sexprs : string -> sexpr list
+end
+= struct
+
+let normalize_scheme_symbol str =
+  let s = string_to_list str in
+  if (andmap
+	(fun ch -> (ch = (lowercase_ascii ch)))
+	s) then str
+  else Printf.sprintf "|%s|" str;;
+
+(*taken form expr.ml RS3*)
+  let make_paired nt_left nt_right nt =
+    let nt = caten nt_left nt in
+    let nt = pack nt (function (_, e) -> e) in
+    let nt = caten nt nt_right in
+    let nt = pack nt (function (e, _) -> e) in
+      nt;;
+
+(*white space char readr  return Nil for futer use in the Nil parser and unification with other parser that return sexpr*)
+let nt_whitespaces = pack (range (char_of_int 1) ' ') (fun e -> Nil);;
+
+(*parser the ignores line comments*)
+let nt_line_comment=
+    let nt_semiclon = char ';'in
+    let nt_newline = char '\n'in
+    let nt_diff_then_newline= diff nt_any nt_newline in
+    let nt_end_of_comment= disj nt_newline (pack nt_end_of_input (fun (s)->'s')) in
+    let nt_comment = caten (caten nt_semiclon (star nt_diff_then_newline)) nt_end_of_comment in
+    let packed = pack nt_comment (fun x -> Nil)in
+    packed;;
+(*parser for booleans*)
+let nt_boolean =
+  let nt_sharp = char '#'in
+  let nt_true =  pack (char_ci 't') (fun t -> true) in
+  let nt_false = pack (char_ci 'f') (fun f -> false) in
+  let nt_bool= disj nt_true nt_false in
+  let nt = caten nt_sharp nt_bool in
+  let packed = pack nt (fun (_,e)-> Bool e) in
+  packed;;
+
+  (*parser for chars*)
+let nt_char =
+  let nt_sharp = char '#'in
+  let nt_backslash = char '\\' in
+  let nt_prefix = pack (caten nt_sharp nt_backslash) (fun (_,e)->e) in (*pack used to creat type coreectns for the disj with the named char*)
+  let nt_visable_simple_char = range ' ' (char_of_int 127) in
+  let nt_named_char = disj_list [
+    pack (word_ci "nul") (fun e ->'\000');
+    pack (word_ci "newline") (fun e ->'\n');
+    pack (word_ci "return") (fun e -> char_of_int 13);
+    pack (word_ci "tab") (fun e ->char_of_int 9);
+    pack (word_ci "page") (fun e ->char_of_int 12);
+    pack (word_ci "space") (fun e ->' ')] in
+  let nt_any_char = caten nt_prefix (disj nt_named_char nt_visable_simple_char) in
+  let packed = pack nt_any_char (fun (_,e)-> Char e) in
+  packed;;
+
+
+  let nt_digit = range '0' '9';;
+
+  let nt_dot = char '.';;
+
+  let nt_natural = plus nt_digit;;
+
+  let nt_int =
+    let nt_plus = char '+' in
+    let nt_minus = char '-' in
+    let nt_sign = disj nt_plus nt_minus in
+    let nt_sign_and_num = caten (maybe nt_sign) nt_natural in
+    pack nt_sign_and_num (fun (sign, num) ->
+      match sign with
+      | Some '-' -> '-'::num
+      | sign -> num
+    );;
+
+  let nt_integer = pack nt_int (fun (e) -> Fraction(int_of_string (list_to_string e),1));;
+
+  let nt_float_list =
+    let nt_dot_as_list = pack nt_dot (fun(e) -> [e]) in
+    pack  (caten_list [nt_int; nt_dot_as_list; nt_natural])
+          (fun e -> List.flatten e);;
+
+  let nt_float = pack nt_float_list (fun e-> Float (float_of_string (list_to_string e)));;
+
+  let rec calc_gcd dividend divisor =
+    if divisor = 0 then dividend else calc_gcd divisor (dividend mod divisor);;
+
+  let nt_fraction =
+    let nt_slash_as_list = pack (char '/') (fun e -> [e]) in
+    pack  (caten_list [nt_int; nt_slash_as_list; nt_natural])
+    (function
+    | [dividend; _; divisor] -> (
+      let dividend = int_of_string (list_to_string dividend) in
+      let divisor =  int_of_string (list_to_string divisor) in
+      let gcd = calc_gcd (abs dividend) divisor in
+      Fraction(dividend / gcd, divisor / gcd))
+    | _ -> raise X_this_should_not_happen);;
+
+
+    let nt_scientific =
+      let nt_e_as_list = pack (char_ci 'e') (fun e->[e]) in
+      pack  (caten_list [(disj nt_float_list nt_int); nt_e_as_list; nt_int])
+      (function
+      | [num; _; num_exp] ->
+        let num = float_of_string (list_to_string num) in
+        let num_exp = float_of_string (list_to_string num_exp) in (*float is used because of ** types, but int is enforced with nt_int *)
+        Float(num *. (10.** num_exp))
+      | _ -> raise X_this_should_not_happen);;
+
+  let nt_number = pack (disj_list [nt_scientific; nt_float; nt_fraction; nt_integer]) (fun e->Number(e));;
+
+
+  (*string parser*)
+  let nt_string =
+    let nt_double_quote = char '"' in
+    let nt_meta_chars= disj_list [
+      pack (word_ci "\\r") (fun e -> char_of_int 13);
+      pack (word_ci "\\n") (fun e ->'\n');
+      pack (word_ci "\\t") (fun e -> char_of_int 9);
+      pack (word_ci "\\f") (fun e ->char_of_int 12);
+      pack (word "\\\\") (fun e ->'\\');
+      pack (word "\\\"") (fun e ->'"')] in
+    let nt_literal_char = diff nt_any (disj (char '"') (char '\\')) in
+    let nt_body = star (disj nt_literal_char nt_meta_chars) in
+    let nt = make_paired nt_double_quote nt_double_quote nt_body in
+    let packed = pack nt (fun (e)-> String (list_to_string e)) in
+    packed;;
+
+
+(*symbol parser*)
+let nt_letters_and_punctuations= disj_list [ range_ci 'a' 'z';
+    disj_list [char '!';char '$'; char '^'; char '*'; char '-'; char '_'; char '='; char '+'; char '<'; char '>'; char '/'; char '?'; char ':'];];;
+
+let nt_symbol_char_no_dot= pack  (disj nt_letters_and_punctuations nt_digit) (fun e -> Symbol (Char.escaped (lowercase_ascii e)));;
+
+(*the name is work in progress*)
+let nt_long_symbol =
+    let nt_symbol_char = pack (disj_list [nt_dot; nt_letters_and_punctuations; nt_digit]) lowercase_ascii in
+    let packed = pack (caten nt_symbol_char (plus nt_symbol_char)) (fun (e,s)->
+      Symbol (list_to_string (e::s))) in
+    packed;;
+
+let nt_symbol = disj nt_long_symbol nt_symbol_char_no_dot;;
+
+let nt_number_no_symbol = not_followed_by nt_number (disj nt_symbol  (pack nt_dot (fun e-> Nil)));;
+
+(* the recursive function of the parser*)
+let rec parse_sexpr s =
+  let disjoint_parsers= disj_list [nt_boolean; nt_number_no_symbol; nt_string; nt_char; nt_symbol; nt_list; nt_dotted_list; nt_qoute; nt_unqoute;
+                                    nt_quasiquote; nt_unquote_splicing] in
+  (nt_whitespaces_and_comments disjoint_parsers) s
+
+
+  (*parser for qoute *)
+  and nt_qoute s =
+    let nt_prefix = char '\'' in
+    let nt_body = caten nt_prefix  parse_sexpr in
+    let packed = pack nt_body (fun (_, e) -> Pair(Symbol("quote"), Pair(e, Nil))) in
+      packed s
+
+  (*parser for unqoute*)
+  and nt_unqoute s =
+      let nt_prefix = char ',' in
+      let nt_body = caten nt_prefix  parse_sexpr in
+      let packed = pack nt_body (fun (_, e) -> Pair(Symbol("unquote"), Pair(e, Nil))) in
+        packed s
+
+  (*parser for quasiqoute*)
+  and nt_quasiquote s =
+    let nt_prefix = char '`' in
+    let nt_body = caten nt_prefix  parse_sexpr in
+    let packed = pack nt_body (fun (_, e) -> Pair(Symbol("quasiquote"), Pair(e, Nil))) in
+    packed s
+
+  (*parser for unqoute)splicing*)
+  and nt_unquote_splicing s =
+    let nt_prefix = word ",@" in
+    let nt_body = caten nt_prefix  parse_sexpr in
+    let packed = pack nt_body (fun (_, e) -> Pair(Symbol("unquote-splicing"), Pair(e, Nil))) in
+    packed s
+
+  (*parser for sexp_comment*)
+  and nt_sexp_comment s =
+    let nt_prefix = word "#;" in
+    let nt_body = caten nt_prefix  parse_sexpr in
+    let packed = pack nt_body (fun  e -> Nil) in
+    packed s
+
+
+  (* remover for whitespaces and comment as seen in RS3*)
+  and nt_sapce_and_comment s = disj_list [nt_whitespaces; nt_line_comment; nt_sexp_comment] s
+  and nt_whitespaces_and_comments s =
+    let nt nt1 = make_paired (star nt_sapce_and_comment) (star nt_sapce_and_comment) nt1 in
+    nt s
+
+    and nt_lParen s = char '(' s
+
+    and nt_rParen s = char ')' s
+
+  and nt_nil s =
+    let packed = pack (make_paired nt_lParen nt_rParen (star nt_sapce_and_comment)) (fun _ -> Nil) in
+    packed s
+
+  and nt_list s =
+    let not_empty_list = pack (make_paired nt_lParen nt_rParen (star parse_sexpr))
+                      (function
+                        | [] -> Nil
+                        | l -> List.fold_right (fun cur acc -> Pair(cur, acc)) l Nil) in
+    (disj nt_nil not_empty_list) s
+
+  and nt_dotted_list s =
+    let packed = pack (make_paired nt_lParen nt_rParen (caten (caten (plus parse_sexpr) nt_dot) parse_sexpr))
+                      (fun (((firsts, _), last)) -> List.fold_right (fun cur acc -> Pair(cur, acc)) firsts last) in
+    packed s;;
+
+
+let read_sexprs string =
+  let (sexpr_list, s) = (star parse_sexpr) (string_to_list string) in
+  if (s=[])
+    then sexpr_list
+else
+  raise X_no_match;;
+
+
+
+end;; (* struct Reader *)
diff --git a/readme.txt b/readme.txt
index e69de29..7cba5a5 100644
--- a/readme.txt
+++ b/readme.txt
@@ -0,0 +1,10 @@
+Idan Tomer - 314884784
+Yuval Margalit - 313583833
+
+We assert that the work we submitted is 100% our own. We have not received any
+part from any other student in the class, nor have we give parts of it for use to others.
+Nor have we used code from other sources: Courses taught previously at this university,
+courses taught at other universities, various bits of code found on the Internet, etc.
+We realize that should our code be found to contain code from other sources, that a
+formal case shall be opened against us with va’adat mishma’at, in pursuit of disciplinary
+action.
diff --git a/semantic-analyser.ml b/semantic-analyser.ml
index 8e684f0..1b40b91 100644
--- a/semantic-analyser.ml
+++ b/semantic-analyser.ml
@@ -1,6 +1,6 @@
 #use "tag-parser.ml";;
 
-type var = 
+type var =
   | VarFree of string
   | VarParam of string * int
   | VarBound of string * int * int;;
@@ -28,15 +28,6 @@ let rec expr'_eq e1 e2 =
   | Var'(VarFree v1), Var'(VarFree v2) -> String.equal v1 v2
   | Var'(VarParam (v1,mn1)), Var'(VarParam (v2,mn2)) -> String.equal v1 v2 && mn1 = mn2
   | Var'(VarBound (v1,mj1,mn1)), Var'(VarBound (v2,mj2,mn2)) -> String.equal v1 v2 && mj1 = mj2  && mn1 = mn2
-  | Box'(VarFree v1), Box'(VarFree v2) -> String.equal v1 v2
-  | Box'(VarParam (v1,mn1)), Box'(VarParam (v2,mn2)) -> String.equal v1 v2 && mn1 = mn2
-  | Box'(VarBound (v1,mj1,mn1)), Box'(VarBound (v2,mj2,mn2)) -> String.equal v1 v2 && mj1 = mj2  && mn1 = mn2
-  | BoxGet'(VarFree v1), BoxGet'(VarFree v2) -> String.equal v1 v2
-  | BoxGet'(VarParam (v1,mn1)), BoxGet'(VarParam (v2,mn2)) -> String.equal v1 v2 && mn1 = mn2
-  | BoxGet'(VarBound (v1,mj1,mn1)), BoxGet'(VarBound (v2,mj2,mn2)) -> String.equal v1 v2 && mj1 = mj2  && mn1 = mn2
-  | BoxSet'(VarFree v1,e1), BoxSet'(VarFree v2, e2) -> String.equal v1 v2 && (expr'_eq e1 e2)
-  | BoxSet'(VarParam (v1,mn1), e1), BoxSet'(VarParam (v2,mn2),e2) -> String.equal v1 v2 && mn1 = mn2 && (expr'_eq e1 e2)
-  | BoxSet'(VarBound (v1,mj1,mn1),e1), BoxSet'(VarBound (v2,mj2,mn2),e2) -> String.equal v1 v2 && mj1 = mj2  && mn1 = mn2 && (expr'_eq e1 e2)
   | If'(t1, th1, el1), If'(t2, th2, el2) -> (expr'_eq t1 t2) &&
                                             (expr'_eq th1 th2) &&
                                               (expr'_eq el1 el2)
@@ -56,8 +47,9 @@ let rec expr'_eq e1 e2 =
   | ApplicTP'(e1, args1), ApplicTP'(e2, args2) ->
 	 (expr'_eq e1 e2) &&
 	   (List.for_all2 expr'_eq args1 args2)
-  | _ -> false;;	
-                      
+  | _ -> false;;
+
+
 exception X_syntax_error;;
 
 module type SEMANTICS = sig
@@ -69,17 +61,217 @@ end;;
 
 module Semantics : SEMANTICS = struct
 
-let annotate_lexical_addresses e = raise X_not_yet_implemented;;
 
-let annotate_tail_calls e = raise X_not_yet_implemented;;
 
-let box_set e = raise X_not_yet_implemented;;
+let split_list l =
+  let lst_rev = List.rev l in
+  let last = List.hd lst_rev in
+  let hds = List.rev (List.tl lst_rev) in
+  (hds, last)
+
+let rec find_idx x l count =
+  match l with
+  | [] -> raise Not_found
+  | hd::tl -> if (x = hd) then count else find_idx x tl (count + 1)
+
+  and find_bound_idxs x l major =
+    match l with
+    | [] -> raise Not_found
+    | hd::tl ->
+      try let minor = find_idx x hd 0 in
+        (major, minor)
+      with Not_found -> find_bound_idxs x tl (major + 1)
+
+
+
+  and create_var x params bounds =
+  try let idx = (find_idx x params 0) in
+    VarParam(x, idx)
+  with Not_found ->
+    try let (major, minor) = (find_bound_idxs x bounds 0) in
+      VarBound(x, major, minor)
+    with Not_found -> VarFree(x)
+
+  and annotate_lex_rec e params bounds =
+    match e with
+    | Const(x) -> Const'(x)
+    | Var(x) -> Var'(create_var x params bounds)
+    | If(test, dit, dif) -> If'((annotate_lex_rec test params bounds), (annotate_lex_rec dit params bounds), (annotate_lex_rec dif params bounds))
+    | Seq(exprs) -> Seq'(List.map (fun expr -> annotate_lex_rec expr params bounds) exprs)
+    | Set(Var(x), value) -> Set'((create_var x params bounds), (annotate_lex_rec value params bounds))
+    | Def(Var(x), expr) -> Def'(VarFree(x), (annotate_lex_rec expr params bounds))
+    | Or(exprs) -> Or'(List.map (fun expr -> annotate_lex_rec expr params bounds) exprs)
+    | LambdaSimple(vars, body) -> LambdaSimple'(vars, (annotate_lex_rec body vars (params::bounds)))
+    | LambdaOpt(vars, rest, body) -> LambdaOpt'(vars, rest, (annotate_lex_rec body (vars@[rest]) (params::bounds)))
+    | Applic(rator, rands) -> Applic'((annotate_lex_rec rator params bounds), (List.map (fun expr -> annotate_lex_rec expr params bounds) rands))
+    | _ -> raise X_syntax_error
+
+  and annotate_tail_rec e tp =
+  match e with
+  | Const'(x) -> Const'(x)
+  | Var'(x) -> Var'(x)
+  | If'(test, dit, dif) -> If'((annotate_tail_rec test false), (annotate_tail_rec dit tp), (annotate_tail_rec dif tp))
+  | Seq'(exprs) ->
+    (let (hds, tl) = split_list exprs in
+    let hds = (List.map (fun x -> annotate_tail_rec x false) hds) in
+    let tl = (annotate_tail_rec tl tp) in
+    Seq'(hds@[tl]))
+  | Set'(var, value) -> Set'(var, (annotate_tail_rec value false))
+  | Def'(var, expr) -> Def'(var, (annotate_tail_rec expr false))
+  | Or'(exprs) ->
+    (let (hds, tl) = split_list exprs in
+    let hds = (List.map (fun x -> annotate_tail_rec x false) hds) in
+    let tl = (annotate_tail_rec tl tp) in
+    Or'(hds@[tl]))
+  | LambdaSimple'(vars, body) -> LambdaSimple'(vars, (annotate_tail_rec body true))
+  | LambdaOpt'(vars, rest, body) -> LambdaOpt'(vars, rest, (annotate_tail_rec body true))
+  | Applic'(rator, rands) ->
+    let annotate_no_tail = (fun x -> annotate_tail_rec x false) in
+    if tp then ApplicTP'((annotate_tail_rec rator false), (List.map annotate_no_tail rands)) else Applic'((annotate_tail_rec rator false), (List.map annotate_no_tail rands))
+  | _ -> raise X_syntax_error
+
+let annotate_lexical_addresses e = annotate_lex_rec e [] [];;
+
+let annotate_tail_calls e = annotate_tail_rec e false;;
+
+
+(*creats the cartesian product of 2 lists*)
+let cartesian_product l l' =
+  List.concat (List.map (fun e -> List.map (fun e' -> (e,e')) l') l)
+
+(* check if a pair of tuples makes us box the param *)
+let check_box_conditions a_depth a_index a_is_expr b_depth b_index b_is_expr =
+   if (a_depth==b_depth || ((a_depth==(-1)&&(not a_is_expr)&&(a_index<b_index)) || (b_depth==(-1)&&((not b_is_expr))&&b_index<a_index)))
+      then false    else true;;
+
+
+(* lst is list of pairs of pairs [((a_depth,a_seq_index),(b_depth,b_seq_index)),...] *)
+let rec should_box lst =
+  match lst with
+  | [] ->  false
+  | ((a_depth,a_index,a_is_expr),(b_depth,b_index,b_is_expr)):: tail ->
+    if (check_box_conditions a_depth a_index a_is_expr b_depth b_index b_is_expr) then  true else (should_box tail);;
+
+(* make var one step depper (sort of major++)*)
+let make_var_deeper var =
+  match var with
+    | VarParam(name,major)->VarBound(name,0,major)
+    | VarBound(name,major,minor)->VarBound(name,major+1,minor)
+    | _ -> raise X_syntax_error;;
+
+
+let read_counter = ref 0 ;; (*rib num enumerator for the readings list*)
+let write_counter = ref 0 ;;  (*rib num enumerator for the writings list*)
+
+(*check for a specfic param if we should box it*)
+let rec is_box_needed param body =
+  read_counter  :=0;
+  write_counter :=0;
+  let writes= make_writes_list param body write_counter 0 false in
+  let reads = make_reads_list param body read_counter 0 false in
+  should_box (cartesian_product reads writes)
+
+
+  (*creats the writings list each entry is (ribnum,index in the sequance (always 0 if a single exp))*)
+and make_writes_list param body rib  seq_index is_expr =
+  let wrapper body = make_writes_list param body rib seq_index true in
+  let wrapper_list lst = List.flatten (List.map wrapper lst) in
+  match body with
+    | Const'(c) ->[]
+    | Var'(v)->[]
+    | Box'(v)-> []
+    | BoxGet'(v)->[]
+    | BoxSet'(var,expr)-> wrapper expr
+    | If'(test,dit,dif) -> wrapper_list [test;dit;dif]
+    | Seq'(lst)->seq_boxer make_writes_list lst param rib seq_index is_expr
+    | Set'(var,expr) -> let expr_writes= wrapper expr in
+        if (expr'_eq (Var'(var)) (Var'(param))) then  [(-1,seq_index,is_expr)]@expr_writes else expr_writes
+    | Or' (lst)->wrapper_list lst
+    | LambdaSimple'(params,nested_body) -> box_of_nested make_writes_list param nested_body rib seq_index
+    | LambdaOpt'(params,opt,nested_body) -> box_of_nested make_writes_list param nested_body rib seq_index
+    | Applic'(rator, rands) -> wrapper_list ([rator]@rands)
+    | ApplicTP' (rator, rands) -> wrapper_list ([rator]@rands)
+    | _ -> raise X_syntax_error
+
+(*creats the readings list each entry is (ribnum,index in the sequance (always 0 if a single exp))*)
+and make_reads_list param body rib seq_index is_expr=
+  let wrapper body = make_reads_list param body rib seq_index true in
+  let wrapper_list lst = List.fold_left (fun e c -> e @ c) [] (List.map wrapper lst) in
+  match body with
+    | Const'(c) ->[]
+    | Var'(v)->if (expr'_eq body (Var'(param))) then [(-1,seq_index,is_expr)] else []
+    | Box'(v)-> []
+    | BoxGet'(v)->[]
+    | BoxSet'(var,expr)-> wrapper expr
+    | If'(test,dit,dif) -> wrapper_list [test;dit;dif]
+    | Seq'(lst)->seq_boxer make_reads_list lst param rib seq_index is_expr
+    | Set'(var,expr) -> wrapper expr
+    | Or' (lst)->wrapper_list lst
+    | LambdaSimple'(params,nested_body) -> box_of_nested make_reads_list param nested_body rib seq_index
+    | LambdaOpt'(params,opt,nested_body) -> box_of_nested make_reads_list param nested_body rib seq_index
+    | Applic'(rator, rands) -> wrapper_list ([rator]@rands)
+    | ApplicTP' (rator, rands) -> wrapper_list ([rator]@rands)
+    | _ -> raise X_syntax_error
+
+(*handles seq index *)
+and seq_boxer f lst param rib index is_expr  =
+  match lst with
+    | [] -> []
+    | head::tail -> (f param head rib index is_expr)@ (seq_boxer f tail param rib (index+1) is_expr)
+
+(* handles nested lambdas for the boxing*)
+and box_of_nested func param nested_body rib index =
+  rib := !rib+1;
+  let rib_num = !rib in
+  let occurences = func (make_var_deeper param) nested_body rib index  true in
+    if (List.length occurences) >0
+      then [(rib_num,index, true)]
+      else  []
+
+(* creats the basic set' of the box to the var*)
+and box_pvar pvar=
+  match pvar with
+    | VarParam(name,minor) -> Set'(pvar,Box'(VarParam(name,minor)))
+    | _ -> raise X_syntax_error
+
+(*creats the body of the lambda after boxing if needed*)
+and lambda_handler params vars_to_box body =
+  let var_params = List.map (fun param -> VarParam(param,(find_idx param params 0))) params in (*creats VarParam from string*)
+  let need_to_be_boxed = List.filter (fun param -> is_box_needed param body)  var_params in (*filter only the VarParams that needs to be boxed*)
+  let vars_to_box_extended = (List.map make_var_deeper vars_to_box)@need_to_be_boxed in (*makes the pld var params that needed to be boxed on step deeper and merge the pld and new*)
+  let boxed_body = box_handler body  vars_to_box_extended in
+  match boxed_body with
+    | Seq'(lst) ->if (List.length need_to_be_boxed >0) (*if the body is seq then take only the list and create a new seq in order to avoid nesting*)
+      then Seq'((List.map box_pvar need_to_be_boxed )@lst)
+      else boxed_body
+    |_ -> if (List.length need_to_be_boxed >0)
+      then Seq'((List.map box_pvar need_to_be_boxed )@[boxed_body])
+      else boxed_body
+
+and box_handler expr vars_to_box =
+  let f expr =box_handler expr vars_to_box in
+  match expr with
+    | Const'(c) -> Const'(c)
+    | Var'(v)->if (List.mem v vars_to_box) then BoxGet'(v) else expr
+    | Def'(name,value)->Def'(name, (f value ))
+    | If'(test,dit,dif) -> If'((f test ),(f dit ),(f dif ))
+    | Seq'(lst)->Seq'(List.map f lst)
+    | Set'(var,value) ->let boxed_value= f value in
+         if (List.mem var vars_to_box) then BoxSet'(var,boxed_value) else Set'(var,boxed_value)
+    | Or' (lst)->Or'(List.map f lst)
+    | LambdaSimple'(params,body) -> LambdaSimple'(params, (lambda_handler params vars_to_box body ))
+    | LambdaOpt'(params, opt ,body) -> LambdaOpt'(params, opt, (lambda_handler (params@[opt]) vars_to_box body ))
+    | Applic'(rator, rands) -> Applic'((f rator),(List.map f rands))
+    | ApplicTP' (rator, rands) ->  ApplicTP'((f rator),(List.map f rands))
+    | _ -> raise X_syntax_error
+
+
+
+let box_set e = box_handler e [];;
 
 let run_semantics expr =
   box_set
     (annotate_tail_calls
        (annotate_lexical_addresses expr));;
-  
-end;; (* struct Semantics *)
-
 
+end;; (* struct Semantics *)
diff --git a/tag-parser.ml b/tag-parser.ml
index 138249e..1baaf52 100644
--- a/tag-parser.ml
+++ b/tag-parser.ml
@@ -1,4 +1,5 @@
 #use "reader.ml";;
+open Reader;;
 
 type constant =
   | Sexpr of sexpr
@@ -40,9 +41,11 @@ let rec expr_eq e1 e2 =
      (expr_eq e1 e2) &&
        (List.for_all2 expr_eq args1 args2)
   | _ -> false;;
-	
-                       
+
+
 exception X_syntax_error;;
+exception X_empty_list;;
+
 
 module type TAG_PARSER = sig
   val tag_parse_expressions : sexpr list -> expr list
@@ -50,16 +53,194 @@ end;; (* signature TAG_PARSER *)
 
 module Tag_Parser : TAG_PARSER = struct
 
+
 let reserved_word_list =
   ["and"; "begin"; "cond"; "define"; "else";
    "if"; "lambda"; "let"; "let*"; "letrec"; "or";
    "quasiquote"; "quote"; "set!"; "pset!"; "unquote";
-   "unquote-splicing"];;  
+   "unquote-splicing"];;
 
 (* work on the tag parser starts here *)
+let extract_string = function
+    | Symbol(x) -> x
+    | _ -> raise X_syntax_error;;
 
-let tag_parse_expressions sexpr = raise X_not_yet_implemented;;
+let rec is_prop_lst = function
+| Pair(a,b) -> is_prop_lst b
+| Nil -> true
+| _ -> false;;
 
-  
-end;; (* struct Tag_Parser *)
+let rec flatten_pairs = function
+  | Pair(a, b) -> a::flatten_pairs b
+  | Nil -> []
+  | _ -> raise X_this_should_not_happen;;
+
+let cast_pair_to_tuple = function
+  | Pair(a, Pair(b, Nil)) -> (a, b)
+  | _ -> raise X_this_should_not_happen;;
+
+let sexpr_split sexpr =
+  let rec sexpr_split_rec res = function
+    | Pair(Symbol(a),b) -> sexpr_split_rec (res@[a]) b
+    | Symbol(b) -> (res, b)
+    | _ -> raise X_this_should_not_happen in
+  sexpr_split_rec [] sexpr;;
+
+let remove_nested_seq seq =
+  match seq with
+  |Seq (list) -> list
+  |x -> [x];;
+
+let symbol_to_unused sym =
+  match sym with
+  |Symbol str -> Symbol (str^"@") (*@ is not a valid symbol char in the cfg hence we can append it (idea i got from avi in recption hour)*)
+  |_ -> raise X_this_should_not_happen
+
+let rec tag_parse = function
+  | Bool(x) -> Const(Sexpr(Bool(x)))
+  | Nil -> Const(Void)
+  | Number(x) -> Const(Sexpr(Number(x)))
+  | Char(x) -> Const(Sexpr(Char(x)))
+  | String(x) -> Const(Sexpr(String(x)))
+  | Symbol(x) -> Var(x)
+  | Pair(Symbol "begin", sexprs) -> tag_parse_explicit_seq sexprs
+  | Pair(Symbol "or", sexprs) -> tag_parse_or sexprs
+  | Pair(Symbol "and", sexprs) -> tag_parse (expand_and sexprs)
+  | Pair(Symbol "set!", Pair(car,Pair(cdr, Nil))) -> Set((tag_parse car) ,(tag_parse cdr))
+  | Pair(Symbol "pset!",binding) -> expand_pest binding
+  | Pair(Symbol "if", Pair(test, Pair(dit, dif))) -> tag_parse_if test dit dif
+  | Pair(Symbol "cond", ribs) -> tag_parse (expand_cond ribs)
+  | Pair(Symbol "quasiquote", Pair(exprs,Nil)) ->  tag_parse (expand_quasiquote  exprs)
+  | Pair(Symbol "quote", Pair(x, Nil)) -> Const(Sexpr(x))
+  | Pair(Symbol "lambda", Pair(args, body)) -> (lambda_handler args body)
+  | Pair(Symbol "define", Pair(Pair(name, args), body)) -> Def((tag_parse name), (lambda_handler args body))
+  | Pair(Symbol "define", Pair(name, Pair(expr, Nil))) -> Def((tag_parse name), (tag_parse expr))
+  | Pair(Symbol "let", Pair(bindings, body)) -> let_handler bindings body
+  | Pair(Symbol "let*", Pair(bindings, body)) -> tag_parse (let_star_handler bindings body)
+  | Pair(Symbol "letrec", Pair(bindings, body)) -> letrec_handler bindings body
+  | Pair(expr,exprs) -> Applic((tag_parse expr), List.map tag_parse (flatten_pairs exprs))
+
+  and lambda_handler args body =
+    let parsed_body = tag_parse_implicit_seq body in
+    match args with
+      | Symbol(x) -> LambdaOpt([], x, parsed_body)
+      | _ ->
+        (if (is_prop_lst args) then LambdaSimple((List.map extract_string (flatten_pairs args)), parsed_body)
+          else
+            (
+              let hds, tl = sexpr_split args in
+              LambdaOpt(hds, tl, parsed_body)
+            )
+        )
+
+  and let_handler bindings body =
+    let bindings = flatten_pairs bindings in (*this line produces a list of Pair(arg, Pair(val, Nil))*)
+    let bindings = List.map cast_pair_to_tuple bindings in (*this line produces Ocaml tuples' list of (val,arg)*)
+    let args, vals = List.split bindings in (*split all tuples into 2 lists - args and vals*)
+    let args = List.map extract_string args in
+    Applic(LambdaSimple(args, (tag_parse_implicit_seq body)), (List.map tag_parse vals))
+
+  and let_star_handler bindings body =
+    match bindings with
+    | Nil -> Pair(Symbol "let", Pair(Nil, body)) (*let with no bindings*)
+    | Pair(x, Nil) -> Pair(Symbol "let", Pair(Pair(x, Nil), body)) (*single binding (for let* with one bindings, or base case for recursion*)
+    | Pair(x, y) -> Pair(Symbol "let", Pair(Pair(x, Nil), (Pair((let_star_handler y body), Nil)))) (* (Pair(Symbol "let*", Pair(y, body))) *)
+    | _ -> raise X_this_should_not_happen
+
+  and letrec_handler bindings body =
+    let bindings = flatten_pairs bindings in (*this line produces a list of Pair(arg, Pair(val, Nil))*)
+    let bindings = List.map cast_pair_to_tuple bindings in (*this line produces Ocaml tuples' list of (val,arg)*)
+    let args, vals = List.split bindings in (*split all tuples into 2 lists - args and vals*)
+    let null_bindings = List.map (fun arg -> Pair(arg, Pair(Pair(Symbol "quote", Pair(Symbol "whatever", Nil)), Nil))) args in
+    let null_bindings = List.fold_right (fun cur acc -> Pair(cur, acc)) null_bindings Nil in
+    let sets = List.map2 (fun arg value -> (Pair(Symbol "set!", Pair(arg, value)))) args vals in
+    let sets_and_body = List.fold_right (fun cur acc -> Pair(cur, acc)) sets body in
+    let_handler null_bindings sets_and_body
 
+  and tag_parse_or sexpr =
+    match sexpr with
+      | Nil -> Const(Sexpr(Bool false))
+      | Pair(car,Nil)-> tag_parse car
+      | Pair(car,cdr) ->let exprs= List.map tag_parse (flatten_pairs sexpr) in
+          Or(exprs)
+      |_-> raise X_syntax_error
+
+  and tag_parse_if test dit dif =
+    match dif with
+      | Nil -> If(tag_parse test, tag_parse dit, Const(Void))
+      | Pair(sexpr,Nil)-> If(tag_parse test, tag_parse dit, tag_parse sexpr)
+      | _ -> raise X_syntax_error
+
+  and tag_parse_explicit_seq seq =
+    match seq with
+      | Nil -> Const Void
+      | Pair(car,Nil)-> tag_parse car
+      | Pair(car,cdr) -> let exprs=List.map tag_parse (flatten_pairs seq) in
+           Seq(List.flatten(List.map remove_nested_seq exprs))
+      |_->raise X_syntax_error
+
+  and tag_parse_implicit_seq seq =
+    match seq with
+      | Pair(car,Nil)-> tag_parse car (*A sequence with a single element*)
+      | Pair(car,cdr) -> let exprs=List.map tag_parse (flatten_pairs seq) in
+            Seq(List.flatten( List.map remove_nested_seq exprs))
+      | _->raise X_syntax_error
+
+  and expand_quasiquote sexprs =
+    match sexprs with
+      | Pair(Symbol "unquote",Pair(sexpr,Nil))-> sexpr
+      | Pair(Symbol "unquote-splicing",Pair(sexpr,Nil))-> raise X_syntax_error (*as seen in chapter 3 slide 100*)
+      | Symbol(x) -> Pair(Symbol "quote",Pair(sexprs,Nil))
+      | Nil -> Pair(Symbol "quote",Pair(Nil,Nil))
+      | Pair(Pair(Symbol "unquote-splicing",Pair(sexpr,Nil)),rest) ->Pair(Symbol "append",Pair(sexpr,Pair((expand_quasiquote rest),Nil)))
+      | Pair(car,Pair(Symbol "unquote-splicing",Pair(sexpr,Nil))) ->Pair(Symbol "cons",Pair((expand_quasiquote car),Pair(sexpr,Nil)))
+      | Pair(car,cdr) ->Pair(Symbol "cons",Pair((expand_quasiquote car),Pair((expand_quasiquote cdr),Nil)))
+      | _ -> raise X_syntax_error
+
+  and expand_cond ribs =
+    match ribs with
+      (*3rd form*)
+      | Pair(Pair(Symbol"else",seq),_) -> Pair(Symbol "begin", seq)
+      (*2nd form*)
+      | Pair(Pair(test,Pair(Symbol"=>",Pair(expr_f,Nil))),Nil) ->
+        let value_binding = Pair (Symbol "value", Pair ( test, Nil)) in
+        let lambda_binding = Pair(Pair (Symbol "f",Pair (Pair (Symbol "lambda", Pair (Nil, Pair (expr_f, Nil))),Nil)),Nil) in
+        let if_exp = Pair(Pair (Symbol "if",Pair (Symbol "value",Pair (Pair(Pair (Symbol "f", Nil), Pair (Symbol "value", Nil)),Nil))),Nil) in
+        Pair(Symbol "let",Pair(Pair (value_binding, lambda_binding ), if_exp))
+      | Pair(Pair(test,Pair(Symbol"=>",Pair(expr_f,Nil))),rest) -> let expanded_rest= expand_cond rest in
+        let value_binding = Pair (Symbol "value", Pair ( test, Nil)) in
+        let lambda_binding =Pair (Symbol "f",Pair (Pair (Symbol "lambda", Pair (Nil, Pair ( expr_f, Nil))),Nil)) in
+        let rest_binding = Pair(Pair (Symbol "rest",Pair (Pair (Symbol "lambda", Pair (Nil, Pair (expanded_rest, Nil))), Nil)),Nil) in
+        let if_exp = Pair(Pair (Symbol "if",Pair (Symbol "value",Pair (Pair (Pair (Symbol "f", Nil), Pair (Symbol "value", Nil)),
+          Pair(Pair (Symbol "rest", Nil), Nil)))),Nil) in
+          Pair(Symbol "let",Pair(Pair (value_binding,Pair(lambda_binding,rest_binding)),if_exp ))
+      (*1st form*)
+      | Pair(Pair(test,seq),Nil)-> Pair(Symbol "if",Pair(test,Pair(Pair(Symbol "begin",seq),Nil)))
+      | Pair(Pair(test,seq),rest) -> let expanded_rest= expand_cond rest in
+          Pair(Symbol "if",Pair(test,Pair(Pair(Symbol "begin",seq),Pair(expanded_rest,Nil))))
+      |_-> raise X_syntax_error
+
+
+  and expand_and sexpr =
+    match sexpr with
+      | Nil -> Bool true
+      | Pair(expr,Nil)-> expr
+      | Pair(car,cdr) -> let rest= expand_and cdr in
+          Pair((Symbol "if"), Pair(car, Pair(rest,Pair((Bool false),Nil))))
+      | _-> raise X_syntax_error
+
+  and expand_pest bindings =
+    let bindings = flatten_pairs bindings in (*this line produces a list of Pair(arg, Pair(val, Nil))*)
+    let bindings = List.map cast_pair_to_tuple bindings in (*this line produces Ocaml tuples' list of (val,arg)*)
+    let vars, vals = List.split bindings in (*split all tuples into 2 lists - args and vals*)
+    let args = List.map symbol_to_unused vars in (*creats unused vars*)
+    let body = List.map2 (fun e1 e2 -> Set((tag_parse e1), (tag_parse e2))) vars args in (*creats the set exprs*)
+    let body = body @[Const(Void)] in (*make sure we return void*)
+    let args = List.map extract_string args in
+    Applic(LambdaSimple(args, (Seq body)), (List.map tag_parse vals));;
+
+
+let tag_parse_expressions sexpr = List.map tag_parse sexpr;;
+
+
+end;; (* struct Tag_Parser *)
