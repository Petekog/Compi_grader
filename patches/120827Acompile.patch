diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000..af793be
Binary files /dev/null and b/.DS_Store differ
diff --git a/pc.ml b/pc.ml
old mode 100644
new mode 100755
index 6a25660..9f5f2ec
--- a/pc.ml
+++ b/pc.ml
@@ -187,3 +187,4 @@ let test_string nt str =
 end;; (* end of struct PC *)
 
 (* end-of-input *)
+
diff --git a/reader.ml b/reader.ml
index 32445c2..022c257 100644
--- a/reader.ml
+++ b/reader.ml
@@ -1,9 +1,11 @@
-
 #use "pc.ml";;
-
+open PC;;
 exception X_not_yet_implemented;;
 exception X_this_should_not_happen;;
-  
+exception X_comment;;  
+exception M_no_match;;  
+
+
 type number =
   | Fraction of int * int
   | Float of float;;
@@ -27,8 +29,8 @@ let rec sexpr_eq s1 s2 =
   | String(s1), String(s2) -> s1 = s2
   | Symbol(s1), Symbol(s2) -> s1 = s2
   | Pair(car1, cdr1), Pair(car2, cdr2) -> (sexpr_eq car1 car2) && (sexpr_eq cdr1 cdr2)
-  | _ -> false;;
-
+  |_ -> raise X_no_match;;
+  
 module Reader: sig
   val read_sexprs : string -> sexpr list
 end
@@ -39,8 +41,260 @@ let normalize_scheme_symbol str =
 	(fun ch -> (ch = (lowercase_ascii ch)))
 	s) then str
   else Printf.sprintf "|%s|" str;;
+  
+(*   
+  let read_sexprs string = raise X_comment;;
+  end;; *)
+let make_paired nt_left nt_right nt =
+  let nt = caten nt_left nt in
+  let nt = pack nt (function (_, e) -> e) in
+  let nt = caten nt nt_right in
+  let nt = pack nt (function (e, _) -> e) in
+    nt;;
+   
+let nt_whitespaces = star (char ' ');;
+
+let make_spaced nt = make_paired nt_whitespaces nt_whitespaces nt;;
+
+let maybe nt s =
+  try let (e, s) = (nt s) in
+      (Some(e), s)
+  with X_no_match -> (None, s);;
+
+let digit = range '0' '9';;
+
+let maybe nt s =
+  try let (e, s) = (nt s) in
+      (Some(e), s)
+  with X_no_match -> (None, s);;
+
+let get_option some_val =
+  match some_val with
+    | Some a -> a
+    | None -> None;;
+
+let string_metachar
+  = caten (char ('\\')) (const (fun ch -> ch='f'||ch='n'||ch='\\'||ch='t'||ch='r'||ch='"'));;
+
+let list_to_string_ci s =
+    String.concat "" (List.map (fun ch -> String.make 1 (lowercase_ascii ch)) s);;
+
+let replace_metachar s = 
+  match s with
+    | ('\\','f') -> '\012'
+    | ('\\','n') -> '\n'
+    | ('\\','t') -> '\t'
+    | ('\\','r') -> '\r'
+    | ('\\','\\') -> '\\'
+    | ('\\', '\"') -> '\"'
+    | (s, r) -> raise X_no_match;;
+
+let stringLiteralChar =  (const (fun ch -> ch!='\"' && ch!= '\\'));;
+
+let strignChar
+  = disj (pack string_metachar replace_metachar) stringLiteralChar;;
+
+let rec gcd a b =
+  if b = 0 then a else gcd b (a mod b);;
+
+let do_gcd a b = 
+  let x = gcd a b in
+  if x>0 then
+    (a/x, b/x)
+    else (a/(-1*x), b/(-1*x));;
+
+let tenEx num ex = 
+  let rec pow a = function
+    | 0 -> 1.
+    | 1 -> a
+    | n -> 
+      let b = pow a (n / 2) in
+      b *. b *. (if n mod 2 = 0 then 1. else a) in
+  let times = pow 10. ex in
+  num *. times;;
+
+let nt_boolt = make_spaced (word_ci "#t");;
+
+let nt_boolf = make_spaced (word_ci "#f");;
+
+let tok_lparen = make_spaced ( char '(');;
+
+let tok_rparen = make_spaced ( char ')');;
+
+let tok_addop = make_spaced ( char '+');;
 
+let tok_mulop = make_spaced ( char '*');;
 
-let read_sexprs string = raise X_not_yet_implemented;;
+let tok_semicolon = char ';';;
+
+let nt_rightquotation = 
+  make_paired (nt_epsilon) (nt_whitespaces) (char '"');;
+
+let nt_leftquotation =
+  make_paired (nt_whitespaces) (nt_epsilon) (char '"');;
+
+let disj_l l nt =
+  List.fold_right
+    (fun x acc -> disj (nt x) (acc)) 
+    l 
+    nt_none;;
+
+let nt_disj_nt_list l= 
+  List.fold_right
+    (fun x acc -> disj (x) (acc))
+    l
+    nt_none;;
+
+let nt_specialchar = disj_l ['!';'$';'^';'*';'-';'_';'+';'=';'<';'>';'?';'/';':'] char;;
+let symNums = range '0' '9';;
+let symLetters = range_ci 'a' 'z';;
+let symbolCharNoDot = disj (disj symNums symLetters) nt_specialchar;;
+let dot =  char '.';;
+let symChar = disj symbolCharNoDot dot;;
+
+let natural =
+  let digits =  plus digit in
+  pack digits (fun (ds) -> ds);;
+
+let sign = maybe (fun s -> 
+  match s with
+  | []-> raise X_no_match
+  | car::cdr ->  if (car = '+') || (car = '-') 
+      then (car, cdr) 
+        else raise X_no_match);;
+
+let integer = pack (caten sign natural) (fun s ->
+  match s with
+  |(Some a, num) -> a::num
+  |((None, num)) -> num
+  );;
+
+let fraction = caten (caten integer (char '/')) natural;;
+
+let floats = caten (caten integer dot) natural;;
+
+let exponent_float (((domi, symb), nomi), expo) = match symb with
+      |'.' -> (match expo with |'e'::rest -> Number(Float(float_of_string (list_to_string (domi@symb::nomi@expo))))
+                               |_ -> raise X_no_match)
+      |'_' -> (match expo with  | 'e'::rest -> Number(Float(float_of_string (list_to_string (domi@expo))))
+                                |_ -> raise X_no_match)
+      |_-> raise X_no_match
+                                
+let number s = 
+    let (((domi, symb), nomi), rest) = 
+      try (fraction s)
+      with PC.X_no_match -> (
+        try (floats s)
+        with PC.X_no_match -> pack integer (fun x -> ((x, '_'), ['1'])) s
+      ) 
+      in
+      let (scientific, rest) = maybe (char_ci 'e') rest in
+      let (exponent, rest) = match scientific with
+      |Some(e) -> let  (expo, rest) = integer rest in (['e']@expo, rest)
+      |None -> (['_'], rest) in
+      let (sexp) = 
+      disj exponent_float (fun (((domi, symb), nomi), exponent) -> match symb with
+      | '.' -> Number(Float(float_of_string (list_to_string (domi@symb::nomi))))
+      | '_' -> (Number(Fraction((int_of_string (list_to_string domi)), (int_of_string (list_to_string nomi)))))
+      | '/' -> let(domi, nomi) = do_gcd (int_of_string (list_to_string domi)) (int_of_string (list_to_string nomi)) in (Number(Fraction(domi, nomi)))
+      | _ -> raise X_no_match) (((domi, symb), nomi), exponent) in
+      (sexp, rest);;
+
+let charPrefix s = word "#\\" s;;
+
+let visiblesimplechar s = const (fun ch -> ch >' ') s;;
+
+let nt_namedChar s = 
+  let (e,s) = disj_l ["newline"; "nul"; "page"; "return"; "space"; "tab"] word_ci s in
+  let e = (list_to_string_ci e) in
+  match e with
+    |"newline" -> ('\n', s)
+    |"nul" -> ('\000', s)
+    |"page" -> ('\012',s)
+    |"return" -> ('\013',s)
+    |"space" -> (' ',s)
+    |"tab" ->('\t', s)
+    |e -> raise X_no_match;;
+
+let nt_regular_char s = match s with  
+          | car::cdr -> (car, cdr)
+          | _ -> raise X_no_match;;
+
+
+let rec pairs lst = match lst with
+    | [] -> Nil
+    |first:: rst -> Pair(first, pairs rst);;
+let rec nt_expr s =
+  let nt_nestedexp = pack (caten (caten tok_lparen nt_expr) tok_rparen)
+      (fun ((l, e), r) -> e) in
+  (disj nt_number nt_nestedexp) s
+and nt_string s = 
+  let st = (pack (caten (caten nt_leftquotation (star  strignChar)) nt_rightquotation)
+                (fun ((l, e), r) -> String(list_to_string e))) in st s
+and nt_bool = disj (pack nt_boolt (fun _-> Bool(true))) 
+  (pack nt_boolf (fun _-> Bool(false)))
+and nt_char = pack (caten (caten charPrefix (disj nt_namedChar nt_regular_char)) nt_whitespaces) 
+    (fun ((pre, vis), spaces) -> Char(vis))
+
+
+and nt_number =  not_followed_by number (disj symLetters nt_specialchar)
+and nt_symbol =  disj (fun x ->
+  let ((sym,slst), rest) = caten symChar (plus symChar) x in
+  (Symbol(list_to_string_ci (sym::slst)), rest)) 
+  (fun s -> let (sym,rest) = symbolCharNoDot s in (Symbol(list_to_string_ci [sym]), rest))
+
+and nt_list s = let p = pack 
+    (caten (caten tok_lparen (star (nt_sexpr))) tok_rparen) 
+      (fun ((l,exps), r) -> (List.fold_right(
+                (fun x acc  -> Pair(x ,acc)))) exps Nil)
+                 in p s
+
+and nt_dotted_list s = let dotted = pack 
+      (
+        caten (caten tok_lparen (plus nt_sexpr)) (caten (caten (make_spaced dot) nt_sexpr) tok_rparen)
+      )
+              (fun ((l, exps),((d,exp), r)) -> (List.fold_right((fun x acc -> Pair(x, acc)))) exps exp 
+              )
+              in dotted s
+and nt_all_quotes s = let (quete,sexp) = match s with
+      | '\''::rest -> ("quote",rest)
+      | '`'::rest -> ("quasiquote",rest)
+      | ','::rest -> (match rest with 
+                        | '@'::rest_2 -> ("unquote-splicing",rest_2)
+                        |_ -> ("unquote",rest)
+                      )
+      |_ -> raise X_no_match 
+      in let (s,r) = nt_sexpr sexp in 
+      (Pair(Symbol(quete), Pair(s, Nil)), r)
+
+and nt_sexpr s =  let nt_l = [
+  nt_number; nt_char;nt_string; nt_bool;nt_symbol;nt_list;nt_dotted_list;nt_all_quotes] in
+  (make_spaced(nt_disj_nt_list nt_l)) s;;
+
+let rec remove_last_nil s lst = match s with 
+  | Nil::[] -> lst
+  | car::[] -> (lst@[car])
+  | car::rest -> remove_last_nil rest (lst@[car])
+  | _ -> raise X_no_match;;
+ 
+
+let rec remove_all_comments s new_s = match s with
+        | '#'::';'::rest -> remove_sexprcomment rest new_s 
+        | ';'::rest -> remove_all_comments (remove_comment s) new_s
+        | chr::[] -> new_s@[chr]
+        | chr::rest -> remove_all_comments rest (new_s@[chr])
+        | _ -> new_s
   
-end;; (* struct Reader *)
+and remove_comment cmnt = let(_, s) = (star (const (fun ch -> ch!='\n'))) cmnt in 
+    match s with 
+    | '\n'::rest -> rest
+    | _ -> []
+
+and remove_sexprcomment cmnt new_s = let to_remove = remove_all_comments cmnt [] in 
+      let (_, rest) =  nt_sexpr to_remove in new_s@rest;;
+
+let read_sexprs string = let chars = remove_all_comments (string_to_list string) [] in
+  let (sexp, lst) = star nt_sexpr chars in        
+        match lst with | [] -> sexp | _ -> raise X_no_match ;;
+ (* struct Reader *)
+end;;
diff --git a/readme.txt b/readme.txt
index e69de29..af651d5 100644
--- a/readme.txt
+++ b/readme.txt
@@ -0,0 +1,6 @@
+Muhammad Bader 205530942
+Ahmad Jabareen 207491101
+
+
+I (We) assert that the work we submitted is 100% our own. We have not received any part from any other student in the class, nor have we give parts of it for use to others. Nor have we used code from other sources: Courses taught previously at this university, courses taught at other universities, various bits of code found on the Internet, etc.
+We realize that should our code be found to contain code from other sources, that a formal case shall be opened against us with va’adat mishma’at, in pursuit of disciplinary action.
\ No newline at end of file
diff --git a/semantic-analyser.ml b/semantic-analyser.ml
index 8e684f0..7ff92b5 100644
--- a/semantic-analyser.ml
+++ b/semantic-analyser.ml
@@ -1,5 +1,5 @@
 #use "tag-parser.ml";;
-
+open Tag_Parser;;
 type var = 
   | VarFree of string
   | VarParam of string * int
@@ -28,15 +28,6 @@ let rec expr'_eq e1 e2 =
   | Var'(VarFree v1), Var'(VarFree v2) -> String.equal v1 v2
   | Var'(VarParam (v1,mn1)), Var'(VarParam (v2,mn2)) -> String.equal v1 v2 && mn1 = mn2
   | Var'(VarBound (v1,mj1,mn1)), Var'(VarBound (v2,mj2,mn2)) -> String.equal v1 v2 && mj1 = mj2  && mn1 = mn2
-  | Box'(VarFree v1), Box'(VarFree v2) -> String.equal v1 v2
-  | Box'(VarParam (v1,mn1)), Box'(VarParam (v2,mn2)) -> String.equal v1 v2 && mn1 = mn2
-  | Box'(VarBound (v1,mj1,mn1)), Box'(VarBound (v2,mj2,mn2)) -> String.equal v1 v2 && mj1 = mj2  && mn1 = mn2
-  | BoxGet'(VarFree v1), BoxGet'(VarFree v2) -> String.equal v1 v2
-  | BoxGet'(VarParam (v1,mn1)), BoxGet'(VarParam (v2,mn2)) -> String.equal v1 v2 && mn1 = mn2
-  | BoxGet'(VarBound (v1,mj1,mn1)), BoxGet'(VarBound (v2,mj2,mn2)) -> String.equal v1 v2 && mj1 = mj2  && mn1 = mn2
-  | BoxSet'(VarFree v1,e1), BoxSet'(VarFree v2, e2) -> String.equal v1 v2 && (expr'_eq e1 e2)
-  | BoxSet'(VarParam (v1,mn1), e1), BoxSet'(VarParam (v2,mn2),e2) -> String.equal v1 v2 && mn1 = mn2 && (expr'_eq e1 e2)
-  | BoxSet'(VarBound (v1,mj1,mn1),e1), BoxSet'(VarBound (v2,mj2,mn2),e2) -> String.equal v1 v2 && mj1 = mj2  && mn1 = mn2 && (expr'_eq e1 e2)
   | If'(t1, th1, el1), If'(t2, th2, el2) -> (expr'_eq t1 t2) &&
                                             (expr'_eq th1 th2) &&
                                               (expr'_eq el1 el2)
@@ -56,9 +47,11 @@ let rec expr'_eq e1 e2 =
   | ApplicTP'(e1, args1), ApplicTP'(e2, args2) ->
 	 (expr'_eq e1 e2) &&
 	   (List.for_all2 expr'_eq args1 args2)
-  | _ -> false;;	
-                      
-exception X_syntax_error;;
+  | _ -> false;;
+                       
+exception X_invalid_expr;;
+exception Var_Not_Here_Param;;
+exception Var_Not_Here_Bound;;
 
 module type SEMANTICS = sig
   val run_semantics : expr -> expr'
@@ -69,17 +62,189 @@ end;;
 
 module Semantics : SEMANTICS = struct
 
-let annotate_lexical_addresses e = raise X_not_yet_implemented;;
+ (* struct Semantics *)
+
+(* let tags e = (Tag_Parser.tag_parse_expressions (Reader.read_sexprs e));; *)
+
+let rec lex env expr =  match expr with
+      | Const(x)-> Const'(x)
+      | Or(lst) -> Or'(List.map (lex env) lst )
+      | If(test, thn , alt) -> If'(lex env test, lex env thn , lex env alt)
+      | Seq(lst) -> Seq'(List.map (lex env) lst)
+      | LambdaSimple(slst, expr) -> LambdaSimple'(slst, lex (slst::env) expr) 
+      | LambdaOpt(slst ,s, expr) -> LambdaOpt'(slst, s, lex (slst::env) expr)
+      | Def(Var(s), vl) -> Def'(VarFree(s), lex env vl)
+      | Set(Var(vr),vl) -> Set'(check_vars env vr, lex env vl)
+      | Var(v) -> Var'(check_vars env v)
+      | Applic(expr, lst_expr) -> Applic'(lex env expr, (List.map (lex env) lst_expr))
+      | _-> raise X_invalid_expr
+
+
+and search_lst line_env vr n = 
+    match line_env with
+      | v::rest -> (if v=vr then n else search_lst rest vr (n+1))
+      | [] -> raise Var_Not_Here_Param
+
+and search_bound env vr minor = match env with
+      | env::rest -> (try(let major = (search_lst env vr 0) in (minor, major)) 
+              with Var_Not_Here_Param -> search_bound rest vr (minor+1))
+      | [] -> raise Var_Not_Here_Bound
+
+
+and check_vars env vr = match env with
+      | [] -> VarFree(vr)
+      | env::rest -> try VarParam(vr, search_lst env vr 0) 
+            with Var_Not_Here_Param -> (try(let (minor, major) = search_bound rest vr 0 
+                in VarBound(vr,minor, major))
+                  with Var_Not_Here_Bound -> VarFree(vr))                
+;;
+let annotate_lexical_addresses e = lex [] e ;;
+
+
+(* let lx e = List.map annotate_lexical_addresses (tags e);; *)
+
+let rec tails b e = 
+        if b != 0 then check_if_lambda e 
+        else
+
+        match e with
+      | If'(test, thn, alt) -> If'(test, check_if_app b thn, check_if_app b alt)
+      | Seq'(lst) -> (if (List.length lst) = 1 then check_if_app b (List.nth lst 0) 
+                        else let(lst, last) = pari_last lst [] in 
+                            Seq'(lst@[check_if_app b last]))
+      | Applic'(e, exps) ->  Applic'(e, List.map (tails 1) exps)
+      | LambdaSimple'(vars, body) -> LambdaSimple'(vars, check_if_app 0 body)
+      | LambdaOpt'(vars,s, body) -> LambdaOpt'(vars, s, check_if_app 0 body)
+      | Or'(lst) -> let(lst, last) = pari_last lst [] in Or'(lst@[check_if_app b last])
+      | _ -> e
+
+and pari_last lst_exp lst = 
+            if (List.length lst_exp) = 1 then 
+                  (lst, List.nth lst_exp 0) 
+                else match lst_exp with
+                  | f::rest -> pari_last rest (lst@[check_if_lambda f])
+                  | _ -> raise X_invalid_expr
+
+and check_if_app b expr = match expr with
+      | Applic'(x, w) -> ApplicTP'(x, List.map (tails 1) w)
+      | _ -> tails b expr
+      
+and check_if_lambda expr = match expr with
+    | LambdaSimple'(e, body) -> LambdaSimple'(e, check_if_app 0 body)
+    | LambdaOpt'(e, s, body) -> LambdaOpt'(e, s, check_if_app 0 body)
+    | Applic'(e, exps) ->  Applic'(e, List.map (tails 1) exps)
+    | Seq'(exps) -> Seq'(List.map (tails 1) exps)
+    | _-> expr
+      ;;
+
 
-let annotate_tail_calls e = raise X_not_yet_implemented;;
+let annotate_tail_calls e = match e with
+      | Applic'(e, exps) -> ApplicTP'(e, List.map (tails 1) exps)
+      | _ -> tails 0 e;;
 
-let box_set e = raise X_not_yet_implemented;;
+(* let tl e = List.map annotate_tail_calls (lx e);; *)
+
+let rec boxes exprs = match exprs with
+    | LambdaSimple'(vars, seq) -> LambdaSimple'(vars, chech_if_vars_need_to_box vars 0 (boxes seq) )
+    | LambdaOpt'(vars,s, seq) -> LambdaOpt'(vars, s, chech_if_vars_need_to_box (vars@[s]) 0 (boxes seq) )
+    | If'(test, thn, alt) -> If'(boxes test, boxes thn, boxes alt)
+    | Or'(seq) -> Or'(List.map boxes seq)
+    | Set'(var, vl) -> Set'(var, boxes vl)
+    | Seq'(seq) -> Seq'(List.map boxes seq)
+    | Def'(var, vl) -> Def'(var, boxes vl)
+    | Applic'(op, seq) -> Applic'(boxes op, List.map boxes seq)
+    | ApplicTP'(op, seq) -> ApplicTP'(boxes op, List.map boxes seq)
+    | _ -> exprs
+
+and chech_if_vars_need_to_box vars minor seq = 
+    match vars with
+        | v::rest -> (let change = levels v 0 seq in 
+              if change = 1 then 
+              (let seq = change_to_box v minor seq in 
+                    chech_if_vars_need_to_box rest (minor + 1) seq) 
+              else 
+                    chech_if_vars_need_to_box rest (minor + 1) seq
+              )
+        | [] -> seq
+
+(* on the stack *)
+and levels var f seq = match seq with
+      | Var'(VarParam(v, _)) -> 0
+      | Var'(VarBound(v, _, _)) -> 0
+      | Set'(v, expr) -> levels var f expr
+      | Seq'(seq) -> check_seq var f seq 
+      | LambdaOpt'( _) -> 0
+      | LambdaSimple'( _) -> 0
+      | If'(test ,thn, alt) -> let test = levels var f test in
+                                let thn = levels var f thn in
+                                let alt = levels var f alt in
+                                    if test=1 || thn=1 || alt=1 then 1 else 0
+      | Or'(seq) -> let seq1 = check_seq_app var 1 seq in
+                    let seq2 = check_seq var 1 seq in
+                      if seq2 = 1 || seq1=1 then 1 else 0
+      | Applic'(op, seq) -> let op = levels var f op in
+                              let seq1 = check_seq_app var 1 seq in
+                              let seq2 = check_seq var 1 seq in
+                                if seq2 = 1 || seq1=1 || op = 1 then 1 else 0
+      | ApplicTP'(op, seq) -> let op = levels var f op in
+                              let seq1 = check_seq_app var 1 seq in
+                              let seq2 = check_seq var 1 seq in
+                                if seq1 = 1 || seq2=1 || op = 1 then 1 else 0                              
+      | _ -> 0
+
+and check_lower_levels var f exp = match exp with 
+      | Var'(VarParam(v, _)) -> (f,0)
+      | Set'(VarParam(v, _), exp) -> if v=var then (let (read, write) = check_lower_levels var f exp in (read, if f>write then f else write)) else check_lower_levels var f exp
+      | Var'(VarBound(v, _, _)) -> if v=var then (1, 0) else (0,0)
+      | Set'(VarBound(v, _, _), exp) -> let (read, write) = check_lower_levels var f exp in (read, if v=var then 1 else write)
+      | LambdaSimple'(vars, seq) -> if (check_if_in_there vars var) then (0,0) else (match seq with | Seq'(seq) -> do_inner_job var f seq | _ -> check_lower_levels var f seq)
+      | LambdaOpt'(vars, s, seq) -> if ((check_if_in_there vars var)|| s=var) then (0,0) else (match seq with | Seq'(seq) -> do_inner_job var f seq | _ -> check_lower_levels var f seq)
+      | Applic'(op, seq) -> do_inner_job var f (op::seq)
+      | ApplicTP'(op, seq) -> do_inner_job var f (op::seq)
+      | Or'(seq) -> do_inner_job var f seq
+
+      | _-> (0,0)
+
+and do_inner_job var f seq = let (lst) = List.map (check_lower_levels var f) seq in
+            List.fold_right (fun (r, w) (r_acc, w_acc) -> let r = if r_acc = 1 || r = 1 then 1 else 0 in
+                                                          let w =  if w_acc = 1 || w = 1 then 1 else 0 in (r, w)) 
+                                                          lst (0, 0)
+
+and do_the_job (acc_read, acc_write) seq = match seq with
+              | (read, write):: rest -> if ((read=1 && acc_write>0) || write=1 && acc_read>0) then 1 else (do_the_job (read+acc_read, write+acc_write) rest)
+              | [] -> 0
+
+and check_seq var f seq = let(seq_read_write) = List.map (check_lower_levels var f) seq in do_the_job (0,0) seq_read_write
+
+and check_seq_app var f seq = let(seq_read_write) = List.map (levels var f) seq in if (List.exists (fun x-> x=1) seq_read_write) then 1 else 0
+
+and change_to_box var minor seq = let seq = match seq with | Seq'(seq) -> [Set'(VarParam(var, minor), Box'(VarParam(var, minor)))]@seq | _ -> [Set'(VarParam(var, minor), Box'(VarParam(var, minor)))]@[seq] in 
+            Seq'(List.map (change_to_box_helper var) seq)
+
+and check_if_in_there vars var = List.exists (fun x-> x=var) vars
+
+and change_to_box_helper var exp  = match exp with
+      | Set'(VarParam(v, pos), exp) -> BoxSet'(VarParam(v, pos), change_to_box_helper var exp)
+      | Set'(VarBound(v, min, maj), exp) -> BoxSet'(VarBound(v, min, maj), change_to_box_helper var exp)
+      | Var'(v) ->  (match v with | VarParam(vr, m) -> if vr=var then BoxGet'(v) else exp
+                                  | VarBound(vr, min, maj) -> if vr=var then BoxGet'(v) else exp
+                                  |_ -> exp)
+      | Applic'(op, seq) -> Applic'(change_to_box_helper var op, List.map (change_to_box_helper var) seq)
+      | ApplicTP'(op, seq) -> ApplicTP'(change_to_box_helper var op, List.map (change_to_box_helper var) seq)
+      | If'(test, thn, alt) -> If'(change_to_box_helper var test, change_to_box_helper var thn, change_to_box_helper var alt)
+      | Or'(seq) -> Or'(List.map (change_to_box_helper var) seq)
+      | Seq'(seq) -> Seq'(List.map (change_to_box_helper var) seq)
+      | LambdaSimple'(vars, seq) -> if check_if_in_there vars var then exp else LambdaSimple'(vars, change_to_box_helper var seq)
+      | LambdaOpt'(vars, s, seq) -> if (check_if_in_there vars var) || s=var then exp else LambdaOpt'(vars, s, change_to_box_helper var seq)
+      | _ -> exp;;
+
+let box_set e = boxes e;;
+
+(* let bx e = List.map box_set (tl e);; *)
 
 let run_semantics expr =
   box_set
     (annotate_tail_calls
        (annotate_lexical_addresses expr));;
-  
-end;; (* struct Semantics *)
-
 
+end;;
\ No newline at end of file
diff --git a/tag-parser.ml b/tag-parser.ml
index 138249e..85f9f30 100644
--- a/tag-parser.ml
+++ b/tag-parser.ml
@@ -1,5 +1,5 @@
 #use "reader.ml";;
-
+open Reader;;
 type constant =
   | Sexpr of sexpr
   | Void
@@ -43,11 +43,20 @@ let rec expr_eq e1 e2 =
 	
                        
 exception X_syntax_error;;
+exception X_Reserve_Word;;
+exception X_empty_lambda_body;;
+exception X_not_supported_forum;;
+exception X_invalid_let;;
+exception X_invalid_let_star;;
+exception X_invalid_let_rec;;
+exception M_no_match;;
+exception X_invalid_MIT_define;;
+exception X_invalid_quatisquote;;
 
 module type TAG_PARSER = sig
   val tag_parse_expressions : sexpr list -> expr list
-end;; (* signature TAG_PARSER *)
-
+ (* signature TAG_PARSER *)
+end
 module Tag_Parser : TAG_PARSER = struct
 
 let reserved_word_list =
@@ -58,8 +67,243 @@ let reserved_word_list =
 
 (* work on the tag parser starts here *)
 
-let tag_parse_expressions sexpr = raise X_not_yet_implemented;;
+let reserved_word_list =
+  ["and"; "begin"; "cond"; "define"; "else";
+   "if"; "lambda"; "let"; "let*"; "letrec"; "or";
+   "quasiquote"; "quote"; "set!"; "pset!"; "unquote";
+   "unquote-splicing"];;
+
+let nt_disj_nt_list l= 
+ List.fold_right
+  (fun x acc -> disj (x) (acc))
+  l
+  nt_none;;
+
+let frac_to_const e = match e with
+    | Number(Fraction(nomi, domi)) -> Const(Sexpr(e))
+    | _ -> raise X_no_match;;
+
+let float_to_const e = match e with
+    | Number(Float(num)) -> Const(Sexpr(e))
+    | _ -> raise X_no_match;;
+    
+let number_to_const e = disj frac_to_const float_to_const e;;
+
+let reserve_word e = ormap (fun acc -> e = acc) reserved_word_list;;
+
+let check_var s = if (reserve_word s) then raise X_Reserve_Word else Var(s);;
+
+let quote_body body = match body with  (* forum *)
+      | Pair(exp, Nil) -> Const(Sexpr(exp))
+      | _-> raise X_no_match;;
+      
+let if_body body = match body with
+        | Pair(test, Pair(dit, rest))-> (match rest with
+                  | Pair(dut, Nil) -> (test, dit, dut)
+                  | Nil -> (test, dit, Nil)
+                  |_ -> raise X_no_match)
+        | _ -> raise X_no_match;;
+
+let rec proper_list lst = match lst with  
+          | Nil-> true
+          | Pair(_ , cdr) -> proper_list cdr
+          | _ -> false;;
+
+
+let rec simple_lambda_args_helper args lst = match args with         
+        | Pair(Symbol(s), rest) -> simple_lambda_args_helper rest (lst@[s])
+        | Nil -> lst 
+        | _-> raise X_no_match;;
+
+let simple_lambda_args args = simple_lambda_args_helper args [];;
+
+let rec opt_lambda_args_helper args lst = match args with         
+        | Pair(Symbol(s), rest) -> opt_lambda_args_helper rest (lst@[s])
+        | Symbol(after_dot) -> (lst, after_dot)
+        |_-> raise X_no_match;;
+
+let rec inside_pair_helper args lst = match args with         
+      | Pair(s, rest) -> inside_pair_helper rest (lst@[s])
+      | Nil -> lst
+      | _ -> (lst@[args]);;
+
+let inside_pair args = inside_pair_helper args [];;
+
+let lambda_opt_args args = opt_lambda_args_helper args [];;
+
+let parse_set body = match body with
+          | Pair(var, Pair(value, Nil)) -> (var, value)
+          | _-> raise X_no_match;;
 
+let rec let_vars vexps vars = match vexps with 
+          | Pair(Pair(Symbol(s), body), rest) -> let_vars rest (vars@[s])
+          | Nil -> vars
+          | _-> raise X_invalid_let;;
+let rec mit_vars exp acc= match exp with 
+          | Pair(Symbol(s),rest) -> mit_vars rest (acc@[s])
+          | Nil -> acc
+          | _ -> raise X_invalid_MIT_define
+;;
+
+let rec let_exps vexps exps = match vexps with 
+          | Pair(Pair(s, Pair(body, Nil)), rest) -> let_exps rest (exps@[body])
+          | Nil -> exps
+          | _ -> raise X_invalid_let;;
+let rec flip lst = match lst with 
+          | first::rest -> (flip rest)@[first]
+          | [] -> []
+
+let rec whatever_rec exps = match exps with
+          | Pair(Pair(s, exp), rest) -> Pair(Pair(s, Pair(String("whatever"), Nil)), whatever_rec rest)
+          | Nil -> Nil
+          | _ -> raise X_invalid_let_rec;;
+          
+let rec whatever_set exps body = match exps with 
+          | Pair(Pair(s, exp), rest) -> Pair(Pair(Symbol("set!"), Pair(s, exp)), (whatever_set rest body))
+          | Nil -> Pair(Pair(Symbol("let"), Pair(Nil, body)), Nil)
+          | _ -> raise X_invalid_let_rec;;
+
+let rec tag_parse e = match e with
+      | Number(num) -> number_to_const e
+      | Bool(b) -> Const(Sexpr(e))
+      | Char(c) -> Const(Sexpr(e))
+      | String(s) -> Const(Sexpr(e))
+      | Symbol(s) -> check_var s
+      | Pair(Symbol("quote"), body) -> quote_body body (* forum *)
+      | Pair(Symbol("define"),Pair(Pair(Symbol(s),lst), rest)) -> expand_define (Pair(Pair(Symbol(s),lst), rest))
+      | Pair(Symbol("define"), body) -> parse_define body
+      | Pair(Symbol("if"), body) -> parse_if body                 
+      | Pair(Symbol("lambda"), Pair(args, exps)) -> parse_lambda args exps
+      | Pair(Symbol("and"), rest) -> parse_and rest
+      | Pair(Symbol("or"), rest) -> Or(List.map tag_parse (inside_pair rest))
+      | Pair(Symbol("set!"), rest) -> let (var, value) = parse_set rest in Set(tag_parse var, tag_parse value)
+      | Pair(Symbol("begin"), rest) -> parse_begin_sequence rest
+      | Pair(Symbol("pset!"), rest) -> expand_pset rest 
+      | Pair(Symbol("let"), rest) -> expand_let rest
+      | Pair(Symbol("let*"), rest) -> expand_let_star rest
+      | Pair(Symbol("letrec"), rest) -> expand_let_rec rest
+      | Pair(Symbol("cond"), rest) -> expand_cond rest 
+      | Pair(Symbol("quasiquote"),Pair(exp,Nil)) -> expand_quasiquote exp
+      | Pair(car, cdr) -> Applic(tag_parse(car), List.map tag_parse (inside_pair cdr))
+      | Nil -> Const(Void)
+
+
+and parse_if body = let (test, dit, dut) = if_body body in
+              (match dut with
+              | Nil -> If(tag_parse(test), tag_parse(dit), Const(Void))
+              | _-> If(tag_parse(test), tag_parse(dit), tag_parse(dut))
+              )
+              
+and parse_lambda args exps = let body = match exps with | Pair(b, q) -> exps | _ -> raise X_empty_lambda_body in (* body not empty, check -> improper body list *)
+                        let seq = Seq(List.map tag_parse (inside_pair body)) in
+                            if (proper_list args) 
+                                    then 
+                                    (let (args) = simple_lambda_args args in LambdaSimple(args, seq)) 
+                                    else 
+                                    (let (args, last) = lambda_opt_args args in LambdaOpt(args, last, seq))
   
-end;; (* struct Tag_Parser *)
+and parse_and rest = match rest with (* forum *)
+                | Nil -> Const(Sexpr(Bool(true)))
+                | Pair(exp, Nil)-> tag_parse exp
+                | Pair(exp, rest) -> If(tag_parse exp, tag_parse (Pair(Symbol("and"), rest)), Const(Sexpr(Bool(false))))
+                |_-> raise X_no_match 
+       
+and parse_define body =  match body with
+                | Pair(var, vl) -> let value = (match vl with 
+                                        | Pair(vl, Nil) -> vl
+                                        |_-> raise X_syntax_error)
+                in Def(tag_parse var, tag_parse value)
+                | _ -> raise X_no_match
+
+and parse_begin_sequence body = match body with
+        | Nil -> Const(Void)
+        | Pair(s, Nil) -> tag_parse s
+        | Pair(s, rest) -> Seq(no_base_begin body [])
+        |_ -> raise X_not_supported_forum
+
+and no_base_begin body seq = match body with
+        | Nil -> seq
+        | Pair(Pair(Symbol("begin") ,rest), rest2) -> no_base_begin rest2 (no_base_begin rest seq) 
+        | Pair(exp ,rest) -> no_base_begin rest (seq@[tag_parse exp])
+        | _ -> seq@[tag_parse body]
+
+and expand_let exps_body = match exps_body with
+          | Pair(exps, body) -> (let body = inside_pair body in
+                                let vars = (let_vars exps []) in
+                                let exps = (let_exps exps []) in
+                                Applic(LambdaSimple(vars, Seq(List.map tag_parse body)), List.map tag_parse exps)
+                                )
+          | _ -> raise X_invalid_let
+
+and expand_let_star exps_body = match exps_body with
+            | Pair(Nil, body) -> expand_let exps_body
+            | Pair(Pair(s, Nil), body) -> expand_let exps_body
+            | Pair(Pair(exp, rest), body) -> expand_let (Pair(Pair(exp, Nil), Pair(Pair(Symbol("let*"), Pair(rest, Pair(body, Nil))), Nil)))
+            | _ -> raise X_invalid_let_star
+
+and expand_let_rec exps_body = match exps_body with
+          | Pair(exps, body) -> let whatever = whatever_rec exps in
+                                let whatever_set = whatever_set exps body in
+                                tag_parse (Pair(Symbol("let"), Pair(whatever, whatever_set)))
+          | _ -> raise X_invalid_let_rec
+                                        
+and zip paired_lists =
+      match paired_lists with
+      | [], [] -> []
+      | h1::t1, h2::t2 -> (h1, h2)::(zip (t1, t2))
+      | _ -> raise X_not_supported_forum
+
+and expand_pset lst = 
+                    let cdrE =  let_exps lst [] in
+                    let carE =  let_vars lst [] in
+                    Seq(expand_pset_rec ((zip (carE, cdrE))) [])
+
+and expand_pset_rec lst ret = match lst with 
+                | (car, cdr)::rest -> expand_pset_rec rest ret@[Set(Var(car), tag_parse cdr)]
+                | [] -> ret
+                    
+and expand_cond lst = match lst with 
+                | Nil -> Const(Void)
+                | Pair(Pair(exp, Pair(Symbol("=>"), Pair(func, Nil))), rest) ->
+                  
+                let theValue = Pair(Symbol("value"),Pair(exp,Nil)) in 
+                let func = Pair(Symbol("f"),Pair(Pair(Symbol("lambda"),Pair(Nil, Pair(func,Nil))),Nil)) in             
+                      let res =  Pair(Symbol("rest"), Pair(Pair(Symbol("lambda"),Pair(Nil, (Pair(Pair(Symbol("cond"), rest),Nil)))),Nil)) in
+                      let body = (Pair (Symbol "if",
+                        Pair (Symbol "value",
+                        Pair (Pair (Pair (Symbol "f", Nil), Pair (Symbol "value", Nil)),
+                          Pair (Pair (Symbol "rest", Nil), Nil))))) in
+                        let let_args = Pair(theValue,Pair(func, Pair(res, Nil))) in
+                        let let_expr = Pair(Symbol("let"), Pair(let_args, Pair(body,Nil))) in
+                        tag_parse let_expr
+                | Pair (Pair(Symbol("else"), seq),_ ) -> tag_parse(Pair(Symbol("begin"),seq))
+                | Pair(Pair(exp, seq), rest) -> let test = tag_parse(exp) in
+                                  let thenn = tag_parse (Pair(Symbol("begin"),seq)) in 
+                                  let elsee = tag_parse (Pair(Symbol("cond"), rest))  in 
+                                  If(test, thenn, elsee)
+                | _ -> raise X_no_match
+
+and expand_define exp = match exp with
+  | Pair(Pair(Symbol(s),lst), rest) ->
+          let body_of_lambda = tag_parse rest in
+          let vars = mit_vars lst [] in
+          Def(tag_parse (Symbol(s)), LambdaSimple(vars, body_of_lambda))
+  | _ -> raise X_invalid_MIT_define
+
+
+and expand_quasiquote exp = match exp with
+  | Pair(Symbol("unquote"), Pair(exp,Nil)) -> tag_parse exp
+  | Pair(Symbol("unquote-splicing"),Pair(exp,Nil)) -> raise X_invalid_quatisquote
+  | Pair(Pair(Symbol("unquote"),Pair(exp,Nil)),rest) -> Applic(Var("cons"), [(tag_parse exp); (expand_quasiquote rest)])
+  | Pair(Pair(Symbol("unquote-splicing"),Pair(exp,Nil)),rest) -> Applic(Var("append"), [(tag_parse exp); (expand_quasiquote rest)])
+  | Nil -> Const(Sexpr(Nil))
+  | Pair(exp,rest) -> Applic(Var("cons"),[Const(Sexpr(exp)); (expand_quasiquote rest)])
+
+
+  | _ -> Const(Sexpr(exp));;
+
+
+let tag_parse_expressions e = List.map tag_parse e;;             
+end;;
+
 
