diff --git a/.vscode/launch.json b/.vscode/launch.json
new file mode 100644
index 0000000..53ec286
--- /dev/null
+++ b/.vscode/launch.json
@@ -0,0 +1,17 @@
+{
+    // Use IntelliSense to learn about possible attributes.
+    // Hover to view descriptions of existing attributes.
+    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
+    "version": "0.2.0",
+    "configurations": [
+        
+        {
+            "name": "OCaml",
+            "type": "ocamldebug",
+            "request": "launch",
+            "program": "${workspaceRoot}/main.d.byte",
+            "console": "internalConsole",
+            "stopOnEntry": false
+        }
+    ]
+}
\ No newline at end of file
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..16de0f4
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,6 @@
+{
+    "ocaml.sandbox": {
+        "kind": "opam",
+        "switch": "4.05.0"
+    }
+}
\ No newline at end of file
diff --git a/compiler.patch b/compiler.patch
new file mode 100644
index 0000000..e69de29
diff --git a/reader.ml b/reader.ml
index 32445c2..d7c177e 100644
--- a/reader.ml
+++ b/reader.ml
@@ -1,12 +1,14 @@
 
 #use "pc.ml";;
+open PC;;
+
 
 exception X_not_yet_implemented;;
 exception X_this_should_not_happen;;
   
 type number =
   | Fraction of int * int
-  | Float of float;;
+  | Float of float 
   
 type sexpr =
   | Bool of bool
@@ -31,6 +33,8 @@ let rec sexpr_eq s1 s2 =
 
 module Reader: sig
   val read_sexprs : string -> sexpr list
+   
+
 end
 = struct
 let normalize_scheme_symbol str =
@@ -40,7 +44,369 @@ let normalize_scheme_symbol str =
 	s) then str
   else Printf.sprintf "|%s|" str;;
 
+let make_paired nt_left nt_right nt =
+    let nt = caten nt_left nt in
+    let nt = pack nt (function (_, e) -> e) in
+    let nt = caten nt nt_right in
+    let nt = pack nt (function (e, _) -> e) in
+    nt;;
+
+  let nt_dot = char '.';;
+  let nt_left = char '(' ;;
+  let nt_right = char ')' ;;
+  let nt_start_comment = char ';' ;;
+  let nt_end_of_line = char '\n';;
+  let nt_whitespace = char ' ';; 
+  let nt_e = char_ci 'e';;  
+  let pre_sexpr_comments = word "#;" ;;
+  let nt_whitespaces = star (char ' ');;
+
+  let make_spaced nt =
+      make_paired (star nt_whitespace) (star nt_whitespace) nt;;
+    
+let nt_whitespace_pack = pack nt_whitespace (fun s -> []);; 
+let nt_whitespaces_pack = pack nt_whitespaces (fun s -> []);;  
+
+let end_line = pack nt_end_of_line (fun e -> []) ;;
+let nt_end_comment = disj end_line nt_end_of_input ;; 
+
+let dotted = word ". ";; 
+        
+let nt_ignore = range (char_of_int 0) (char_of_int 32);;
+
+let rec list_to_pairs l = 
+  match l with
+  | [] -> Nil
+  | car :: cdr -> Pair(car, list_to_pairs cdr);;
+
+let rec make_improper sexprs sexpr =
+  match sexprs with
+| [] -> sexpr
+| car :: cdr -> Pair(car, make_improper cdr sexpr);;
+
+let dotted_to_pairs l = 
+  match l with
+| ((sexprs, dot), sexpr) -> (make_improper sexprs sexpr);; 
+   
+let nt_nill = 
+let empty_list = make_paired nt_left nt_right nt_whitespaces in  
+  pack empty_list (fun e -> Nil);;
+
+let rec_expr nt= delayed (fun _ -> nt);;   
+
+let return_nothing nt= pack nt (fun _ -> []);; 
+
+  
+
+(* ---------------------------⟨Boolean⟩---------------------------------------------------------------*)
+
+
+  let nt_bool = 
+    let nt_true = word_ci "#t" in 
+    let nt_false = word_ci "#f" in 
+    let p_t = pack nt_true (fun b -> Bool(true)) in 
+    let p_f = pack nt_false (fun b -> Bool(false)) in 
+    disj p_t p_f;; 
+    
+(* ----------------------⟨Char⟩--------------------------------------------------------------------*)
+
+
+  let nt_visible = const (fun ch -> ch > ' ');;
+
+  let nt_visible_simple_char = 
+      pack nt_visible (fun r -> Char(r));;
+
+
+  let nt_named_char = 
+    disj_list 
+     [
+      (pack(word_ci "newline") (fun c -> Char(char_of_int 10)));
+      (pack (word_ci "nul") (fun c -> Char(char_of_int 0)));
+      (pack (word_ci "page") (fun c -> Char(char_of_int 12)));
+      (pack (word_ci "return") (fun c -> Char(char_of_int 13)));
+      (pack (word_ci "space") (fun c -> Char(char_of_int 32)));
+      (pack (word_ci "tab") (fun c -> Char(char_of_int 9)))
+      ];;
+
+  let nt_char =
+    let nt_char_prefix = word_ci "#\\" in 
+    let nt_disj = disj nt_named_char nt_visible_simple_char in
+    let nt_c = caten nt_char_prefix nt_disj in    
+    pack nt_c (fun (_,e)-> e);;   
+    
+    
+(* -------------Number-----------------------------------------------------------------------------*)
+
+(*⟨Number⟩ ::= ⟨Integer⟩ | ⟨Float⟩ | ⟨Fraction⟩   *)
+
+
+let rec gcd a b =
+  if b = 0 then a else gcd b (a mod b);;
+
+
+let nt_digit = range '0' '9';;
+
+let nt_natural =
+  let nt_plus = plus nt_digit in 
+  pack nt_plus (fun n -> int_of_string(list_to_string n));; 
+
+let nt_natural_for_float =
+    let nt_plus = plus nt_digit in 
+    pack nt_plus (fun n -> (list_to_string n));;  
+
+  let nt_sign_val = function
+  | Some(e) -> e
+  | None -> '+';; 
+
+(*   ⟨Integer⟩ ::= (+ | -)? ⟨Natural⟩    *)
+let nt_integer =    
+let nt_sign_minus_plus = maybe (one_of "-+") in   
+let nt_sign = pack nt_sign_minus_plus nt_sign_val in
+let nt_int = caten nt_sign nt_natural in 
+pack nt_int (fun (s,n)-> if(s = '-') then Fraction(n * (-1),1) 
+else Fraction(n,1));;
+
+
+(*⟨Float⟩ ::= ⟨Integer⟩ . ⟨Natural⟩   *)
+
+let nt_float = 
+  let nt_sign_minus_plus = maybe (one_of "-+") in   
+  let nt_sign = pack nt_sign_minus_plus nt_sign_val in
+  let nt_int = caten nt_sign nt_natural in 
+  let nt_befor_dot =  pack nt_int (fun (s,n)-> if(s = '-') then (n * (-1)) else n) in
+  let nt_float_num = caten (caten nt_befor_dot nt_dot) nt_natural_for_float in 
+  pack nt_float_num (fun ((befordot,ch),afterdot) ->  
+  let float_string = String.concat "." [(string_of_int befordot) ; afterdot] in 
+  Float(float_of_string float_string));; 
+
+ 
+(*⟨Fraction⟩ ::= ⟨Integer⟩ / ⟨Natural⟩ *)
+
+
+let nt_fraction =
+  let nt_slash = char '/' in
+  let nt_sign_minus_plus = maybe (one_of "-+") in   
+  let nt_sign = pack nt_sign_minus_plus nt_sign_val in
+  let nt_int = caten nt_sign nt_natural in 
+  let nt_numerator =  pack nt_int (fun (s,n)-> if(s = '-') then (n * (-1)) else n) in 
+  let nt_frac_num = caten (caten nt_numerator nt_slash) nt_natural in 
+  pack nt_frac_num (fun ((numerator,ch),denominator) -> 
+                    let nt_gcd = abs(gcd numerator denominator) in 
+                    Fraction(numerator / nt_gcd,denominator / nt_gcd));; 
+
+
+(* ------Scientific notation-------------------------------------------*)
+
+let make_scientific_fraction b a= 
+  match (b,a) with
+  | (Fraction(b,1), Fraction(a,1)) -> (b,a)
+  | _ -> raise X_no_match ;;
+
+let make_scientific_float b a= 
+  match (b,a) with
+  | (Float(b), Fraction(a,1)) -> (b,a)
+  | _ -> raise X_no_match ;;  
+
+
+let nt_scientific_integer = 
+  let nt_sc = caten nt_integer nt_e in 
+  let nt_sc = pack nt_sc (fun (n,e) -> n) in 
+  let nt_sc = caten nt_sc nt_integer in 
+  let nt_sc = pack nt_sc (fun (b,a) -> (make_scientific_fraction b a)) in 
+  let nt_sc = pack nt_sc (fun (b, a) -> Float((float_of_int b) *. (10.0 ** (float_of_int a)))) in
+  nt_sc;; 
+
+
+let nt_scientific_float = 
+    let nt_sc = caten nt_float nt_e in 
+    let nt_sc = pack nt_sc (fun (n,e) -> n) in 
+    let nt_sc = caten nt_sc nt_integer in  
+    let nt_sc = pack nt_sc (fun (b,a) -> (make_scientific_float b a)) in 
+    let nt_sc = pack nt_sc (fun (b, a) -> Float(b *. (10.0 ** (float_of_int a)))) in
+    nt_sc;;
+
+(* -------------------------------------------------*)
+
+let nt_number = 
+    let nt_num = disj_list[nt_scientific_integer;nt_scientific_float;nt_float;nt_fraction;nt_integer] in
+    pack nt_num (fun n -> Number(n));;
+
+
+(* ------Symbol------------------------------------------------------------------------------------*)
 
-let read_sexprs string = raise X_not_yet_implemented;;
+
+let nt_letters = range_ci 'A' 'Z';;
+
+(* ⟨SymbolCharNoDot⟩ *)
+
+let nt_symbol_char_no_dot = 
+let nt_scnd =   
+  disj_list [nt_digit; nt_letters; one_of "!$^*-_=+<>/?:"] in 
+  pack nt_scnd (fun s -> (lowercase_ascii s));; 
+
+
+(*⟨SymbolChar⟩ ::= ⟨SymbolCharNoDot⟩ | ⟨Dot⟩   *)    
+let nt_symbol_char = 
+ let nt_sc = disj nt_symbol_char_no_dot nt_dot in 
+ pack nt_sc (fun s -> (lowercase_ascii s));;
+
+          
+(*⟨Symbol⟩ ::= ⟨SymbolCharNoDot⟩ | ⟨SymbolChar⟩ ⟨SymbolChar⟩+ *)    
+let nt_symbol = 
+  let s_c_no_dot = pack nt_symbol_char_no_dot (fun c -> Char.escaped c) in 
+  let sc_scplus_catten = caten nt_symbol_char (plus nt_symbol_char) in 
+  let sc_scplus = pack sc_scplus_catten (fun (c,cl) -> String.concat "" [Char.escaped c; (list_to_string cl)]) in 
+  let nt_ans = disj sc_scplus s_c_no_dot in 
+  pack nt_ans (fun s -> Symbol(s));;
+    
   
-end;; (* struct Reader *)
+
+(* ------------String------------------------------------------------------------------------------*)
+                     
+
+
+(*⟨StringLiteralChar⟩ ::= c, where c is any character other than the
+
+backslash character (\) or the double-quote "" char  *)   
+   
+let nt_string_literal_char =
+   let nt_literal = const (fun ch -> ch != '\\' &&  ch != '\"') in 
+    pack nt_literal (fun l -> l);;
+
+
+let nt_string_meta_char = disj_list
+[
+ pack (word_ci "\\r") (fun _ -> '\r');  
+ pack (word_ci "\\n") (fun _ -> '\n');
+ pack (word_ci "\\t") (fun _ -> '\t');
+ pack (word_ci "\\f") (fun _ -> char_of_int 12);  
+ pack (word_ci "\\\\") (fun _ -> '\\');
+ pack (word_ci "\\\"") (fun _ -> '\"')
+];;
+
+(*   ⟨StringChar⟩ ::= ⟨StringLiteralChar⟩ | ⟨StringMetaChar⟩  *)         
+
+let nt_string_char =
+  let nt_sc = disj nt_string_meta_char nt_string_literal_char in
+  pack nt_sc (fun sc -> sc );; 
+  
+
+  (*  ⟨String⟩ ::= " ⟨StringChar⟩∗ "   *)
+
+let nt_string = 
+    let nt_quote = char '"' in 
+    let nt_s = caten nt_quote (caten (star nt_string_char) nt_quote) in
+    pack nt_s (fun (_,(s,_)) -> String(list_to_string s));; 
+
+     
+
+(* ------------Pair------------------Sexprs------------------------------------------------------------*)
+
+let rec nt_sexprs s= 
+  make_paired (star nt_ignore) (star nt_ignore) 
+  (disj_list 
+  [parse_bool;parse_char;parse_number;parse_string;parse_symbol;parse_list;
+  parse_unquoted;parse_unquote_and_spliced;parse_quoted;parse_quasi_quoted;parse_dotted_list]) s 
+
+  and nt_list s= 
+  let list = make_paired nt_left nt_right (star nt_sexprs) in 
+  let packed = pack list list_to_pairs in 
+  packed s 
+
+and nt_dotted_list s= 
+  let nt_dotted = caten (plus nt_sexprs) dotted in  
+  let nt_dotted = caten nt_dotted nt_sexprs in 
+  let list = make_paired nt_left nt_right nt_dotted in  
+  let packed = pack list dotted_to_pairs in 
+  packed s
+
+and nt_quoted s=  
+    let nt_g1 = char '\'' in
+    let nt_q = caten nt_g1 nt_sexprs in
+    let packed = pack nt_q (fun (q,sexp) -> Pair(Symbol("quote"),Pair(sexp ,Nil))) in 
+    packed s 
+
+and nt_quasi_quoted s= 
+    let nt_g2 = char '`' in
+    let nt_qq = caten nt_g2 nt_sexprs in
+    let packed = pack nt_qq (fun (_,sexp) -> Pair(Symbol("quasiquote"),Pair(sexp ,Nil))) in 
+    packed s  
+
+and nt_unquoted s= 
+    let nt_g3 = char ',' in
+    let nt_u = caten nt_g3 nt_sexprs in
+    let packed = pack nt_u (fun (_,sexp) -> Pair(Symbol ("unquote"),Pair(sexp ,Nil))) in 
+    packed s
+
+and nt_unquote_and_spliced s= 
+    let nt_g4 = word ",@" in
+    let nt_uas = caten nt_g4 nt_sexprs in
+    let packed = pack nt_uas (fun (_,sexp) -> Pair(Symbol ("unquote-splicing"),Pair(sexp ,Nil))) in 
+    packed s 
+
+and nt_line_comments = 
+      let comments_content = star (diff nt_any nt_end_comment) in 
+      let nt_comments = make_paired nt_start_comment nt_end_comment comments_content in 
+      pack nt_comments (fun l -> [])  
+      
+and nt_sexpr_comments s= 
+    let rec_sexpr = rec_expr nt_sexpr_comments in     
+    let disj_rec_or_epsilon = disj rec_sexpr nt_epsilon in 
+    let nt_s = caten disj_rec_or_epsilon nt_sexprs in 
+    let nt_s = caten pre_sexpr_comments nt_s in 
+    let nothing = return_nothing nt_s in 
+    nothing s 
+
+and parse_list s = (check_spaces_and_comments nt_list) s 
+and parse_dotted_list s = (check_spaces_and_comments nt_dotted_list) s  
+and parse_quoted s = (check_spaces_and_comments nt_quoted) s  
+and parse_quasi_quoted s = (check_spaces_and_comments nt_quasi_quoted) s  
+and parse_unquoted s = (check_spaces_and_comments nt_unquoted) s  
+and parse_unquote_and_spliced s = (check_spaces_and_comments nt_unquote_and_spliced) s  
+
+and parse_bool s = (check_spaces_and_comments nt_bool) s  
+and parse_char s = (check_spaces_and_comments nt_char) s
+and parse_number s = (check_spaces_and_comments (not_followed_by nt_number nt_symbol_char)) s
+and parse_string s = (check_spaces_and_comments nt_string) s 
+and parse_symbol s = (check_spaces_and_comments nt_symbol) s
+
+and space_or_comments s= (star (disj_list [nt_line_comments; nt_whitespace_pack; nt_sexpr_comments])) s 
+and check_spaces_and_comments nt = (make_paired space_or_comments space_or_comments nt);;
+
+
+let read_sexprs string =     
+  let ast_tokens = string_to_list string in
+  let (ast,rem) = (star nt_sexprs) ast_tokens in 
+  ast;;  
+
+  end;; (* struct Reader *)
+
+    
+         
+  
+   
+       
+   
+  
+   
+   
+ 
+
+
+
+
+
+
+
+
+ 
+ 
+      
+      
+      
+
+  
+  
+
+
+ 
\ No newline at end of file
diff --git a/readme.txt b/readme.txt
index e69de29..4ed1030 100644
--- a/readme.txt
+++ b/readme.txt
@@ -0,0 +1,3 @@
+Dor Ohayon: 204450985
+Bar Rubin: 205997935 
+I (We) assert that the work we submitted is 100% our own. We have not received anypart from any other student in the class, nor have we give parts of it for use to others.Nor have we used code from other sources: Courses taught previously at this university,courses taught at other universities, various bits of code found on the Internet, etc.We realize that should our code be found to contain code from other sources, that aformal case shall be opened against us withva’adat mishma’at, in pursuit of disciplinaryaction. 
diff --git a/semantic-analyser.ml b/semantic-analyser.ml
index 8e684f0..3e9c212 100644
--- a/semantic-analyser.ml
+++ b/semantic-analyser.ml
@@ -69,14 +69,146 @@ end;;
 
 module Semantics : SEMANTICS = struct
 
-let annotate_lexical_addresses e = raise X_not_yet_implemented;;
 
-let annotate_tail_calls e = raise X_not_yet_implemented;;
+let rec find_index x lst = 
+    match lst with
+    | [] -> -1 
+    | h :: t -> if x = h then 0 else 1 + (find_index x t);;  
 
-let box_set e = raise X_not_yet_implemented;;
 
+let rec make_bound_free x lst i= 
+    match lst with
+    | [] -> VarFree(x)
+    | h :: t -> if (List.mem x h) then VarBound(x,i-1,find_index x h) else (make_bound_free x t (i + 1));;
+
+
+let rec make_args args minor =
+    match args with 
+    | [] -> []
+    | car :: cdr -> [Set'(VarParam(car, minor), Box'(VarParam(car, minor)))] @ (make_args cdr (minor+1));;
+        
+
+let rec annotate_lexical e env1 env2 = 
+  match e with
+| Const(expr) -> Const'(expr)
+| Var(name) -> Var'(make_var' name env1 env2)   
+| If(test, dit, dif) ->  If'(annotate_lexical test env1 env2, annotate_lexical dit env1 env2, annotate_lexical dif env1 env2)
+| Seq(expr_list) -> Seq'(List.map (fun e -> annotate_lexical e env1 env2) expr_list)
+| Set(Var(name), value) -> Set'((make_var' name env1 env2),annotate_lexical value env1 env2) 
+| Def(Var(name) , value) -> Def'((make_var' name env1 env2),annotate_lexical value env1 env2)
+| Or(expr_list) -> Or'(List.map (fun e -> annotate_lexical e env1 env2) expr_list) 
+| LambdaSimple(args, body) -> (make_lambdaSimple args body env2)
+| LambdaOpt(args, opt, body) -> (make_lambdaOpt args opt body env2) 
+| Applic(args, body) -> (make_applic args body env1 env2) 
+
+and make_var' var env1 env2 =
+  if(List.mem var env1) 
+then (
+  let index = find_index var env1 in 
+  VarParam(var,index)
+  )
+  else(  
+    make_bound_free var env2 0
+  )
+
+and make_lambdaSimple args body env2 = 
+ let env1 = args in 
+ let env_2 = args :: env2 in 
+ let body_lambdaSimple = annotate_lexical body env1 env_2 in 
+ LambdaSimple'(args,body_lambdaSimple) 
+
+and make_lambdaOpt args opt body env2= 
+ let args_with_opt = List.append args [opt] in 
+ let env1 = args_with_opt in 
+ let env_2 = args_with_opt :: env2 in
+ let body_lambdaOpt = annotate_lexical body env1 env_2 in 
+ LambdaOpt'(args, opt, body_lambdaOpt) 
+
+and make_applic args body env1 env2 = 
+let app_body = List.map ((fun e -> annotate_lexical e env1 env2)) body in 
+Applic' (annotate_lexical args env1 env2,app_body);; 
+
+let annotate_lexical_addresses e = annotate_lexical e [] [];; 
+
+let annotate_tail_calls e = 
+  let rec tail_calls expr is_tail = 
+    match expr with
+    | Const'(e) -> expr 
+    | Var'(var) -> expr
+    | If'(test, dit, dif) -> If'((tail_calls test false), (tail_calls dit is_tail), (tail_calls dif is_tail))
+    | Seq'(exps) -> Seq'((tail_seq exps is_tail))
+    | Set'(var,e) -> Set'(var,(tail_calls e false)) 
+    | Def'(var,e) -> Def'(var,(tail_calls e false))
+    | Or'(exprs) -> Or'((tail_seq exprs is_tail))
+    | LambdaSimple'(args,body) -> LambdaSimple'(args, (tail_calls body true))
+    | LambdaOpt'(args,opt,body) -> LambdaOpt'(args, opt, (tail_calls body true))
+    | Applic'(rator,rands) -> make_TP rator rands is_tail 
+    | _ -> e
+
+  and tail_list exprs = List.map (fun e -> tail_calls e false) exprs
+
+  and make_TP rator rands is_tail= 
+  match is_tail with
+  | true -> ApplicTP'((tail_calls rator false), (tail_list rands))
+  | false -> Applic'((tail_calls rator false), (tail_list rands))
+
+  and make_seq_tail head tail is_tail =
+    let rev_tail = List.rev tail in 
+    let car = tail_list rev_tail in 
+    let cdr = tail_calls head is_tail in 
+    List.append car [cdr] 
+
+  and tail_seq exprs is_tail = 
+  let lst = List.rev exprs in 
+      match lst with
+        | head :: tail -> make_seq_tail head tail is_tail
+        | _ -> exprs in
+  tail_calls e false;;  
+
+  let rec box_set e = 
+    match e with
+    | Const'(expr) -> e 
+    | Var'(name) -> make_box_get name e    
+    | If'(test, dit, dif) ->  If'(box_set test, box_set dit, box_set dif)
+    | Seq'(expr_list) -> Seq'(List.map box_set expr_list) 
+    | Set'(VarParam(car, minor), Box'(VarParam(cdr, major))) -> Set' (VarParam(car, minor), Box'(VarParam(cdr, minor)))
+    | Set'(var, value) -> BoxSet'(var,box_set value) 
+    | Def'(var, value) -> Def'(var,box_set value)
+    | Or'(expr_list) -> Or'(List.map box_set expr_list)  
+    | LambdaSimple'(args, body) -> (make_lambdaSimple_with_box args body)
+    | LambdaOpt'(args, opt, body) -> (make_lambdaOpt_with_box args opt body) 
+    | Applic'(rands, rators) -> Applic'(box_set rands, List.map box_set rators)
+    | ApplicTP'(rands, rators) -> ApplicTP'(box_set rands, List.map box_set rators)
+    | BoxGet'(var) -> e
+    | BoxSet'(var, value) -> BoxSet'(var, box_set value)
+    | Box'(var) -> e  
+
+and make_box_get name e = 
+    match name with 
+    | VarParam(v,minor) -> BoxGet'(name)
+    | VarBound(v,major,minor) -> BoxGet'(name)
+    | _ -> e 
+
+and make_seq args_box body=
+match body with 
+| Seq'(b) -> Seq'(args_box @ (List.map box_set b)) 
+| e -> Seq'(args_box @ [box_set e]) 
+
+and make_body_seq args_box body = 
+ if (List.length args_box = 0) then (box_set body) else (make_seq args_box body) 
+
+and make_lambdaSimple_with_box args body= 
+  let args_box = make_args args 0 in 
+  let new_body = make_body_seq args_box body in 
+  LambdaSimple'(args, new_body)
+
+and make_lambdaOpt_with_box args opt body=
+let args_box = make_args (List.append args [opt]) 0 in 
+let new_body = make_body_seq args_box body in 
+LambdaOpt'(args, opt, new_body)
+  
 let run_semantics expr =
-  box_set
+    box_set 
     (annotate_tail_calls
        (annotate_lexical_addresses expr));;
   
diff --git a/structure_test.sh b/structure_test.sh
new file mode 100755
index 0000000..8221853
--- /dev/null
+++ b/structure_test.sh
@@ -0,0 +1,109 @@
+#!/bin/bash
+
+BASE_DIR=$(pwd)
+PATCH=$1
+AUTHENTICITY=readme.txt
+CODE=semantic-analyser.ml
+STATEMENT="realize that should our code be found to contain code from other sources, that a formal case shall be opened against"
+PROBLEM=0
+GIT_REPO="https://www.cs.bgu.ac.il/~comp211/compiler"
+LOCAL_REPO=compiler
+TMP_FOLDER=$(mktemp -d)
+OCAML_TMP_FILE=struct_test.ml
+OCAML_TYPE_TEST="#use \"semantic-analyser.ml\";;
+(Const'(Void): expr');;
+(Const'(Sexpr(Nil)): expr');;
+(Var'(VarFree(\"abc\")): expr');;
+(Var'(VarParam(\"abc\",0)) :expr');;
+(Var'(VarBound(\"abc\",0,0)) : expr');;
+(If'(Const'(Void),Const'(Void),Const'(Void)): expr');;
+(Box' (VarFree(\"abc\")): expr');;
+(BoxGet' (VarParam(\"abc\",0)) :expr');;
+(BoxSet' (VarParam(\"abc\",0), Const' (Sexpr(Nil)) ) :expr');;
+(Seq' [Const'(Void)] : expr');;
+(Set' ((VarParam(\"abc\",0)), Const'(Void)) : expr');;
+(Def' ((VarParam(\"abc\",0)), Const'(Void)) : expr');;
+(Or' [Const'(Void)] : expr');;
+(LambdaSimple'([\"Asdas\"],Seq' ([Const'(Void)])) : expr');;
+(LambdaOpt'([\"Asdas\"],\"Asdas\",(Seq' [Const'(Void)])) : expr');;
+(Applic'(Const'(Void),[Const'(Void)]));;
+(ApplicTP'(Const'(Void),[Const'(Void)]));;
+"
+OCAML_SIG_TEST="#use \"semantic-analyser.ml\";;
+try
+  ((Semantics.run_semantics (Const(Sexpr(Number(Fraction (1,1)))))) :expr')
+with 
+| X_not_yet_implemented -> print_string \"Warning: Your submission has problems with   Semantics.run_semantics! implementation\n\"; Const'(Void)
+| PC.X_no_match -> Const'(Void)
+| X_syntax_error -> Const'(Void);;
+"
+cleanup () {
+    #echo "cleaning up temporary files and exiting."
+    rm -rf $TMP_FOLDER
+}
+
+if [ $# -lt 1 ]; then
+    PATCH="compiler/compiler.patch" 
+fi
+
+if ! [ -f $PATCH ]; then
+    echo "ERROR: The patch file '$PATCH' cannot be found. Please provide the relative path filename to your patch file."
+    exit 2
+fi
+
+cd $TMP_FOLDER
+git clone -q $GIT_REPO
+if [ "$?" -ne 0 ]; then
+    echo "ERROR: There was a problem creating a temporary clone of the project repository. There might be a problem with your network connection. The structure test cannot be completed."
+    cleanup
+    exit 2
+fi
+
+cd $LOCAL_REPO
+git apply --ignore-whitespace --whitespace=nowarn $BASE_DIR/$PATCH
+if [ "$?" -ne 0 ]; then
+    echo "ERROR: The contents of your patch file are invalid and git cannot apply it. The structure test cannot be completed."
+    cleanup
+    exit 2
+fi
+
+
+if ! [ -f $AUTHENTICITY ]; then
+    echo "ERROR: Your submission is missing the authenticity statement file ($AUTHENTICITY)."
+    PROBLEM=1
+else 
+    ID=$(egrep -e '[0-9]{7,10}' $AUTHENTICITY)
+    STMNT=$(cat $AUTHENTICITY | tr -d [:space:] | grep -i "$(echo "$STATEMENT" | tr -d [:space:])")
+
+    if [ -z "$ID" ] || [ -z "$STMNT" ] ; then
+	echo "ERROR: Your authenticity statement (in $AUTHENTICITY) is incomplete."
+	PROBLEM=1
+    fi
+fi
+
+if ! [ -f $CODE ]; then
+    echo "ERROR: Your submission is missing the required code file: $CODE."
+    PROBLEM=1
+fi
+
+echo $OCAML_TYPE_TEST > $OCAML_TMP_FILE && ocaml $OCAML_TMP_FILE 
+if [ $? -ne 0 ]; then
+    echo "ERROR: Your OCaml code contains invalid changes to  types."
+    PROBLEM=1
+fi
+
+echo $OCAML_SIG_TEST > $OCAML_TMP_FILE && ocaml $OCAML_TMP_FILE 
+if [ $? -ne 0 ]; then
+    echo "ERROR: Your OCaml code contains invalid changes to the signatures of the Semantics module."
+    PROBLEM=1
+fi
+
+if [ $PROBLEM -ne 0 ]; then
+    echo "!!! Your submission is invalid. Please correct the problems and try again. !!!"
+else 
+    echo "Your submission passed the structure test.
+This does not mean that your assignment is correct, only that we can test it properly."
+fi
+
+cleanup
+exit $PROBLEM
\ No newline at end of file
diff --git a/tag-parser.ml b/tag-parser.ml
index 138249e..6fecf74 100644
--- a/tag-parser.ml
+++ b/tag-parser.ml
@@ -1,4 +1,5 @@
 #use "reader.ml";;
+open Reader;;
 
 type constant =
   | Sexpr of sexpr
@@ -40,7 +41,6 @@ let rec expr_eq e1 e2 =
      (expr_eq e1 e2) &&
        (List.for_all2 expr_eq args1 args2)
   | _ -> false;;
-	
                        
 exception X_syntax_error;;
 
@@ -57,9 +57,271 @@ let reserved_word_list =
    "unquote-splicing"];;  
 
 (* work on the tag parser starts here *)
+let make_var var = 
+  if (List.mem var reserved_word_list) then raise X_syntax_error else Var(var);;
 
-let tag_parse_expressions sexpr = raise X_not_yet_implemented;;
+let valid_input var = 
+  if (List.mem var reserved_word_list) then raise X_syntax_error else var;;
 
+let rec make_list pairs =
+  match pairs with
+  | Nil -> []
+  | Pair(car,Nil) -> [car]
+  | Pair(car,cdr) -> [car] @ (make_list cdr)
+  | _ -> [];;  
+
+let rec make_flatten_list list =
+  match list with
+  | Seq(x) -> x
+  | x -> [x];; 
+
+let rec make_string_list args = 
+  match args with
+  | Nil -> []
+  | Pair(Symbol(car),Nil) -> [car]
+  | Pair(Symbol(car),cdr) -> [car] @ (make_string_list cdr)
+  | _ -> raise X_syntax_error;; 
+
+let rec make_args_list args = 
+    match args with 
+  | Pair(Symbol(a),Symbol(b)) -> [(valid_input a)]
+  | Pair(Symbol(a),b) -> valid_input a :: (make_args_list b)
+  | Symbol(name) -> [(valid_input name)] 
+  | Nil -> []
+  | _ -> raise X_syntax_error;; 
+  
+let rec is_opt args = 
+    match args with 
+  | Pair(Symbol(a),Symbol(b)) -> true 
+  | Pair(Symbol(var),cdr) -> is_opt cdr
+  | Nil -> false
+  | _ -> raise X_syntax_error 
+
+let rec last_var_opt args= 
+  match args with 
+  | Pair(Symbol(a),Symbol(b)) -> (valid_input b)
+  | Pair(Symbol(a),b) -> last_var_opt b
+  | Symbol(a) -> a 
+  | _ -> raise X_syntax_error 
+
+let rec make_args_list_proper args= 
+  match args with
+| Pair(Symbol(a),Nil) -> [a]
+| Pair(Symbol(a),b) ->  a :: (make_args_list_proper b)
+| Symbol(x) -> [x]
+| Nil -> []
+| _ -> raise X_syntax_error
+  
+ 
+let rec make_quasiquoted q = 
+  match q with 
+| Pair(Symbol("unquote"),Pair(sexp,Nil)) -> sexp
+| Pair(Symbol("unquote-splicing"),Pair(sexp,Nil)) -> raise X_syntax_error
+| Symbol(name) -> Pair(Symbol("quote"),Pair(Symbol(name),Nil))
+| Pair(Pair(Symbol("unquote-splicing"),Pair(sexp,Nil)),b) -> Pair(Symbol("append") ,Pair(sexp,Pair(make_quasiquoted b,Nil)))
+| Pair(a,Pair(Symbol("unquote-splicing"),Pair(sexp,Nil))) -> Pair(Symbol("cons"), Pair(make_quasiquoted a,Pair(sexp,Nil)))
+| Pair(a,b) -> Pair(Symbol("cons"),Pair(make_quasiquoted a,Pair(make_quasiquoted b,Nil)))  
+| _ -> q;; 
+
+let rec make_cond_ribs ribs = 
+  match ribs with 
+  | Pair(Pair(test,Pair(Symbol("=>"),Pair(rib,Nil))),Nil) -> make_cond2_nil test rib 
+  | Pair(Pair(test,Pair(Symbol("=>"),Pair(rib,Nil))),rest_ribs) -> make_cond2 test rib rest_ribs
+  | Pair(Symbol "else",rest_ribs) -> make_cond3 rest_ribs 
+  | Pair(Pair(Symbol("else"),rest_ribs),z) -> make_cond3 rest_ribs 
+  | Pair(Pair(test,thens),elsee) -> make_cond1 test thens elsee  
+  | x -> Pair(Symbol("begin"),x) 
+
+and make_cond1 test thens elsee=
+Pair (Symbol "if", 
+Pair (test, 
+Pair (Pair (Symbol "begin", thens), 
+Pair ((make_cond_ribs elsee), Nil))))
+
+and make_cond2 test rib rest_rib =
+  Pair(Symbol "let", 
+        Pair(Pair(Pair(Symbol "value", Pair(test, Nil)),
+            Pair(Pair(Symbol "f", Pair(Pair(Symbol "lambda", Pair(Nil, Pair(rib , Nil))), Nil)), 
+            Pair(Pair(Symbol "rest", Pair(Pair(Symbol "lambda", Pair(Nil, Pair((make_cond_ribs rest_rib), Nil))), Nil)), Nil))),
+            Pair(Pair(Symbol "if", Pair(Symbol "value", Pair(Pair(Pair(Symbol "f", Nil), Pair(Symbol "value", Nil)),
+            Pair(Pair(Symbol "rest", Nil), Nil)))), Nil))) 
+
+and make_cond2_nil test rib =
+Pair (Symbol "let", 
+      Pair (Pair (Pair (Symbol "value", Pair (test, Nil)),
+      Pair (Pair (Symbol "f",Pair (Pair (Symbol "lambda", 
+      Pair (Nil, Pair (rib, Nil))), Nil)), Nil)) ,
+      Pair (Pair (Symbol "if",Pair (Symbol "value",
+      Pair (Pair (Pair (Symbol "f", Nil), 
+      Pair (Symbol "value", Nil)),Nil))),Nil)))
+
+and make_cond3 rest_ribs =
+  Pair(Symbol "begin", rest_ribs);;
+
+let make_MIT_define args body = 
+  match args with
+| Pair(name,rest) -> Pair(Symbol "define", Pair(name,Pair(Pair(Symbol("lambda") , Pair(rest,body)),Nil)))  
+| _ -> raise X_syntax_error;;
+
+let rec extract_names ribs = 
+  match ribs with
+| Pair(Symbol(var),Pair(value,Nil)) -> Symbol(var)
+| Pair(car,cdr) -> Pair(extract_names car , extract_names cdr) 
+| Nil -> Nil 
+| _ -> raise X_syntax_error;; 
+
+let rec extract_pair_names ribs = 
+  match ribs with
+| Pair(Symbol(var),Pair(value,Nil)) ->  Pair(Symbol(var), Pair(Pair(Symbol("quote"), Pair(Symbol("whatever"),Nil)),Nil)) 
+| Pair(car,cdr) -> Pair(extract_pair_names car , extract_pair_names cdr) 
+| Nil -> Nil 
+| _ -> raise X_syntax_error;; 
+
+
+let rec extract_vals ribs =
+  match ribs with
+| Nil -> Nil 
+| Pair(Symbol(var),Pair(value,Nil)) -> value 
+| Pair(car,cdr) -> Pair(extract_vals car , extract_vals cdr) 
+| _ -> raise X_syntax_error;; 
+
+let make_let ribs body =  
+  let params_names = extract_names ribs in 
+  let params_vals = extract_vals ribs in 
+  let lambda_expr = Pair(Pair(Symbol "lambda", Pair(params_names, body)),params_vals) in 
+  lambda_expr;;
+
+let make_let_star_case1 body =
+  Pair(Symbol "let", Pair(Nil, body));; 
+
+let make_let_star_case2 ribs body = 
+  Pair(Symbol "let", Pair(ribs, body));;
+  
+let rec make_let_star ribs body = 
+  match ribs with
+  | Nil -> make_let_star_case1 body 
+  | Pair(Pair(Symbol(var),Pair(value,Nil)), Nil)-> make_let_star_case2 ribs body 
+  | Pair(car, cdr) -> Pair(Symbol "let", Pair(Pair(car , Nil), (Pair(make_let_star cdr body, Nil))))
+  | _ -> raise X_syntax_error;; 
+
+let rec extract_pair_sets ribs body= 
+    match ribs with
+  | Nil -> body 
+  | Pair(Symbol(var),Pair(value,Nil)) -> Pair(Symbol "set!",Pair(Symbol(var),Pair(value,Nil))) 
+  | Pair(car,cdr) -> Pair((extract_pair_sets car body), (extract_pair_sets cdr body)) 
+  | _ -> raise X_syntax_error;; 
+
+let make_letrec ribs body =  
+  let params_pair_names = extract_pair_names ribs in 
+  let pair_sets = extract_pair_sets ribs body in 
+  Pair(Symbol "let", Pair(params_pair_names, pair_sets));;
+
+
+let rec make_vars_temp_x expres = 
+    match expres with
+  | Pair(Symbol(x),Pair(y,Nil)) -> Symbol("N_" ^ x)
+  | Pair(car,cdr) -> Pair(make_vars_temp_x car , make_vars_temp_x cdr) 
+  | Nil -> Nil 
+  | _ -> raise X_syntax_error;;
+
+
+let rec make_match_sets expres =  
+  match expres with
+  | Pair(Symbol(x),Pair(y,Nil)) -> Pair(Symbol("set!"),Pair(Symbol("N_" ^ x), Pair(Symbol(x),Nil))) 
+  | Pair(car,cdr) -> Pair(make_match_sets car , make_match_sets cdr) 
+  | Nil -> Nil 
+  | _ -> raise X_syntax_error;;
+
+let make_pset expres =  
+  let vars_temp = make_vars_temp_x expres in 
+  let sets = make_match_sets expres in 
+  Pair(Symbol "let", Pair(vars_temp, sets));;
+
+let rec tag_parse sexpr =
+  match sexpr with
+| Bool(x) -> Const(Sexpr(Bool(x)))
+| Char(x) -> Const(Sexpr(Char(x)))
+| Number(x) -> Const(Sexpr(Number(x)))
+| String(x) -> Const(Sexpr(String(x))) 
+| Symbol(x) -> make_var(x) 
+| Pair(Symbol("quote"), Pair(x, Nil)) -> Const(Sexpr(x))
+| Pair(Symbol("quasiquote"), Pair(content, Nil)) -> tag_parse (make_quasiquoted content)
+| Pair(Symbol("if"), Pair(test, Pair(dit, Nil))) -> If(tag_parse test, tag_parse dit, Const(Void))
+| Pair(Symbol("if"), Pair(test, Pair(dit, Pair(dif, Nil)))) -> If(tag_parse test, tag_parse dit, tag_parse dif)
+| Pair(Symbol("lambda"), expres) -> make_lambda expres
+| Pair(Symbol("or"),expres) ->  make_or expres
+| Pair(Symbol("define"),Pair(Symbol(name) ,Pair(body,Nil))) ->  Def(make_var name, tag_parse body)
+| Pair(Symbol("define"),Pair(args,body)) -> tag_parse (make_MIT_define args body)
+| Pair(Symbol("set!"),Pair(Symbol(var),Pair(body,Nil))) -> Set(make_var var ,tag_parse body)
+| Pair(Symbol("pset!"), expres) -> tag_parse (make_pset expres) 
+| Pair(Symbol("begin"), Nil) -> Const(Void)
+| Pair(Symbol "begin", Pair(expr, Nil)) ->  tag_parse expr 
+| Pair(Symbol "begin", expres) -> make_seq expres  
+| Pair(Symbol "let", Pair(ribs,body)) -> tag_parse (make_let ribs body)
+| Pair(Symbol "let*", Pair(ribs,body)) -> tag_parse (make_let_star ribs body) 
+| Pair(Symbol "letrec", Pair(ribs,body)) ->  tag_parse (make_letrec ribs body) 
+| Pair(Symbol "and", expres) -> make_and expres 
+| Pair(Symbol("cond"), ribs) -> tag_parse (make_cond_ribs ribs)
+| Pair(func,params) ->  make_Applic func params 
+| Nil -> Const(Sexpr(Nil))
+| _ -> raise X_syntax_error
+
+and make_lambda expres=       
+  match expres with 
+| Pair(x,Nil) -> raise X_syntax_error
+| Pair(Symbol(var),body) -> make_variadic var body
+| Pair(args,body) -> make_opt_or_simple args body
+| _ -> raise X_syntax_error
+
+and make_variadic var body = 
+let body_tag = tag_parse (Pair(Symbol("begin"),body)) in 
+  LambdaOpt([],var, body_tag)   
+
+and make_opt_or_simple args body = 
+let body_tag = tag_parse (Pair(Symbol("begin"),body)) in
+  if(is_opt args) then (make_opt args body_tag) else (make_simple args body_tag) 
+
+and make_opt args body_tag = 
+let args_list = make_args_list args in   
+let opt = last_var_opt args in 
+LambdaOpt(args_list,opt,body_tag) 
+
+and make_simple args body_tag = 
+let args_list = make_args_list_proper args in 
+LambdaSimple(args_list,body_tag)
+
+and make_Applic func params = 
+  let params_list = List.map tag_parse (make_list params) in
+  let tag_func = tag_parse func in
+  Applic(tag_func, params_list)
+  
+and make_or expres = 
+  match expres with
+| Nil -> Const(Sexpr(Bool(false)))
+| Pair(expr,Nil) -> tag_parse expr
+| Pair(car,cdr) -> make_or_list (make_list expres)
+| _ -> raise X_syntax_error
+
+and make_or_list or_list = 
+  let expres_list = List.map tag_parse or_list in
+  Or(expres_list) 
+  
+and make_seq expres = 
+    let expres_list = make_list expres in 
+    let expres_list = List.map tag_parse expres_list in
+    let flatten_seq = List.map make_flatten_list expres_list in 
+    let seq_list = List.flatten flatten_seq in 
+    Seq(seq_list) 
+  
+and make_and expres = 
+    match expres with
+  | Pair(car, Nil) -> tag_parse car
+  | Pair(car, cdr) -> If(tag_parse car, make_and cdr, Const(Sexpr(Bool(false))))
+  | _ -> raise X_syntax_error;; 
+  
+  
+let tag_parse_expressions sexpr = List.map tag_parse sexpr;;
   
 end;; (* struct Tag_Parser *)
 
+
